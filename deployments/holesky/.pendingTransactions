{
  "0x5aa9a76f1019a659a853601efa8c9b20217f1cc1c63cd17ce8305a493cfe0261": {
    "name": "BaseERC20",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "BaseERC20",
      "sourceName": "contracts/tokens/BaseERC20.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "initialOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "needed",
              "type": "uint256"
            }
          ],
          "name": "ERC20InsufficientAllowance",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "needed",
              "type": "uint256"
            }
          ],
          "name": "ERC20InsufficientBalance",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "approver",
              "type": "address"
            }
          ],
          "name": "ERC20InvalidApprover",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "name": "ERC20InvalidReceiver",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "ERC20InvalidSender",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "name": "ERC20InvalidSpender",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "OwnableInvalidOwner",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "OwnableUnauthorizedAccount",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "mint",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x608060405234801561001057600080fd5b50604051611d13380380611d138339818101604052810190610032919061055f565b806040518060400160405280600981526020017f42617365546f6b656e00000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f424153450000000000000000000000000000000000000000000000000000000081525081600390816100ae91906107dc565b5080600490816100be91906107dc565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101335760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161012a91906108bd565b60405180910390fd5b6101428161018060201b60201c565b5061017a3361015561024660201b60201c565b600a6101619190610a47565b620f424061016f9190610a92565b61024f60201b60201c565b50610b69565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006012905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036102c15760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016102b891906108bd565b60405180910390fd5b6102d3600083836102d760201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361032957806002600082825461031d9190610ad4565b925050819055506103fc565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156103b5578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016103ac93929190610b17565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036104455780600260008282540392505081905550610492565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516104ef9190610b4e565b60405180910390a3505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061052c82610501565b9050919050565b61053c81610521565b811461054757600080fd5b50565b60008151905061055981610533565b92915050565b600060208284031215610575576105746104fc565b5b60006105838482850161054a565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061060d57607f821691505b6020821081036106205761061f6105c6565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261064b565b610692868361064b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006106d96106d46106cf846106aa565b6106b4565b6106aa565b9050919050565b6000819050919050565b6106f3836106be565b6107076106ff826106e0565b848454610658565b825550505050565b600090565b61071c61070f565b6107278184846106ea565b505050565b5b8181101561074b57610740600082610714565b60018101905061072d565b5050565b601f8211156107905761076181610626565b61076a8461063b565b81016020851015610779578190505b61078d6107858561063b565b83018261072c565b50505b505050565b600082821c905092915050565b60006107b360001984600802610795565b1980831691505092915050565b60006107cc83836107a2565b9150826002028217905092915050565b6107e58261058c565b67ffffffffffffffff8111156107fe576107fd610597565b5b61080882546105f5565b61081382828561074f565b600060209050601f8311600181146108465760008415610834578287015190505b61083e85826107c0565b8655506108a6565b601f19841661085486610626565b60005b8281101561087c57848901518255600182019150602085019450602081019050610857565b868310156108995784890151610895601f8916826107a2565b8355505b6001600288020188555050505b505050505050565b6108b781610521565b82525050565b60006020820190506108d260008301846108ae565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b600185111561095e5780860481111561093a576109396108d8565b5b60018516156109495780820291505b808102905061095785610907565b945061091e565b94509492505050565b6000826109775760019050610a33565b816109855760009050610a33565b816001811461099b57600281146109a5576109d4565b6001915050610a33565b60ff8411156109b7576109b66108d8565b5b8360020a9150848211156109ce576109cd6108d8565b5b50610a33565b5060208310610133831016604e8410600b8410161715610a095782820a905083811115610a0457610a036108d8565b5b610a33565b610a168484846001610914565b92509050818404811115610a2d57610a2c6108d8565b5b81810290505b9392505050565b600060ff82169050919050565b6000610a52826106aa565b9150610a5d83610a3a565b9250610a8a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610967565b905092915050565b6000610a9d826106aa565b9150610aa8836106aa565b9250828202610ab6816106aa565b91508282048414831517610acd57610acc6108d8565b5b5092915050565b6000610adf826106aa565b9150610aea836106aa565b9250828201905080821115610b0257610b016108d8565b5b92915050565b610b11816106aa565b82525050565b6000606082019050610b2c60008301866108ae565b610b396020830185610b08565b610b466040830184610b08565b949350505050565b6000602082019050610b636000830184610b08565b92915050565b61119b80610b786000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806370a082311161008c57806395d89b411161006657806395d89b4114610202578063a9059cbb14610220578063dd62ed3e14610250578063f2fde38b14610280576100cf565b806370a08231146101aa578063715018a6146101da5780638da5cb5b146101e4576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce5671461017057806340c10f191461018e575b600080fd5b6100dc61029c565b6040516100e99190610def565b60405180910390f35b61010c60048036038101906101079190610eaa565b61032e565b6040516101199190610f05565b60405180910390f35b61012a610351565b6040516101379190610f2f565b60405180910390f35b61015a60048036038101906101559190610f4a565b61035b565b6040516101679190610f05565b60405180910390f35b61017861038a565b6040516101859190610fb9565b60405180910390f35b6101a860048036038101906101a39190610eaa565b610393565b005b6101c460048036038101906101bf9190610fd4565b6103a9565b6040516101d19190610f2f565b60405180910390f35b6101e26103f1565b005b6101ec610405565b6040516101f99190611010565b60405180910390f35b61020a61042f565b6040516102179190610def565b60405180910390f35b61023a60048036038101906102359190610eaa565b6104c1565b6040516102479190610f05565b60405180910390f35b61026a6004803603810190610265919061102b565b6104e4565b6040516102779190610f2f565b60405180910390f35b61029a60048036038101906102959190610fd4565b61056b565b005b6060600380546102ab9061109a565b80601f01602080910402602001604051908101604052809291908181526020018280546102d79061109a565b80156103245780601f106102f957610100808354040283529160200191610324565b820191906000526020600020905b81548152906001019060200180831161030757829003601f168201915b5050505050905090565b6000806103396105f1565b90506103468185856105f9565b600191505092915050565b6000600254905090565b6000806103666105f1565b905061037385828561060b565b61037e8585856106a0565b60019150509392505050565b60006012905090565b61039b610794565b6103a5828261081b565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6103f9610794565b610403600061089d565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461043e9061109a565b80601f016020809104026020016040519081016040528092919081815260200182805461046a9061109a565b80156104b75780601f1061048c576101008083540402835291602001916104b7565b820191906000526020600020905b81548152906001019060200180831161049a57829003601f168201915b5050505050905090565b6000806104cc6105f1565b90506104d98185856106a0565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610573610794565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105e55760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016105dc9190611010565b60405180910390fd5b6105ee8161089d565b50565b600033905090565b6106068383836001610963565b505050565b600061061784846104e4565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81101561069a578181101561068a578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610681939291906110cb565b60405180910390fd5b61069984848484036000610963565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107125760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016107099190611010565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107845760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161077b9190611010565b60405180910390fd5b61078f838383610b3a565b505050565b61079c6105f1565b73ffffffffffffffffffffffffffffffffffffffff166107ba610405565b73ffffffffffffffffffffffffffffffffffffffff1614610819576107dd6105f1565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108109190611010565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361088d5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016108849190611010565b60405180910390fd5b61089960008383610b3a565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036109d55760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016109cc9190611010565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a475760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610a3e9190611010565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610b34578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610b2b9190610f2f565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b8c578060026000828254610b809190611131565b92505081905550610c5f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c18578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610c0f939291906110cb565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ca85780600260008282540392505081905550610cf5565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d529190610f2f565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d99578082015181840152602081019050610d7e565b60008484015250505050565b6000601f19601f8301169050919050565b6000610dc182610d5f565b610dcb8185610d6a565b9350610ddb818560208601610d7b565b610de481610da5565b840191505092915050565b60006020820190508181036000830152610e098184610db6565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e4182610e16565b9050919050565b610e5181610e36565b8114610e5c57600080fd5b50565b600081359050610e6e81610e48565b92915050565b6000819050919050565b610e8781610e74565b8114610e9257600080fd5b50565b600081359050610ea481610e7e565b92915050565b60008060408385031215610ec157610ec0610e11565b5b6000610ecf85828601610e5f565b9250506020610ee085828601610e95565b9150509250929050565b60008115159050919050565b610eff81610eea565b82525050565b6000602082019050610f1a6000830184610ef6565b92915050565b610f2981610e74565b82525050565b6000602082019050610f446000830184610f20565b92915050565b600080600060608486031215610f6357610f62610e11565b5b6000610f7186828701610e5f565b9350506020610f8286828701610e5f565b9250506040610f9386828701610e95565b9150509250925092565b600060ff82169050919050565b610fb381610f9d565b82525050565b6000602082019050610fce6000830184610faa565b92915050565b600060208284031215610fea57610fe9610e11565b5b6000610ff884828501610e5f565b91505092915050565b61100a81610e36565b82525050565b60006020820190506110256000830184611001565b92915050565b6000806040838503121561104257611041610e11565b5b600061105085828601610e5f565b925050602061106185828601610e5f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806110b257607f821691505b6020821081036110c5576110c461106b565b5b50919050565b60006060820190506110e06000830186611001565b6110ed6020830185610f20565b6110fa6040830184610f20565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061113c82610e74565b915061114783610e74565b925082820190508082111561115f5761115e611102565b5b9291505056fea2646970667358221220ba6e1025bd3915ea9ad7d7a9d93e541077ba1b0424f0c1c19384a020bcc30d9764736f6c634300081c0033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806370a082311161008c57806395d89b411161006657806395d89b4114610202578063a9059cbb14610220578063dd62ed3e14610250578063f2fde38b14610280576100cf565b806370a08231146101aa578063715018a6146101da5780638da5cb5b146101e4576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce5671461017057806340c10f191461018e575b600080fd5b6100dc61029c565b6040516100e99190610def565b60405180910390f35b61010c60048036038101906101079190610eaa565b61032e565b6040516101199190610f05565b60405180910390f35b61012a610351565b6040516101379190610f2f565b60405180910390f35b61015a60048036038101906101559190610f4a565b61035b565b6040516101679190610f05565b60405180910390f35b61017861038a565b6040516101859190610fb9565b60405180910390f35b6101a860048036038101906101a39190610eaa565b610393565b005b6101c460048036038101906101bf9190610fd4565b6103a9565b6040516101d19190610f2f565b60405180910390f35b6101e26103f1565b005b6101ec610405565b6040516101f99190611010565b60405180910390f35b61020a61042f565b6040516102179190610def565b60405180910390f35b61023a60048036038101906102359190610eaa565b6104c1565b6040516102479190610f05565b60405180910390f35b61026a6004803603810190610265919061102b565b6104e4565b6040516102779190610f2f565b60405180910390f35b61029a60048036038101906102959190610fd4565b61056b565b005b6060600380546102ab9061109a565b80601f01602080910402602001604051908101604052809291908181526020018280546102d79061109a565b80156103245780601f106102f957610100808354040283529160200191610324565b820191906000526020600020905b81548152906001019060200180831161030757829003601f168201915b5050505050905090565b6000806103396105f1565b90506103468185856105f9565b600191505092915050565b6000600254905090565b6000806103666105f1565b905061037385828561060b565b61037e8585856106a0565b60019150509392505050565b60006012905090565b61039b610794565b6103a5828261081b565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6103f9610794565b610403600061089d565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461043e9061109a565b80601f016020809104026020016040519081016040528092919081815260200182805461046a9061109a565b80156104b75780601f1061048c576101008083540402835291602001916104b7565b820191906000526020600020905b81548152906001019060200180831161049a57829003601f168201915b5050505050905090565b6000806104cc6105f1565b90506104d98185856106a0565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610573610794565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105e55760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016105dc9190611010565b60405180910390fd5b6105ee8161089d565b50565b600033905090565b6106068383836001610963565b505050565b600061061784846104e4565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81101561069a578181101561068a578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610681939291906110cb565b60405180910390fd5b61069984848484036000610963565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107125760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016107099190611010565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107845760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161077b9190611010565b60405180910390fd5b61078f838383610b3a565b505050565b61079c6105f1565b73ffffffffffffffffffffffffffffffffffffffff166107ba610405565b73ffffffffffffffffffffffffffffffffffffffff1614610819576107dd6105f1565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108109190611010565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361088d5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016108849190611010565b60405180910390fd5b61089960008383610b3a565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036109d55760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016109cc9190611010565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a475760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610a3e9190611010565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610b34578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610b2b9190610f2f565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b8c578060026000828254610b809190611131565b92505081905550610c5f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c18578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610c0f939291906110cb565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ca85780600260008282540392505081905550610cf5565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d529190610f2f565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d99578082015181840152602081019050610d7e565b60008484015250505050565b6000601f19601f8301169050919050565b6000610dc182610d5f565b610dcb8185610d6a565b9350610ddb818560208601610d7b565b610de481610da5565b840191505092915050565b60006020820190508181036000830152610e098184610db6565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e4182610e16565b9050919050565b610e5181610e36565b8114610e5c57600080fd5b50565b600081359050610e6e81610e48565b92915050565b6000819050919050565b610e8781610e74565b8114610e9257600080fd5b50565b600081359050610ea481610e7e565b92915050565b60008060408385031215610ec157610ec0610e11565b5b6000610ecf85828601610e5f565b9250506020610ee085828601610e95565b9150509250929050565b60008115159050919050565b610eff81610eea565b82525050565b6000602082019050610f1a6000830184610ef6565b92915050565b610f2981610e74565b82525050565b6000602082019050610f446000830184610f20565b92915050565b600080600060608486031215610f6357610f62610e11565b5b6000610f7186828701610e5f565b9350506020610f8286828701610e5f565b9250506040610f9386828701610e95565b9150509250925092565b600060ff82169050919050565b610fb381610f9d565b82525050565b6000602082019050610fce6000830184610faa565b92915050565b600060208284031215610fea57610fe9610e11565b5b6000610ff884828501610e5f565b91505092915050565b61100a81610e36565b82525050565b60006020820190506110256000830184611001565b92915050565b6000806040838503121561104257611041610e11565b5b600061105085828601610e5f565b925050602061106185828601610e5f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806110b257607f821691505b6020821081036110c5576110c461106b565b5b50919050565b60006060820190506110e06000830186611001565b6110ed6020830185610f20565b6110fa6040830184610f20565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061113c82610e74565b915061114783610e74565b925082820190508082111561115f5761115e611102565b5b9291505056fea2646970667358221220ba6e1025bd3915ea9ad7d7a9d93e541077ba1b0424f0c1c19384a020bcc30d9764736f6c634300081c0033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "errors": {
          "ERC20InsufficientAllowance(address,uint256,uint256)": [
            {
              "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
              "params": {
                "allowance": "Amount of tokens a `spender` is allowed to operate with.",
                "needed": "Minimum amount required to perform a transfer.",
                "spender": "Address that may be allowed to operate on tokens without being their owner."
              }
            }
          ],
          "ERC20InsufficientBalance(address,uint256,uint256)": [
            {
              "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
              "params": {
                "balance": "Current balance for the interacting account.",
                "needed": "Minimum amount required to perform a transfer.",
                "sender": "Address whose tokens are being transferred."
              }
            }
          ],
          "ERC20InvalidApprover(address)": [
            {
              "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
              "params": {
                "approver": "Address initiating an approval operation."
              }
            }
          ],
          "ERC20InvalidReceiver(address)": [
            {
              "details": "Indicates a failure with the token `receiver`. Used in transfers.",
              "params": {
                "receiver": "Address to which tokens are being transferred."
              }
            }
          ],
          "ERC20InvalidSender(address)": [
            {
              "details": "Indicates a failure with the token `sender`. Used in transfers.",
              "params": {
                "sender": "Address whose tokens are being transferred."
              }
            }
          ],
          "ERC20InvalidSpender(address)": [
            {
              "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
              "params": {
                "spender": "Address that may be allowed to operate on tokens without being their owner."
              }
            }
          ],
          "OwnableInvalidOwner(address)": [
            {
              "details": "The owner is not a valid owner account. (eg. `address(0)`)"
            }
          ],
          "OwnableUnauthorizedAccount(address)": [
            {
              "details": "The caller account is not authorized to perform an operation."
            }
          ]
        },
        "events": {
          "Approval(address,address,uint256)": {
            "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
          },
          "Transfer(address,address,uint256)": {
            "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
          }
        },
        "kind": "dev",
        "methods": {
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_1620": {
              "entryPoint": null,
              "id": 1620,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_50": {
              "entryPoint": null,
              "id": 50,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_9632": {
              "entryPoint": null,
              "id": 9632,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_mint_1923": {
              "entryPoint": 591,
              "id": 1923,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_transferOwnership_146": {
              "entryPoint": 384,
              "id": 146,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_update_1890": {
              "entryPoint": 727,
              "id": 1890,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@decimals_1647": {
              "entryPoint": 582,
              "id": 1647,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "abi_decode_t_address_fromMemory": {
              "entryPoint": 1354,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address_fromMemory": {
              "entryPoint": 1375,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_address_to_t_address_fromStack": {
              "entryPoint": 2222,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_uint256_to_t_uint256_fromStack": {
              "entryPoint": 2824,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": 2237,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": 2839,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": 2894,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "allocate_unbounded": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "array_dataslot_t_string_storage": {
              "entryPoint": 1574,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_length_t_string_memory_ptr": {
              "entryPoint": 1420,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 2772,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_exp_helper": {
              "entryPoint": 2324,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 2
            },
            "checked_exp_t_uint256_t_uint8": {
              "entryPoint": 2631,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_exp_unsigned": {
              "entryPoint": 2407,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "checked_mul_t_uint256": {
              "entryPoint": 2706,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "clean_up_bytearray_end_slots_t_string_storage": {
              "entryPoint": 1871,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "cleanup_t_address": {
              "entryPoint": 1313,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint160": {
              "entryPoint": 1281,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint256": {
              "entryPoint": 1706,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint8": {
              "entryPoint": 2618,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "clear_storage_range_t_bytes1": {
              "entryPoint": 1836,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "convert_t_uint256_to_t_uint256": {
              "entryPoint": 1726,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
              "entryPoint": 2012,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "divide_by_32_ceil": {
              "entryPoint": 1595,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_byte_array_length": {
              "entryPoint": 1525,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_used_part_and_set_length_of_short_byte_array": {
              "entryPoint": 1984,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "identity": {
              "entryPoint": 1716,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mask_bytes_dynamic": {
              "entryPoint": 1954,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 2264,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x22": {
              "entryPoint": 1478,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 1431,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "prepare_store_t_uint256": {
              "entryPoint": 1760,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
              "entryPoint": 1276,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "shift_left_dynamic": {
              "entryPoint": 1611,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "shift_right_1_unsigned": {
              "entryPoint": 2311,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "shift_right_unsigned_dynamic": {
              "entryPoint": 1941,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "storage_set_to_zero_t_uint256": {
              "entryPoint": 1812,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "update_byte_slice_dynamic32": {
              "entryPoint": 1624,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "update_storage_value_t_uint256_to_t_uint256": {
              "entryPoint": 1770,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "validator_revert_t_address": {
              "entryPoint": 1331,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "zero_value_for_split_t_uint256": {
              "entryPoint": 1807,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nativeSrc": "0:10797:34",
                "nodeType": "YulBlock",
                "src": "0:10797:34",
                "statements": [
                  {
                    "body": {
                      "nativeSrc": "47:35:34",
                      "nodeType": "YulBlock",
                      "src": "47:35:34",
                      "statements": [
                        {
                          "nativeSrc": "57:19:34",
                          "nodeType": "YulAssignment",
                          "src": "57:19:34",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "73:2:34",
                                "nodeType": "YulLiteral",
                                "src": "73:2:34",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "67:5:34",
                              "nodeType": "YulIdentifier",
                              "src": "67:5:34"
                            },
                            "nativeSrc": "67:9:34",
                            "nodeType": "YulFunctionCall",
                            "src": "67:9:34"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nativeSrc": "57:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "57:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "allocate_unbounded",
                    "nativeSrc": "7:75:34",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "40:6:34",
                        "nodeType": "YulTypedName",
                        "src": "40:6:34",
                        "type": ""
                      }
                    ],
                    "src": "7:75:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "177:28:34",
                      "nodeType": "YulBlock",
                      "src": "177:28:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "194:1:34",
                                "nodeType": "YulLiteral",
                                "src": "194:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "197:1:34",
                                "nodeType": "YulLiteral",
                                "src": "197:1:34",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "187:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "187:6:34"
                            },
                            "nativeSrc": "187:12:34",
                            "nodeType": "YulFunctionCall",
                            "src": "187:12:34"
                          },
                          "nativeSrc": "187:12:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "187:12:34"
                        }
                      ]
                    },
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nativeSrc": "88:117:34",
                    "nodeType": "YulFunctionDefinition",
                    "src": "88:117:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "300:28:34",
                      "nodeType": "YulBlock",
                      "src": "300:28:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "317:1:34",
                                "nodeType": "YulLiteral",
                                "src": "317:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "320:1:34",
                                "nodeType": "YulLiteral",
                                "src": "320:1:34",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "310:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "310:6:34"
                            },
                            "nativeSrc": "310:12:34",
                            "nodeType": "YulFunctionCall",
                            "src": "310:12:34"
                          },
                          "nativeSrc": "310:12:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "310:12:34"
                        }
                      ]
                    },
                    "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                    "nativeSrc": "211:117:34",
                    "nodeType": "YulFunctionDefinition",
                    "src": "211:117:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "379:81:34",
                      "nodeType": "YulBlock",
                      "src": "379:81:34",
                      "statements": [
                        {
                          "nativeSrc": "389:65:34",
                          "nodeType": "YulAssignment",
                          "src": "389:65:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "404:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "404:5:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "411:42:34",
                                "nodeType": "YulLiteral",
                                "src": "411:42:34",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "400:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "400:3:34"
                            },
                            "nativeSrc": "400:54:34",
                            "nodeType": "YulFunctionCall",
                            "src": "400:54:34"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "389:7:34",
                              "nodeType": "YulIdentifier",
                              "src": "389:7:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint160",
                    "nativeSrc": "334:126:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "361:5:34",
                        "nodeType": "YulTypedName",
                        "src": "361:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "371:7:34",
                        "nodeType": "YulTypedName",
                        "src": "371:7:34",
                        "type": ""
                      }
                    ],
                    "src": "334:126:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "511:51:34",
                      "nodeType": "YulBlock",
                      "src": "511:51:34",
                      "statements": [
                        {
                          "nativeSrc": "521:35:34",
                          "nodeType": "YulAssignment",
                          "src": "521:35:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "550:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "550:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint160",
                              "nativeSrc": "532:17:34",
                              "nodeType": "YulIdentifier",
                              "src": "532:17:34"
                            },
                            "nativeSrc": "532:24:34",
                            "nodeType": "YulFunctionCall",
                            "src": "532:24:34"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "521:7:34",
                              "nodeType": "YulIdentifier",
                              "src": "521:7:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_address",
                    "nativeSrc": "466:96:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "493:5:34",
                        "nodeType": "YulTypedName",
                        "src": "493:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "503:7:34",
                        "nodeType": "YulTypedName",
                        "src": "503:7:34",
                        "type": ""
                      }
                    ],
                    "src": "466:96:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "611:79:34",
                      "nodeType": "YulBlock",
                      "src": "611:79:34",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "668:16:34",
                            "nodeType": "YulBlock",
                            "src": "668:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "677:1:34",
                                      "nodeType": "YulLiteral",
                                      "src": "677:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "680:1:34",
                                      "nodeType": "YulLiteral",
                                      "src": "680:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "670:6:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "670:6:34"
                                  },
                                  "nativeSrc": "670:12:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "670:12:34"
                                },
                                "nativeSrc": "670:12:34",
                                "nodeType": "YulExpressionStatement",
                                "src": "670:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "634:5:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "634:5:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "659:5:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "659:5:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_address",
                                      "nativeSrc": "641:17:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "641:17:34"
                                    },
                                    "nativeSrc": "641:24:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "641:24:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "631:2:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "631:2:34"
                                },
                                "nativeSrc": "631:35:34",
                                "nodeType": "YulFunctionCall",
                                "src": "631:35:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "624:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "624:6:34"
                            },
                            "nativeSrc": "624:43:34",
                            "nodeType": "YulFunctionCall",
                            "src": "624:43:34"
                          },
                          "nativeSrc": "621:63:34",
                          "nodeType": "YulIf",
                          "src": "621:63:34"
                        }
                      ]
                    },
                    "name": "validator_revert_t_address",
                    "nativeSrc": "568:122:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "604:5:34",
                        "nodeType": "YulTypedName",
                        "src": "604:5:34",
                        "type": ""
                      }
                    ],
                    "src": "568:122:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "759:80:34",
                      "nodeType": "YulBlock",
                      "src": "759:80:34",
                      "statements": [
                        {
                          "nativeSrc": "769:22:34",
                          "nodeType": "YulAssignment",
                          "src": "769:22:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "784:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "784:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "778:5:34",
                              "nodeType": "YulIdentifier",
                              "src": "778:5:34"
                            },
                            "nativeSrc": "778:13:34",
                            "nodeType": "YulFunctionCall",
                            "src": "778:13:34"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "769:5:34",
                              "nodeType": "YulIdentifier",
                              "src": "769:5:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "827:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "827:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nativeSrc": "800:26:34",
                              "nodeType": "YulIdentifier",
                              "src": "800:26:34"
                            },
                            "nativeSrc": "800:33:34",
                            "nodeType": "YulFunctionCall",
                            "src": "800:33:34"
                          },
                          "nativeSrc": "800:33:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "800:33:34"
                        }
                      ]
                    },
                    "name": "abi_decode_t_address_fromMemory",
                    "nativeSrc": "696:143:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "737:6:34",
                        "nodeType": "YulTypedName",
                        "src": "737:6:34",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "745:3:34",
                        "nodeType": "YulTypedName",
                        "src": "745:3:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "753:5:34",
                        "nodeType": "YulTypedName",
                        "src": "753:5:34",
                        "type": ""
                      }
                    ],
                    "src": "696:143:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "922:274:34",
                      "nodeType": "YulBlock",
                      "src": "922:274:34",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "968:83:34",
                            "nodeType": "YulBlock",
                            "src": "968:83:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "970:77:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "970:77:34"
                                  },
                                  "nativeSrc": "970:79:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "970:79:34"
                                },
                                "nativeSrc": "970:79:34",
                                "nodeType": "YulExpressionStatement",
                                "src": "970:79:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "943:7:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "943:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "952:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "952:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "939:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "939:3:34"
                                },
                                "nativeSrc": "939:23:34",
                                "nodeType": "YulFunctionCall",
                                "src": "939:23:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "964:2:34",
                                "nodeType": "YulLiteral",
                                "src": "964:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "935:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "935:3:34"
                            },
                            "nativeSrc": "935:32:34",
                            "nodeType": "YulFunctionCall",
                            "src": "935:32:34"
                          },
                          "nativeSrc": "932:119:34",
                          "nodeType": "YulIf",
                          "src": "932:119:34"
                        },
                        {
                          "nativeSrc": "1061:128:34",
                          "nodeType": "YulBlock",
                          "src": "1061:128:34",
                          "statements": [
                            {
                              "nativeSrc": "1076:15:34",
                              "nodeType": "YulVariableDeclaration",
                              "src": "1076:15:34",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "1090:1:34",
                                "nodeType": "YulLiteral",
                                "src": "1090:1:34",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "1080:6:34",
                                  "nodeType": "YulTypedName",
                                  "src": "1080:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "1105:74:34",
                              "nodeType": "YulAssignment",
                              "src": "1105:74:34",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "1151:9:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "1151:9:34"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "1162:6:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "1162:6:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1147:3:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "1147:3:34"
                                    },
                                    "nativeSrc": "1147:22:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1147:22:34"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "1171:7:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "1171:7:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address_fromMemory",
                                  "nativeSrc": "1115:31:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "1115:31:34"
                                },
                                "nativeSrc": "1115:64:34",
                                "nodeType": "YulFunctionCall",
                                "src": "1115:64:34"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "1105:6:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "1105:6:34"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nativeSrc": "845:351:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "892:9:34",
                        "nodeType": "YulTypedName",
                        "src": "892:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "903:7:34",
                        "nodeType": "YulTypedName",
                        "src": "903:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "915:6:34",
                        "nodeType": "YulTypedName",
                        "src": "915:6:34",
                        "type": ""
                      }
                    ],
                    "src": "845:351:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "1261:40:34",
                      "nodeType": "YulBlock",
                      "src": "1261:40:34",
                      "statements": [
                        {
                          "nativeSrc": "1272:22:34",
                          "nodeType": "YulAssignment",
                          "src": "1272:22:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "1288:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "1288:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "1282:5:34",
                              "nodeType": "YulIdentifier",
                              "src": "1282:5:34"
                            },
                            "nativeSrc": "1282:12:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1282:12:34"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nativeSrc": "1272:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "1272:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_string_memory_ptr",
                    "nativeSrc": "1202:99:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "1244:5:34",
                        "nodeType": "YulTypedName",
                        "src": "1244:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nativeSrc": "1254:6:34",
                        "nodeType": "YulTypedName",
                        "src": "1254:6:34",
                        "type": ""
                      }
                    ],
                    "src": "1202:99:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "1335:152:34",
                      "nodeType": "YulBlock",
                      "src": "1335:152:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "1352:1:34",
                                "nodeType": "YulLiteral",
                                "src": "1352:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1355:77:34",
                                "nodeType": "YulLiteral",
                                "src": "1355:77:34",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1345:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "1345:6:34"
                            },
                            "nativeSrc": "1345:88:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1345:88:34"
                          },
                          "nativeSrc": "1345:88:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "1345:88:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "1449:1:34",
                                "nodeType": "YulLiteral",
                                "src": "1449:1:34",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1452:4:34",
                                "nodeType": "YulLiteral",
                                "src": "1452:4:34",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1442:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "1442:6:34"
                            },
                            "nativeSrc": "1442:15:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1442:15:34"
                          },
                          "nativeSrc": "1442:15:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "1442:15:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "1473:1:34",
                                "nodeType": "YulLiteral",
                                "src": "1473:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1476:4:34",
                                "nodeType": "YulLiteral",
                                "src": "1476:4:34",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "1466:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "1466:6:34"
                            },
                            "nativeSrc": "1466:15:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1466:15:34"
                          },
                          "nativeSrc": "1466:15:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "1466:15:34"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nativeSrc": "1307:180:34",
                    "nodeType": "YulFunctionDefinition",
                    "src": "1307:180:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "1521:152:34",
                      "nodeType": "YulBlock",
                      "src": "1521:152:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "1538:1:34",
                                "nodeType": "YulLiteral",
                                "src": "1538:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1541:77:34",
                                "nodeType": "YulLiteral",
                                "src": "1541:77:34",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1531:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "1531:6:34"
                            },
                            "nativeSrc": "1531:88:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1531:88:34"
                          },
                          "nativeSrc": "1531:88:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "1531:88:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "1635:1:34",
                                "nodeType": "YulLiteral",
                                "src": "1635:1:34",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1638:4:34",
                                "nodeType": "YulLiteral",
                                "src": "1638:4:34",
                                "type": "",
                                "value": "0x22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1628:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "1628:6:34"
                            },
                            "nativeSrc": "1628:15:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1628:15:34"
                          },
                          "nativeSrc": "1628:15:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "1628:15:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "1659:1:34",
                                "nodeType": "YulLiteral",
                                "src": "1659:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1662:4:34",
                                "nodeType": "YulLiteral",
                                "src": "1662:4:34",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "1652:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "1652:6:34"
                            },
                            "nativeSrc": "1652:15:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1652:15:34"
                          },
                          "nativeSrc": "1652:15:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "1652:15:34"
                        }
                      ]
                    },
                    "name": "panic_error_0x22",
                    "nativeSrc": "1493:180:34",
                    "nodeType": "YulFunctionDefinition",
                    "src": "1493:180:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "1730:269:34",
                      "nodeType": "YulBlock",
                      "src": "1730:269:34",
                      "statements": [
                        {
                          "nativeSrc": "1740:22:34",
                          "nodeType": "YulAssignment",
                          "src": "1740:22:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "1754:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "1754:4:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1760:1:34",
                                "nodeType": "YulLiteral",
                                "src": "1760:1:34",
                                "type": "",
                                "value": "2"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nativeSrc": "1750:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "1750:3:34"
                            },
                            "nativeSrc": "1750:12:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1750:12:34"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nativeSrc": "1740:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "1740:6:34"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1771:38:34",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1771:38:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "1801:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "1801:4:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1807:1:34",
                                "nodeType": "YulLiteral",
                                "src": "1807:1:34",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "1797:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "1797:3:34"
                            },
                            "nativeSrc": "1797:12:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1797:12:34"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nativeSrc": "1775:18:34",
                              "nodeType": "YulTypedName",
                              "src": "1775:18:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "1848:51:34",
                            "nodeType": "YulBlock",
                            "src": "1848:51:34",
                            "statements": [
                              {
                                "nativeSrc": "1862:27:34",
                                "nodeType": "YulAssignment",
                                "src": "1862:27:34",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nativeSrc": "1876:6:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "1876:6:34"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1884:4:34",
                                      "nodeType": "YulLiteral",
                                      "src": "1884:4:34",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "1872:3:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "1872:3:34"
                                  },
                                  "nativeSrc": "1872:17:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1872:17:34"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "1862:6:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "1862:6:34"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "1828:18:34",
                                "nodeType": "YulIdentifier",
                                "src": "1828:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "1821:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "1821:6:34"
                            },
                            "nativeSrc": "1821:26:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1821:26:34"
                          },
                          "nativeSrc": "1818:81:34",
                          "nodeType": "YulIf",
                          "src": "1818:81:34"
                        },
                        {
                          "body": {
                            "nativeSrc": "1951:42:34",
                            "nodeType": "YulBlock",
                            "src": "1951:42:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x22",
                                    "nativeSrc": "1965:16:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "1965:16:34"
                                  },
                                  "nativeSrc": "1965:18:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1965:18:34"
                                },
                                "nativeSrc": "1965:18:34",
                                "nodeType": "YulExpressionStatement",
                                "src": "1965:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "1915:18:34",
                                "nodeType": "YulIdentifier",
                                "src": "1915:18:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "1938:6:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "1938:6:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1946:2:34",
                                    "nodeType": "YulLiteral",
                                    "src": "1946:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "1935:2:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "1935:2:34"
                                },
                                "nativeSrc": "1935:14:34",
                                "nodeType": "YulFunctionCall",
                                "src": "1935:14:34"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nativeSrc": "1912:2:34",
                              "nodeType": "YulIdentifier",
                              "src": "1912:2:34"
                            },
                            "nativeSrc": "1912:38:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1912:38:34"
                          },
                          "nativeSrc": "1909:84:34",
                          "nodeType": "YulIf",
                          "src": "1909:84:34"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nativeSrc": "1679:320:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nativeSrc": "1714:4:34",
                        "nodeType": "YulTypedName",
                        "src": "1714:4:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nativeSrc": "1723:6:34",
                        "nodeType": "YulTypedName",
                        "src": "1723:6:34",
                        "type": ""
                      }
                    ],
                    "src": "1679:320:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "2059:87:34",
                      "nodeType": "YulBlock",
                      "src": "2059:87:34",
                      "statements": [
                        {
                          "nativeSrc": "2069:11:34",
                          "nodeType": "YulAssignment",
                          "src": "2069:11:34",
                          "value": {
                            "name": "ptr",
                            "nativeSrc": "2077:3:34",
                            "nodeType": "YulIdentifier",
                            "src": "2077:3:34"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nativeSrc": "2069:4:34",
                              "nodeType": "YulIdentifier",
                              "src": "2069:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "2097:1:34",
                                "nodeType": "YulLiteral",
                                "src": "2097:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nativeSrc": "2100:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "2100:3:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2090:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "2090:6:34"
                            },
                            "nativeSrc": "2090:14:34",
                            "nodeType": "YulFunctionCall",
                            "src": "2090:14:34"
                          },
                          "nativeSrc": "2090:14:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "2090:14:34"
                        },
                        {
                          "nativeSrc": "2113:26:34",
                          "nodeType": "YulAssignment",
                          "src": "2113:26:34",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "2131:1:34",
                                "nodeType": "YulLiteral",
                                "src": "2131:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2134:4:34",
                                "nodeType": "YulLiteral",
                                "src": "2134:4:34",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nativeSrc": "2121:9:34",
                              "nodeType": "YulIdentifier",
                              "src": "2121:9:34"
                            },
                            "nativeSrc": "2121:18:34",
                            "nodeType": "YulFunctionCall",
                            "src": "2121:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nativeSrc": "2113:4:34",
                              "nodeType": "YulIdentifier",
                              "src": "2113:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_t_string_storage",
                    "nativeSrc": "2005:141:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nativeSrc": "2046:3:34",
                        "nodeType": "YulTypedName",
                        "src": "2046:3:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nativeSrc": "2054:4:34",
                        "nodeType": "YulTypedName",
                        "src": "2054:4:34",
                        "type": ""
                      }
                    ],
                    "src": "2005:141:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "2196:49:34",
                      "nodeType": "YulBlock",
                      "src": "2196:49:34",
                      "statements": [
                        {
                          "nativeSrc": "2206:33:34",
                          "nodeType": "YulAssignment",
                          "src": "2206:33:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "2224:5:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "2224:5:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2231:2:34",
                                    "nodeType": "YulLiteral",
                                    "src": "2231:2:34",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2220:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "2220:3:34"
                                },
                                "nativeSrc": "2220:14:34",
                                "nodeType": "YulFunctionCall",
                                "src": "2220:14:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2236:2:34",
                                "nodeType": "YulLiteral",
                                "src": "2236:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nativeSrc": "2216:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "2216:3:34"
                            },
                            "nativeSrc": "2216:23:34",
                            "nodeType": "YulFunctionCall",
                            "src": "2216:23:34"
                          },
                          "variableNames": [
                            {
                              "name": "result",
                              "nativeSrc": "2206:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "2206:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "divide_by_32_ceil",
                    "nativeSrc": "2152:93:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "2179:5:34",
                        "nodeType": "YulTypedName",
                        "src": "2179:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "result",
                        "nativeSrc": "2189:6:34",
                        "nodeType": "YulTypedName",
                        "src": "2189:6:34",
                        "type": ""
                      }
                    ],
                    "src": "2152:93:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "2304:54:34",
                      "nodeType": "YulBlock",
                      "src": "2304:54:34",
                      "statements": [
                        {
                          "nativeSrc": "2314:37:34",
                          "nodeType": "YulAssignment",
                          "src": "2314:37:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "bits",
                                "nativeSrc": "2339:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "2339:4:34"
                              },
                              {
                                "name": "value",
                                "nativeSrc": "2345:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "2345:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nativeSrc": "2335:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "2335:3:34"
                            },
                            "nativeSrc": "2335:16:34",
                            "nodeType": "YulFunctionCall",
                            "src": "2335:16:34"
                          },
                          "variableNames": [
                            {
                              "name": "newValue",
                              "nativeSrc": "2314:8:34",
                              "nodeType": "YulIdentifier",
                              "src": "2314:8:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "shift_left_dynamic",
                    "nativeSrc": "2251:107:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "bits",
                        "nativeSrc": "2279:4:34",
                        "nodeType": "YulTypedName",
                        "src": "2279:4:34",
                        "type": ""
                      },
                      {
                        "name": "value",
                        "nativeSrc": "2285:5:34",
                        "nodeType": "YulTypedName",
                        "src": "2285:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "newValue",
                        "nativeSrc": "2295:8:34",
                        "nodeType": "YulTypedName",
                        "src": "2295:8:34",
                        "type": ""
                      }
                    ],
                    "src": "2251:107:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "2440:317:34",
                      "nodeType": "YulBlock",
                      "src": "2440:317:34",
                      "statements": [
                        {
                          "nativeSrc": "2450:35:34",
                          "nodeType": "YulVariableDeclaration",
                          "src": "2450:35:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "shiftBytes",
                                "nativeSrc": "2471:10:34",
                                "nodeType": "YulIdentifier",
                                "src": "2471:10:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2483:1:34",
                                "nodeType": "YulLiteral",
                                "src": "2483:1:34",
                                "type": "",
                                "value": "8"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nativeSrc": "2467:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "2467:3:34"
                            },
                            "nativeSrc": "2467:18:34",
                            "nodeType": "YulFunctionCall",
                            "src": "2467:18:34"
                          },
                          "variables": [
                            {
                              "name": "shiftBits",
                              "nativeSrc": "2454:9:34",
                              "nodeType": "YulTypedName",
                              "src": "2454:9:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "2494:109:34",
                          "nodeType": "YulVariableDeclaration",
                          "src": "2494:109:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "shiftBits",
                                "nativeSrc": "2525:9:34",
                                "nodeType": "YulIdentifier",
                                "src": "2525:9:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2536:66:34",
                                "nodeType": "YulLiteral",
                                "src": "2536:66:34",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "shift_left_dynamic",
                              "nativeSrc": "2506:18:34",
                              "nodeType": "YulIdentifier",
                              "src": "2506:18:34"
                            },
                            "nativeSrc": "2506:97:34",
                            "nodeType": "YulFunctionCall",
                            "src": "2506:97:34"
                          },
                          "variables": [
                            {
                              "name": "mask",
                              "nativeSrc": "2498:4:34",
                              "nodeType": "YulTypedName",
                              "src": "2498:4:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "2612:51:34",
                          "nodeType": "YulAssignment",
                          "src": "2612:51:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "shiftBits",
                                "nativeSrc": "2643:9:34",
                                "nodeType": "YulIdentifier",
                                "src": "2643:9:34"
                              },
                              {
                                "name": "toInsert",
                                "nativeSrc": "2654:8:34",
                                "nodeType": "YulIdentifier",
                                "src": "2654:8:34"
                              }
                            ],
                            "functionName": {
                              "name": "shift_left_dynamic",
                              "nativeSrc": "2624:18:34",
                              "nodeType": "YulIdentifier",
                              "src": "2624:18:34"
                            },
                            "nativeSrc": "2624:39:34",
                            "nodeType": "YulFunctionCall",
                            "src": "2624:39:34"
                          },
                          "variableNames": [
                            {
                              "name": "toInsert",
                              "nativeSrc": "2612:8:34",
                              "nodeType": "YulIdentifier",
                              "src": "2612:8:34"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "2672:30:34",
                          "nodeType": "YulAssignment",
                          "src": "2672:30:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "2685:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "2685:5:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "mask",
                                    "nativeSrc": "2696:4:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "2696:4:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nativeSrc": "2692:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "2692:3:34"
                                },
                                "nativeSrc": "2692:9:34",
                                "nodeType": "YulFunctionCall",
                                "src": "2692:9:34"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "2681:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "2681:3:34"
                            },
                            "nativeSrc": "2681:21:34",
                            "nodeType": "YulFunctionCall",
                            "src": "2681:21:34"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "2672:5:34",
                              "nodeType": "YulIdentifier",
                              "src": "2672:5:34"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "2711:40:34",
                          "nodeType": "YulAssignment",
                          "src": "2711:40:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "2724:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "2724:5:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "toInsert",
                                    "nativeSrc": "2735:8:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "2735:8:34"
                                  },
                                  {
                                    "name": "mask",
                                    "nativeSrc": "2745:4:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "2745:4:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "2731:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "2731:3:34"
                                },
                                "nativeSrc": "2731:19:34",
                                "nodeType": "YulFunctionCall",
                                "src": "2731:19:34"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nativeSrc": "2721:2:34",
                              "nodeType": "YulIdentifier",
                              "src": "2721:2:34"
                            },
                            "nativeSrc": "2721:30:34",
                            "nodeType": "YulFunctionCall",
                            "src": "2721:30:34"
                          },
                          "variableNames": [
                            {
                              "name": "result",
                              "nativeSrc": "2711:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "2711:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "update_byte_slice_dynamic32",
                    "nativeSrc": "2364:393:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "2401:5:34",
                        "nodeType": "YulTypedName",
                        "src": "2401:5:34",
                        "type": ""
                      },
                      {
                        "name": "shiftBytes",
                        "nativeSrc": "2408:10:34",
                        "nodeType": "YulTypedName",
                        "src": "2408:10:34",
                        "type": ""
                      },
                      {
                        "name": "toInsert",
                        "nativeSrc": "2420:8:34",
                        "nodeType": "YulTypedName",
                        "src": "2420:8:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "result",
                        "nativeSrc": "2433:6:34",
                        "nodeType": "YulTypedName",
                        "src": "2433:6:34",
                        "type": ""
                      }
                    ],
                    "src": "2364:393:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "2808:32:34",
                      "nodeType": "YulBlock",
                      "src": "2808:32:34",
                      "statements": [
                        {
                          "nativeSrc": "2818:16:34",
                          "nodeType": "YulAssignment",
                          "src": "2818:16:34",
                          "value": {
                            "name": "value",
                            "nativeSrc": "2829:5:34",
                            "nodeType": "YulIdentifier",
                            "src": "2829:5:34"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "2818:7:34",
                              "nodeType": "YulIdentifier",
                              "src": "2818:7:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint256",
                    "nativeSrc": "2763:77:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "2790:5:34",
                        "nodeType": "YulTypedName",
                        "src": "2790:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "2800:7:34",
                        "nodeType": "YulTypedName",
                        "src": "2800:7:34",
                        "type": ""
                      }
                    ],
                    "src": "2763:77:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "2878:28:34",
                      "nodeType": "YulBlock",
                      "src": "2878:28:34",
                      "statements": [
                        {
                          "nativeSrc": "2888:12:34",
                          "nodeType": "YulAssignment",
                          "src": "2888:12:34",
                          "value": {
                            "name": "value",
                            "nativeSrc": "2895:5:34",
                            "nodeType": "YulIdentifier",
                            "src": "2895:5:34"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nativeSrc": "2888:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "2888:3:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "identity",
                    "nativeSrc": "2846:60:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "2864:5:34",
                        "nodeType": "YulTypedName",
                        "src": "2864:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nativeSrc": "2874:3:34",
                        "nodeType": "YulTypedName",
                        "src": "2874:3:34",
                        "type": ""
                      }
                    ],
                    "src": "2846:60:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "2972:82:34",
                      "nodeType": "YulBlock",
                      "src": "2972:82:34",
                      "statements": [
                        {
                          "nativeSrc": "2982:66:34",
                          "nodeType": "YulAssignment",
                          "src": "2982:66:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "3040:5:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "3040:5:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint256",
                                      "nativeSrc": "3022:17:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "3022:17:34"
                                    },
                                    "nativeSrc": "3022:24:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3022:24:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "identity",
                                  "nativeSrc": "3013:8:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "3013:8:34"
                                },
                                "nativeSrc": "3013:34:34",
                                "nodeType": "YulFunctionCall",
                                "src": "3013:34:34"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nativeSrc": "2995:17:34",
                              "nodeType": "YulIdentifier",
                              "src": "2995:17:34"
                            },
                            "nativeSrc": "2995:53:34",
                            "nodeType": "YulFunctionCall",
                            "src": "2995:53:34"
                          },
                          "variableNames": [
                            {
                              "name": "converted",
                              "nativeSrc": "2982:9:34",
                              "nodeType": "YulIdentifier",
                              "src": "2982:9:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "convert_t_uint256_to_t_uint256",
                    "nativeSrc": "2912:142:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "2952:5:34",
                        "nodeType": "YulTypedName",
                        "src": "2952:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "converted",
                        "nativeSrc": "2962:9:34",
                        "nodeType": "YulTypedName",
                        "src": "2962:9:34",
                        "type": ""
                      }
                    ],
                    "src": "2912:142:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "3107:28:34",
                      "nodeType": "YulBlock",
                      "src": "3107:28:34",
                      "statements": [
                        {
                          "nativeSrc": "3117:12:34",
                          "nodeType": "YulAssignment",
                          "src": "3117:12:34",
                          "value": {
                            "name": "value",
                            "nativeSrc": "3124:5:34",
                            "nodeType": "YulIdentifier",
                            "src": "3124:5:34"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nativeSrc": "3117:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "3117:3:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "prepare_store_t_uint256",
                    "nativeSrc": "3060:75:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "3093:5:34",
                        "nodeType": "YulTypedName",
                        "src": "3093:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nativeSrc": "3103:3:34",
                        "nodeType": "YulTypedName",
                        "src": "3103:3:34",
                        "type": ""
                      }
                    ],
                    "src": "3060:75:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "3217:193:34",
                      "nodeType": "YulBlock",
                      "src": "3217:193:34",
                      "statements": [
                        {
                          "nativeSrc": "3227:63:34",
                          "nodeType": "YulVariableDeclaration",
                          "src": "3227:63:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value_0",
                                "nativeSrc": "3282:7:34",
                                "nodeType": "YulIdentifier",
                                "src": "3282:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "convert_t_uint256_to_t_uint256",
                              "nativeSrc": "3251:30:34",
                              "nodeType": "YulIdentifier",
                              "src": "3251:30:34"
                            },
                            "nativeSrc": "3251:39:34",
                            "nodeType": "YulFunctionCall",
                            "src": "3251:39:34"
                          },
                          "variables": [
                            {
                              "name": "convertedValue_0",
                              "nativeSrc": "3231:16:34",
                              "nodeType": "YulTypedName",
                              "src": "3231:16:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nativeSrc": "3306:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "3306:4:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "slot",
                                        "nativeSrc": "3346:4:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "3346:4:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sload",
                                      "nativeSrc": "3340:5:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "3340:5:34"
                                    },
                                    "nativeSrc": "3340:11:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3340:11:34"
                                  },
                                  {
                                    "name": "offset",
                                    "nativeSrc": "3353:6:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "3353:6:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "convertedValue_0",
                                        "nativeSrc": "3385:16:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "3385:16:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "prepare_store_t_uint256",
                                      "nativeSrc": "3361:23:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "3361:23:34"
                                    },
                                    "nativeSrc": "3361:41:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3361:41:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "update_byte_slice_dynamic32",
                                  "nativeSrc": "3312:27:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "3312:27:34"
                                },
                                "nativeSrc": "3312:91:34",
                                "nodeType": "YulFunctionCall",
                                "src": "3312:91:34"
                              }
                            ],
                            "functionName": {
                              "name": "sstore",
                              "nativeSrc": "3299:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "3299:6:34"
                            },
                            "nativeSrc": "3299:105:34",
                            "nodeType": "YulFunctionCall",
                            "src": "3299:105:34"
                          },
                          "nativeSrc": "3299:105:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "3299:105:34"
                        }
                      ]
                    },
                    "name": "update_storage_value_t_uint256_to_t_uint256",
                    "nativeSrc": "3141:269:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nativeSrc": "3194:4:34",
                        "nodeType": "YulTypedName",
                        "src": "3194:4:34",
                        "type": ""
                      },
                      {
                        "name": "offset",
                        "nativeSrc": "3200:6:34",
                        "nodeType": "YulTypedName",
                        "src": "3200:6:34",
                        "type": ""
                      },
                      {
                        "name": "value_0",
                        "nativeSrc": "3208:7:34",
                        "nodeType": "YulTypedName",
                        "src": "3208:7:34",
                        "type": ""
                      }
                    ],
                    "src": "3141:269:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "3465:24:34",
                      "nodeType": "YulBlock",
                      "src": "3465:24:34",
                      "statements": [
                        {
                          "nativeSrc": "3475:8:34",
                          "nodeType": "YulAssignment",
                          "src": "3475:8:34",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "3482:1:34",
                            "nodeType": "YulLiteral",
                            "src": "3482:1:34",
                            "type": "",
                            "value": "0"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nativeSrc": "3475:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "3475:3:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "zero_value_for_split_t_uint256",
                    "nativeSrc": "3416:73:34",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nativeSrc": "3461:3:34",
                        "nodeType": "YulTypedName",
                        "src": "3461:3:34",
                        "type": ""
                      }
                    ],
                    "src": "3416:73:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "3548:136:34",
                      "nodeType": "YulBlock",
                      "src": "3548:136:34",
                      "statements": [
                        {
                          "nativeSrc": "3558:46:34",
                          "nodeType": "YulVariableDeclaration",
                          "src": "3558:46:34",
                          "value": {
                            "arguments": [],
                            "functionName": {
                              "name": "zero_value_for_split_t_uint256",
                              "nativeSrc": "3572:30:34",
                              "nodeType": "YulIdentifier",
                              "src": "3572:30:34"
                            },
                            "nativeSrc": "3572:32:34",
                            "nodeType": "YulFunctionCall",
                            "src": "3572:32:34"
                          },
                          "variables": [
                            {
                              "name": "zero_0",
                              "nativeSrc": "3562:6:34",
                              "nodeType": "YulTypedName",
                              "src": "3562:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nativeSrc": "3657:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "3657:4:34"
                              },
                              {
                                "name": "offset",
                                "nativeSrc": "3663:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "3663:6:34"
                              },
                              {
                                "name": "zero_0",
                                "nativeSrc": "3671:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "3671:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "update_storage_value_t_uint256_to_t_uint256",
                              "nativeSrc": "3613:43:34",
                              "nodeType": "YulIdentifier",
                              "src": "3613:43:34"
                            },
                            "nativeSrc": "3613:65:34",
                            "nodeType": "YulFunctionCall",
                            "src": "3613:65:34"
                          },
                          "nativeSrc": "3613:65:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "3613:65:34"
                        }
                      ]
                    },
                    "name": "storage_set_to_zero_t_uint256",
                    "nativeSrc": "3495:189:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nativeSrc": "3534:4:34",
                        "nodeType": "YulTypedName",
                        "src": "3534:4:34",
                        "type": ""
                      },
                      {
                        "name": "offset",
                        "nativeSrc": "3540:6:34",
                        "nodeType": "YulTypedName",
                        "src": "3540:6:34",
                        "type": ""
                      }
                    ],
                    "src": "3495:189:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "3740:136:34",
                      "nodeType": "YulBlock",
                      "src": "3740:136:34",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "3807:63:34",
                            "nodeType": "YulBlock",
                            "src": "3807:63:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "start",
                                      "nativeSrc": "3851:5:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "3851:5:34"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3858:1:34",
                                      "nodeType": "YulLiteral",
                                      "src": "3858:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "storage_set_to_zero_t_uint256",
                                    "nativeSrc": "3821:29:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "3821:29:34"
                                  },
                                  "nativeSrc": "3821:39:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3821:39:34"
                                },
                                "nativeSrc": "3821:39:34",
                                "nodeType": "YulExpressionStatement",
                                "src": "3821:39:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "start",
                                "nativeSrc": "3760:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "3760:5:34"
                              },
                              {
                                "name": "end",
                                "nativeSrc": "3767:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "3767:3:34"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nativeSrc": "3757:2:34",
                              "nodeType": "YulIdentifier",
                              "src": "3757:2:34"
                            },
                            "nativeSrc": "3757:14:34",
                            "nodeType": "YulFunctionCall",
                            "src": "3757:14:34"
                          },
                          "nativeSrc": "3750:120:34",
                          "nodeType": "YulForLoop",
                          "post": {
                            "nativeSrc": "3772:26:34",
                            "nodeType": "YulBlock",
                            "src": "3772:26:34",
                            "statements": [
                              {
                                "nativeSrc": "3774:22:34",
                                "nodeType": "YulAssignment",
                                "src": "3774:22:34",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "start",
                                      "nativeSrc": "3787:5:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "3787:5:34"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3794:1:34",
                                      "nodeType": "YulLiteral",
                                      "src": "3794:1:34",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "3783:3:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "3783:3:34"
                                  },
                                  "nativeSrc": "3783:13:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3783:13:34"
                                },
                                "variableNames": [
                                  {
                                    "name": "start",
                                    "nativeSrc": "3774:5:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "3774:5:34"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nativeSrc": "3754:2:34",
                            "nodeType": "YulBlock",
                            "src": "3754:2:34",
                            "statements": []
                          },
                          "src": "3750:120:34"
                        }
                      ]
                    },
                    "name": "clear_storage_range_t_bytes1",
                    "nativeSrc": "3690:186:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "start",
                        "nativeSrc": "3728:5:34",
                        "nodeType": "YulTypedName",
                        "src": "3728:5:34",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "3735:3:34",
                        "nodeType": "YulTypedName",
                        "src": "3735:3:34",
                        "type": ""
                      }
                    ],
                    "src": "3690:186:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "3961:464:34",
                      "nodeType": "YulBlock",
                      "src": "3961:464:34",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "3987:431:34",
                            "nodeType": "YulBlock",
                            "src": "3987:431:34",
                            "statements": [
                              {
                                "nativeSrc": "4001:54:34",
                                "nodeType": "YulVariableDeclaration",
                                "src": "4001:54:34",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nativeSrc": "4049:5:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "4049:5:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "array_dataslot_t_string_storage",
                                    "nativeSrc": "4017:31:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "4017:31:34"
                                  },
                                  "nativeSrc": "4017:38:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4017:38:34"
                                },
                                "variables": [
                                  {
                                    "name": "dataArea",
                                    "nativeSrc": "4005:8:34",
                                    "nodeType": "YulTypedName",
                                    "src": "4005:8:34",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "4068:63:34",
                                "nodeType": "YulVariableDeclaration",
                                "src": "4068:63:34",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dataArea",
                                      "nativeSrc": "4091:8:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "4091:8:34"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "startIndex",
                                          "nativeSrc": "4119:10:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "4119:10:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "divide_by_32_ceil",
                                        "nativeSrc": "4101:17:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "4101:17:34"
                                      },
                                      "nativeSrc": "4101:29:34",
                                      "nodeType": "YulFunctionCall",
                                      "src": "4101:29:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "4087:3:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "4087:3:34"
                                  },
                                  "nativeSrc": "4087:44:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4087:44:34"
                                },
                                "variables": [
                                  {
                                    "name": "deleteStart",
                                    "nativeSrc": "4072:11:34",
                                    "nodeType": "YulTypedName",
                                    "src": "4072:11:34",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nativeSrc": "4288:27:34",
                                  "nodeType": "YulBlock",
                                  "src": "4288:27:34",
                                  "statements": [
                                    {
                                      "nativeSrc": "4290:23:34",
                                      "nodeType": "YulAssignment",
                                      "src": "4290:23:34",
                                      "value": {
                                        "name": "dataArea",
                                        "nativeSrc": "4305:8:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "4305:8:34"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "deleteStart",
                                          "nativeSrc": "4290:11:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "4290:11:34"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "startIndex",
                                      "nativeSrc": "4272:10:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "4272:10:34"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4284:2:34",
                                      "nodeType": "YulLiteral",
                                      "src": "4284:2:34",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nativeSrc": "4269:2:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "4269:2:34"
                                  },
                                  "nativeSrc": "4269:18:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4269:18:34"
                                },
                                "nativeSrc": "4266:49:34",
                                "nodeType": "YulIf",
                                "src": "4266:49:34"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "deleteStart",
                                      "nativeSrc": "4357:11:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "4357:11:34"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "dataArea",
                                          "nativeSrc": "4374:8:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "4374:8:34"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "len",
                                              "nativeSrc": "4402:3:34",
                                              "nodeType": "YulIdentifier",
                                              "src": "4402:3:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "divide_by_32_ceil",
                                            "nativeSrc": "4384:17:34",
                                            "nodeType": "YulIdentifier",
                                            "src": "4384:17:34"
                                          },
                                          "nativeSrc": "4384:22:34",
                                          "nodeType": "YulFunctionCall",
                                          "src": "4384:22:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "4370:3:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "4370:3:34"
                                      },
                                      "nativeSrc": "4370:37:34",
                                      "nodeType": "YulFunctionCall",
                                      "src": "4370:37:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "clear_storage_range_t_bytes1",
                                    "nativeSrc": "4328:28:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "4328:28:34"
                                  },
                                  "nativeSrc": "4328:80:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4328:80:34"
                                },
                                "nativeSrc": "4328:80:34",
                                "nodeType": "YulExpressionStatement",
                                "src": "4328:80:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "len",
                                "nativeSrc": "3978:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "3978:3:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3983:2:34",
                                "nodeType": "YulLiteral",
                                "src": "3983:2:34",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "3975:2:34",
                              "nodeType": "YulIdentifier",
                              "src": "3975:2:34"
                            },
                            "nativeSrc": "3975:11:34",
                            "nodeType": "YulFunctionCall",
                            "src": "3975:11:34"
                          },
                          "nativeSrc": "3972:446:34",
                          "nodeType": "YulIf",
                          "src": "3972:446:34"
                        }
                      ]
                    },
                    "name": "clean_up_bytearray_end_slots_t_string_storage",
                    "nativeSrc": "3882:543:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nativeSrc": "3937:5:34",
                        "nodeType": "YulTypedName",
                        "src": "3937:5:34",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nativeSrc": "3944:3:34",
                        "nodeType": "YulTypedName",
                        "src": "3944:3:34",
                        "type": ""
                      },
                      {
                        "name": "startIndex",
                        "nativeSrc": "3949:10:34",
                        "nodeType": "YulTypedName",
                        "src": "3949:10:34",
                        "type": ""
                      }
                    ],
                    "src": "3882:543:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "4494:54:34",
                      "nodeType": "YulBlock",
                      "src": "4494:54:34",
                      "statements": [
                        {
                          "nativeSrc": "4504:37:34",
                          "nodeType": "YulAssignment",
                          "src": "4504:37:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "bits",
                                "nativeSrc": "4529:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "4529:4:34"
                              },
                              {
                                "name": "value",
                                "nativeSrc": "4535:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "4535:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nativeSrc": "4525:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "4525:3:34"
                            },
                            "nativeSrc": "4525:16:34",
                            "nodeType": "YulFunctionCall",
                            "src": "4525:16:34"
                          },
                          "variableNames": [
                            {
                              "name": "newValue",
                              "nativeSrc": "4504:8:34",
                              "nodeType": "YulIdentifier",
                              "src": "4504:8:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "shift_right_unsigned_dynamic",
                    "nativeSrc": "4431:117:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "bits",
                        "nativeSrc": "4469:4:34",
                        "nodeType": "YulTypedName",
                        "src": "4469:4:34",
                        "type": ""
                      },
                      {
                        "name": "value",
                        "nativeSrc": "4475:5:34",
                        "nodeType": "YulTypedName",
                        "src": "4475:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "newValue",
                        "nativeSrc": "4485:8:34",
                        "nodeType": "YulTypedName",
                        "src": "4485:8:34",
                        "type": ""
                      }
                    ],
                    "src": "4431:117:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "4605:118:34",
                      "nodeType": "YulBlock",
                      "src": "4605:118:34",
                      "statements": [
                        {
                          "nativeSrc": "4615:68:34",
                          "nodeType": "YulVariableDeclaration",
                          "src": "4615:68:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "4664:1:34",
                                        "nodeType": "YulLiteral",
                                        "src": "4664:1:34",
                                        "type": "",
                                        "value": "8"
                                      },
                                      {
                                        "name": "bytes",
                                        "nativeSrc": "4667:5:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "4667:5:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mul",
                                      "nativeSrc": "4660:3:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "4660:3:34"
                                    },
                                    "nativeSrc": "4660:13:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4660:13:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "4679:1:34",
                                        "nodeType": "YulLiteral",
                                        "src": "4679:1:34",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nativeSrc": "4675:3:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "4675:3:34"
                                    },
                                    "nativeSrc": "4675:6:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4675:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "shift_right_unsigned_dynamic",
                                  "nativeSrc": "4631:28:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "4631:28:34"
                                },
                                "nativeSrc": "4631:51:34",
                                "nodeType": "YulFunctionCall",
                                "src": "4631:51:34"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nativeSrc": "4627:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "4627:3:34"
                            },
                            "nativeSrc": "4627:56:34",
                            "nodeType": "YulFunctionCall",
                            "src": "4627:56:34"
                          },
                          "variables": [
                            {
                              "name": "mask",
                              "nativeSrc": "4619:4:34",
                              "nodeType": "YulTypedName",
                              "src": "4619:4:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "4692:25:34",
                          "nodeType": "YulAssignment",
                          "src": "4692:25:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "4706:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "4706:4:34"
                              },
                              {
                                "name": "mask",
                                "nativeSrc": "4712:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "4712:4:34"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "4702:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "4702:3:34"
                            },
                            "nativeSrc": "4702:15:34",
                            "nodeType": "YulFunctionCall",
                            "src": "4702:15:34"
                          },
                          "variableNames": [
                            {
                              "name": "result",
                              "nativeSrc": "4692:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "4692:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "mask_bytes_dynamic",
                    "nativeSrc": "4554:169:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nativeSrc": "4582:4:34",
                        "nodeType": "YulTypedName",
                        "src": "4582:4:34",
                        "type": ""
                      },
                      {
                        "name": "bytes",
                        "nativeSrc": "4588:5:34",
                        "nodeType": "YulTypedName",
                        "src": "4588:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "result",
                        "nativeSrc": "4598:6:34",
                        "nodeType": "YulTypedName",
                        "src": "4598:6:34",
                        "type": ""
                      }
                    ],
                    "src": "4554:169:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "4809:214:34",
                      "nodeType": "YulBlock",
                      "src": "4809:214:34",
                      "statements": [
                        {
                          "nativeSrc": "4942:37:34",
                          "nodeType": "YulAssignment",
                          "src": "4942:37:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "4969:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "4969:4:34"
                              },
                              {
                                "name": "len",
                                "nativeSrc": "4975:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "4975:3:34"
                              }
                            ],
                            "functionName": {
                              "name": "mask_bytes_dynamic",
                              "nativeSrc": "4950:18:34",
                              "nodeType": "YulIdentifier",
                              "src": "4950:18:34"
                            },
                            "nativeSrc": "4950:29:34",
                            "nodeType": "YulFunctionCall",
                            "src": "4950:29:34"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nativeSrc": "4942:4:34",
                              "nodeType": "YulIdentifier",
                              "src": "4942:4:34"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "4988:29:34",
                          "nodeType": "YulAssignment",
                          "src": "4988:29:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "4999:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "4999:4:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5009:1:34",
                                    "nodeType": "YulLiteral",
                                    "src": "5009:1:34",
                                    "type": "",
                                    "value": "2"
                                  },
                                  {
                                    "name": "len",
                                    "nativeSrc": "5012:3:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "5012:3:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mul",
                                  "nativeSrc": "5005:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "5005:3:34"
                                },
                                "nativeSrc": "5005:11:34",
                                "nodeType": "YulFunctionCall",
                                "src": "5005:11:34"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nativeSrc": "4996:2:34",
                              "nodeType": "YulIdentifier",
                              "src": "4996:2:34"
                            },
                            "nativeSrc": "4996:21:34",
                            "nodeType": "YulFunctionCall",
                            "src": "4996:21:34"
                          },
                          "variableNames": [
                            {
                              "name": "used",
                              "nativeSrc": "4988:4:34",
                              "nodeType": "YulIdentifier",
                              "src": "4988:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "extract_used_part_and_set_length_of_short_byte_array",
                    "nativeSrc": "4728:295:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nativeSrc": "4790:4:34",
                        "nodeType": "YulTypedName",
                        "src": "4790:4:34",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nativeSrc": "4796:3:34",
                        "nodeType": "YulTypedName",
                        "src": "4796:3:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "used",
                        "nativeSrc": "4804:4:34",
                        "nodeType": "YulTypedName",
                        "src": "4804:4:34",
                        "type": ""
                      }
                    ],
                    "src": "4728:295:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "5120:1303:34",
                      "nodeType": "YulBlock",
                      "src": "5120:1303:34",
                      "statements": [
                        {
                          "nativeSrc": "5131:51:34",
                          "nodeType": "YulVariableDeclaration",
                          "src": "5131:51:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "src",
                                "nativeSrc": "5178:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "5178:3:34"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_string_memory_ptr",
                              "nativeSrc": "5145:32:34",
                              "nodeType": "YulIdentifier",
                              "src": "5145:32:34"
                            },
                            "nativeSrc": "5145:37:34",
                            "nodeType": "YulFunctionCall",
                            "src": "5145:37:34"
                          },
                          "variables": [
                            {
                              "name": "newLen",
                              "nativeSrc": "5135:6:34",
                              "nodeType": "YulTypedName",
                              "src": "5135:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "5267:22:34",
                            "nodeType": "YulBlock",
                            "src": "5267:22:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nativeSrc": "5269:16:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "5269:16:34"
                                  },
                                  "nativeSrc": "5269:18:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5269:18:34"
                                },
                                "nativeSrc": "5269:18:34",
                                "nodeType": "YulExpressionStatement",
                                "src": "5269:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nativeSrc": "5239:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "5239:6:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "5247:18:34",
                                "nodeType": "YulLiteral",
                                "src": "5247:18:34",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "5236:2:34",
                              "nodeType": "YulIdentifier",
                              "src": "5236:2:34"
                            },
                            "nativeSrc": "5236:30:34",
                            "nodeType": "YulFunctionCall",
                            "src": "5236:30:34"
                          },
                          "nativeSrc": "5233:56:34",
                          "nodeType": "YulIf",
                          "src": "5233:56:34"
                        },
                        {
                          "nativeSrc": "5299:52:34",
                          "nodeType": "YulVariableDeclaration",
                          "src": "5299:52:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "slot",
                                    "nativeSrc": "5345:4:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "5345:4:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sload",
                                  "nativeSrc": "5339:5:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "5339:5:34"
                                },
                                "nativeSrc": "5339:11:34",
                                "nodeType": "YulFunctionCall",
                                "src": "5339:11:34"
                              }
                            ],
                            "functionName": {
                              "name": "extract_byte_array_length",
                              "nativeSrc": "5313:25:34",
                              "nodeType": "YulIdentifier",
                              "src": "5313:25:34"
                            },
                            "nativeSrc": "5313:38:34",
                            "nodeType": "YulFunctionCall",
                            "src": "5313:38:34"
                          },
                          "variables": [
                            {
                              "name": "oldLen",
                              "nativeSrc": "5303:6:34",
                              "nodeType": "YulTypedName",
                              "src": "5303:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nativeSrc": "5444:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "5444:4:34"
                              },
                              {
                                "name": "oldLen",
                                "nativeSrc": "5450:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "5450:6:34"
                              },
                              {
                                "name": "newLen",
                                "nativeSrc": "5458:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "5458:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "clean_up_bytearray_end_slots_t_string_storage",
                              "nativeSrc": "5398:45:34",
                              "nodeType": "YulIdentifier",
                              "src": "5398:45:34"
                            },
                            "nativeSrc": "5398:67:34",
                            "nodeType": "YulFunctionCall",
                            "src": "5398:67:34"
                          },
                          "nativeSrc": "5398:67:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "5398:67:34"
                        },
                        {
                          "nativeSrc": "5475:18:34",
                          "nodeType": "YulVariableDeclaration",
                          "src": "5475:18:34",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "5492:1:34",
                            "nodeType": "YulLiteral",
                            "src": "5492:1:34",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "srcOffset",
                              "nativeSrc": "5479:9:34",
                              "nodeType": "YulTypedName",
                              "src": "5479:9:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "5503:17:34",
                          "nodeType": "YulAssignment",
                          "src": "5503:17:34",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "5516:4:34",
                            "nodeType": "YulLiteral",
                            "src": "5516:4:34",
                            "type": "",
                            "value": "0x20"
                          },
                          "variableNames": [
                            {
                              "name": "srcOffset",
                              "nativeSrc": "5503:9:34",
                              "nodeType": "YulIdentifier",
                              "src": "5503:9:34"
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nativeSrc": "5567:611:34",
                                "nodeType": "YulBlock",
                                "src": "5567:611:34",
                                "statements": [
                                  {
                                    "nativeSrc": "5581:37:34",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "5581:37:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "newLen",
                                          "nativeSrc": "5600:6:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "5600:6:34"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "5612:4:34",
                                              "nodeType": "YulLiteral",
                                              "src": "5612:4:34",
                                              "type": "",
                                              "value": "0x1f"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nativeSrc": "5608:3:34",
                                            "nodeType": "YulIdentifier",
                                            "src": "5608:3:34"
                                          },
                                          "nativeSrc": "5608:9:34",
                                          "nodeType": "YulFunctionCall",
                                          "src": "5608:9:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nativeSrc": "5596:3:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "5596:3:34"
                                      },
                                      "nativeSrc": "5596:22:34",
                                      "nodeType": "YulFunctionCall",
                                      "src": "5596:22:34"
                                    },
                                    "variables": [
                                      {
                                        "name": "loopEnd",
                                        "nativeSrc": "5585:7:34",
                                        "nodeType": "YulTypedName",
                                        "src": "5585:7:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "5632:51:34",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "5632:51:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "5678:4:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "5678:4:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_t_string_storage",
                                        "nativeSrc": "5646:31:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "5646:31:34"
                                      },
                                      "nativeSrc": "5646:37:34",
                                      "nodeType": "YulFunctionCall",
                                      "src": "5646:37:34"
                                    },
                                    "variables": [
                                      {
                                        "name": "dstPtr",
                                        "nativeSrc": "5636:6:34",
                                        "nodeType": "YulTypedName",
                                        "src": "5636:6:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "5696:10:34",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "5696:10:34",
                                    "value": {
                                      "kind": "number",
                                      "nativeSrc": "5705:1:34",
                                      "nodeType": "YulLiteral",
                                      "src": "5705:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nativeSrc": "5700:1:34",
                                        "nodeType": "YulTypedName",
                                        "src": "5700:1:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "5764:163:34",
                                      "nodeType": "YulBlock",
                                      "src": "5764:163:34",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "5789:6:34",
                                                "nodeType": "YulIdentifier",
                                                "src": "5789:6:34"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "src",
                                                        "nativeSrc": "5807:3:34",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "5807:3:34"
                                                      },
                                                      {
                                                        "name": "srcOffset",
                                                        "nativeSrc": "5812:9:34",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "5812:9:34"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nativeSrc": "5803:3:34",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "5803:3:34"
                                                    },
                                                    "nativeSrc": "5803:19:34",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "5803:19:34"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nativeSrc": "5797:5:34",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "5797:5:34"
                                                },
                                                "nativeSrc": "5797:26:34",
                                                "nodeType": "YulFunctionCall",
                                                "src": "5797:26:34"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nativeSrc": "5782:6:34",
                                              "nodeType": "YulIdentifier",
                                              "src": "5782:6:34"
                                            },
                                            "nativeSrc": "5782:42:34",
                                            "nodeType": "YulFunctionCall",
                                            "src": "5782:42:34"
                                          },
                                          "nativeSrc": "5782:42:34",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "5782:42:34"
                                        },
                                        {
                                          "nativeSrc": "5841:24:34",
                                          "nodeType": "YulAssignment",
                                          "src": "5841:24:34",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "5855:6:34",
                                                "nodeType": "YulIdentifier",
                                                "src": "5855:6:34"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "5863:1:34",
                                                "nodeType": "YulLiteral",
                                                "src": "5863:1:34",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "5851:3:34",
                                              "nodeType": "YulIdentifier",
                                              "src": "5851:3:34"
                                            },
                                            "nativeSrc": "5851:14:34",
                                            "nodeType": "YulFunctionCall",
                                            "src": "5851:14:34"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dstPtr",
                                              "nativeSrc": "5841:6:34",
                                              "nodeType": "YulIdentifier",
                                              "src": "5841:6:34"
                                            }
                                          ]
                                        },
                                        {
                                          "nativeSrc": "5882:31:34",
                                          "nodeType": "YulAssignment",
                                          "src": "5882:31:34",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "srcOffset",
                                                "nativeSrc": "5899:9:34",
                                                "nodeType": "YulIdentifier",
                                                "src": "5899:9:34"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "5910:2:34",
                                                "nodeType": "YulLiteral",
                                                "src": "5910:2:34",
                                                "type": "",
                                                "value": "32"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "5895:3:34",
                                              "nodeType": "YulIdentifier",
                                              "src": "5895:3:34"
                                            },
                                            "nativeSrc": "5895:18:34",
                                            "nodeType": "YulFunctionCall",
                                            "src": "5895:18:34"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "srcOffset",
                                              "nativeSrc": "5882:9:34",
                                              "nodeType": "YulIdentifier",
                                              "src": "5882:9:34"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nativeSrc": "5730:1:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "5730:1:34"
                                        },
                                        {
                                          "name": "loopEnd",
                                          "nativeSrc": "5733:7:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "5733:7:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "5727:2:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "5727:2:34"
                                      },
                                      "nativeSrc": "5727:14:34",
                                      "nodeType": "YulFunctionCall",
                                      "src": "5727:14:34"
                                    },
                                    "nativeSrc": "5719:208:34",
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nativeSrc": "5742:21:34",
                                      "nodeType": "YulBlock",
                                      "src": "5742:21:34",
                                      "statements": [
                                        {
                                          "nativeSrc": "5744:17:34",
                                          "nodeType": "YulAssignment",
                                          "src": "5744:17:34",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nativeSrc": "5753:1:34",
                                                "nodeType": "YulIdentifier",
                                                "src": "5753:1:34"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "5756:4:34",
                                                "nodeType": "YulLiteral",
                                                "src": "5756:4:34",
                                                "type": "",
                                                "value": "0x20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "5749:3:34",
                                              "nodeType": "YulIdentifier",
                                              "src": "5749:3:34"
                                            },
                                            "nativeSrc": "5749:12:34",
                                            "nodeType": "YulFunctionCall",
                                            "src": "5749:12:34"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nativeSrc": "5744:1:34",
                                              "nodeType": "YulIdentifier",
                                              "src": "5744:1:34"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nativeSrc": "5723:3:34",
                                      "nodeType": "YulBlock",
                                      "src": "5723:3:34",
                                      "statements": []
                                    },
                                    "src": "5719:208:34"
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "5963:156:34",
                                      "nodeType": "YulBlock",
                                      "src": "5963:156:34",
                                      "statements": [
                                        {
                                          "nativeSrc": "5981:43:34",
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "5981:43:34",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nativeSrc": "6008:3:34",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "6008:3:34"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nativeSrc": "6013:9:34",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "6013:9:34"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "6004:3:34",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6004:3:34"
                                                },
                                                "nativeSrc": "6004:19:34",
                                                "nodeType": "YulFunctionCall",
                                                "src": "6004:19:34"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nativeSrc": "5998:5:34",
                                              "nodeType": "YulIdentifier",
                                              "src": "5998:5:34"
                                            },
                                            "nativeSrc": "5998:26:34",
                                            "nodeType": "YulFunctionCall",
                                            "src": "5998:26:34"
                                          },
                                          "variables": [
                                            {
                                              "name": "lastValue",
                                              "nativeSrc": "5985:9:34",
                                              "nodeType": "YulTypedName",
                                              "src": "5985:9:34",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "6048:6:34",
                                                "nodeType": "YulIdentifier",
                                                "src": "6048:6:34"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "lastValue",
                                                    "nativeSrc": "6075:9:34",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "6075:9:34"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "newLen",
                                                        "nativeSrc": "6090:6:34",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "6090:6:34"
                                                      },
                                                      {
                                                        "kind": "number",
                                                        "nativeSrc": "6098:4:34",
                                                        "nodeType": "YulLiteral",
                                                        "src": "6098:4:34",
                                                        "type": "",
                                                        "value": "0x1f"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "and",
                                                      "nativeSrc": "6086:3:34",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "6086:3:34"
                                                    },
                                                    "nativeSrc": "6086:17:34",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "6086:17:34"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mask_bytes_dynamic",
                                                  "nativeSrc": "6056:18:34",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6056:18:34"
                                                },
                                                "nativeSrc": "6056:48:34",
                                                "nodeType": "YulFunctionCall",
                                                "src": "6056:48:34"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nativeSrc": "6041:6:34",
                                              "nodeType": "YulIdentifier",
                                              "src": "6041:6:34"
                                            },
                                            "nativeSrc": "6041:64:34",
                                            "nodeType": "YulFunctionCall",
                                            "src": "6041:64:34"
                                          },
                                          "nativeSrc": "6041:64:34",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "6041:64:34"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "loopEnd",
                                          "nativeSrc": "5946:7:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "5946:7:34"
                                        },
                                        {
                                          "name": "newLen",
                                          "nativeSrc": "5955:6:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "5955:6:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "5943:2:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "5943:2:34"
                                      },
                                      "nativeSrc": "5943:19:34",
                                      "nodeType": "YulFunctionCall",
                                      "src": "5943:19:34"
                                    },
                                    "nativeSrc": "5940:179:34",
                                    "nodeType": "YulIf",
                                    "src": "5940:179:34"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "6139:4:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "6139:4:34"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "newLen",
                                                  "nativeSrc": "6153:6:34",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6153:6:34"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "6161:1:34",
                                                  "nodeType": "YulLiteral",
                                                  "src": "6161:1:34",
                                                  "type": "",
                                                  "value": "2"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "mul",
                                                "nativeSrc": "6149:3:34",
                                                "nodeType": "YulIdentifier",
                                                "src": "6149:3:34"
                                              },
                                              "nativeSrc": "6149:14:34",
                                              "nodeType": "YulFunctionCall",
                                              "src": "6149:14:34"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "6165:1:34",
                                              "nodeType": "YulLiteral",
                                              "src": "6165:1:34",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "6145:3:34",
                                            "nodeType": "YulIdentifier",
                                            "src": "6145:3:34"
                                          },
                                          "nativeSrc": "6145:22:34",
                                          "nodeType": "YulFunctionCall",
                                          "src": "6145:22:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nativeSrc": "6132:6:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "6132:6:34"
                                      },
                                      "nativeSrc": "6132:36:34",
                                      "nodeType": "YulFunctionCall",
                                      "src": "6132:36:34"
                                    },
                                    "nativeSrc": "6132:36:34",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6132:36:34"
                                  }
                                ]
                              },
                              "nativeSrc": "5560:618:34",
                              "nodeType": "YulCase",
                              "src": "5560:618:34",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "5565:1:34",
                                "nodeType": "YulLiteral",
                                "src": "5565:1:34",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nativeSrc": "6195:222:34",
                                "nodeType": "YulBlock",
                                "src": "6195:222:34",
                                "statements": [
                                  {
                                    "nativeSrc": "6209:14:34",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "6209:14:34",
                                    "value": {
                                      "kind": "number",
                                      "nativeSrc": "6222:1:34",
                                      "nodeType": "YulLiteral",
                                      "src": "6222:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "6213:5:34",
                                        "nodeType": "YulTypedName",
                                        "src": "6213:5:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "6246:67:34",
                                      "nodeType": "YulBlock",
                                      "src": "6246:67:34",
                                      "statements": [
                                        {
                                          "nativeSrc": "6264:35:34",
                                          "nodeType": "YulAssignment",
                                          "src": "6264:35:34",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nativeSrc": "6283:3:34",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "6283:3:34"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nativeSrc": "6288:9:34",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "6288:9:34"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "6279:3:34",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6279:3:34"
                                                },
                                                "nativeSrc": "6279:19:34",
                                                "nodeType": "YulFunctionCall",
                                                "src": "6279:19:34"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nativeSrc": "6273:5:34",
                                              "nodeType": "YulIdentifier",
                                              "src": "6273:5:34"
                                            },
                                            "nativeSrc": "6273:26:34",
                                            "nodeType": "YulFunctionCall",
                                            "src": "6273:26:34"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "value",
                                              "nativeSrc": "6264:5:34",
                                              "nodeType": "YulIdentifier",
                                              "src": "6264:5:34"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "name": "newLen",
                                      "nativeSrc": "6239:6:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "6239:6:34"
                                    },
                                    "nativeSrc": "6236:77:34",
                                    "nodeType": "YulIf",
                                    "src": "6236:77:34"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "6333:4:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "6333:4:34"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "value",
                                              "nativeSrc": "6392:5:34",
                                              "nodeType": "YulIdentifier",
                                              "src": "6392:5:34"
                                            },
                                            {
                                              "name": "newLen",
                                              "nativeSrc": "6399:6:34",
                                              "nodeType": "YulIdentifier",
                                              "src": "6399:6:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "extract_used_part_and_set_length_of_short_byte_array",
                                            "nativeSrc": "6339:52:34",
                                            "nodeType": "YulIdentifier",
                                            "src": "6339:52:34"
                                          },
                                          "nativeSrc": "6339:67:34",
                                          "nodeType": "YulFunctionCall",
                                          "src": "6339:67:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nativeSrc": "6326:6:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "6326:6:34"
                                      },
                                      "nativeSrc": "6326:81:34",
                                      "nodeType": "YulFunctionCall",
                                      "src": "6326:81:34"
                                    },
                                    "nativeSrc": "6326:81:34",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6326:81:34"
                                  }
                                ]
                              },
                              "nativeSrc": "6187:230:34",
                              "nodeType": "YulCase",
                              "src": "6187:230:34",
                              "value": "default"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nativeSrc": "5540:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "5540:6:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "5548:2:34",
                                "nodeType": "YulLiteral",
                                "src": "5548:2:34",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "5537:2:34",
                              "nodeType": "YulIdentifier",
                              "src": "5537:2:34"
                            },
                            "nativeSrc": "5537:14:34",
                            "nodeType": "YulFunctionCall",
                            "src": "5537:14:34"
                          },
                          "nativeSrc": "5530:887:34",
                          "nodeType": "YulSwitch",
                          "src": "5530:887:34"
                        }
                      ]
                    },
                    "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                    "nativeSrc": "5028:1395:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nativeSrc": "5109:4:34",
                        "nodeType": "YulTypedName",
                        "src": "5109:4:34",
                        "type": ""
                      },
                      {
                        "name": "src",
                        "nativeSrc": "5115:3:34",
                        "nodeType": "YulTypedName",
                        "src": "5115:3:34",
                        "type": ""
                      }
                    ],
                    "src": "5028:1395:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "6494:53:34",
                      "nodeType": "YulBlock",
                      "src": "6494:53:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "6511:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "6511:3:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "6534:5:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "6534:5:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_address",
                                  "nativeSrc": "6516:17:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "6516:17:34"
                                },
                                "nativeSrc": "6516:24:34",
                                "nodeType": "YulFunctionCall",
                                "src": "6516:24:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "6504:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "6504:6:34"
                            },
                            "nativeSrc": "6504:37:34",
                            "nodeType": "YulFunctionCall",
                            "src": "6504:37:34"
                          },
                          "nativeSrc": "6504:37:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "6504:37:34"
                        }
                      ]
                    },
                    "name": "abi_encode_t_address_to_t_address_fromStack",
                    "nativeSrc": "6429:118:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "6482:5:34",
                        "nodeType": "YulTypedName",
                        "src": "6482:5:34",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "6489:3:34",
                        "nodeType": "YulTypedName",
                        "src": "6489:3:34",
                        "type": ""
                      }
                    ],
                    "src": "6429:118:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "6651:124:34",
                      "nodeType": "YulBlock",
                      "src": "6651:124:34",
                      "statements": [
                        {
                          "nativeSrc": "6661:26:34",
                          "nodeType": "YulAssignment",
                          "src": "6661:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "6673:9:34",
                                "nodeType": "YulIdentifier",
                                "src": "6673:9:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6684:2:34",
                                "nodeType": "YulLiteral",
                                "src": "6684:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "6669:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "6669:3:34"
                            },
                            "nativeSrc": "6669:18:34",
                            "nodeType": "YulFunctionCall",
                            "src": "6669:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "6661:4:34",
                              "nodeType": "YulIdentifier",
                              "src": "6661:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "6741:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "6741:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "6754:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "6754:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "6765:1:34",
                                    "nodeType": "YulLiteral",
                                    "src": "6765:1:34",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "6750:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "6750:3:34"
                                },
                                "nativeSrc": "6750:17:34",
                                "nodeType": "YulFunctionCall",
                                "src": "6750:17:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "6697:43:34",
                              "nodeType": "YulIdentifier",
                              "src": "6697:43:34"
                            },
                            "nativeSrc": "6697:71:34",
                            "nodeType": "YulFunctionCall",
                            "src": "6697:71:34"
                          },
                          "nativeSrc": "6697:71:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "6697:71:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nativeSrc": "6553:222:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "6623:9:34",
                        "nodeType": "YulTypedName",
                        "src": "6623:9:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "6635:6:34",
                        "nodeType": "YulTypedName",
                        "src": "6635:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "6646:4:34",
                        "nodeType": "YulTypedName",
                        "src": "6646:4:34",
                        "type": ""
                      }
                    ],
                    "src": "6553:222:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "6809:152:34",
                      "nodeType": "YulBlock",
                      "src": "6809:152:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "6826:1:34",
                                "nodeType": "YulLiteral",
                                "src": "6826:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6829:77:34",
                                "nodeType": "YulLiteral",
                                "src": "6829:77:34",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "6819:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "6819:6:34"
                            },
                            "nativeSrc": "6819:88:34",
                            "nodeType": "YulFunctionCall",
                            "src": "6819:88:34"
                          },
                          "nativeSrc": "6819:88:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "6819:88:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "6923:1:34",
                                "nodeType": "YulLiteral",
                                "src": "6923:1:34",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6926:4:34",
                                "nodeType": "YulLiteral",
                                "src": "6926:4:34",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "6916:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "6916:6:34"
                            },
                            "nativeSrc": "6916:15:34",
                            "nodeType": "YulFunctionCall",
                            "src": "6916:15:34"
                          },
                          "nativeSrc": "6916:15:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "6916:15:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "6947:1:34",
                                "nodeType": "YulLiteral",
                                "src": "6947:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6950:4:34",
                                "nodeType": "YulLiteral",
                                "src": "6950:4:34",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "6940:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "6940:6:34"
                            },
                            "nativeSrc": "6940:15:34",
                            "nodeType": "YulFunctionCall",
                            "src": "6940:15:34"
                          },
                          "nativeSrc": "6940:15:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "6940:15:34"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nativeSrc": "6781:180:34",
                    "nodeType": "YulFunctionDefinition",
                    "src": "6781:180:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "7018:51:34",
                      "nodeType": "YulBlock",
                      "src": "7018:51:34",
                      "statements": [
                        {
                          "nativeSrc": "7028:34:34",
                          "nodeType": "YulAssignment",
                          "src": "7028:34:34",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "7053:1:34",
                                "nodeType": "YulLiteral",
                                "src": "7053:1:34",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "value",
                                "nativeSrc": "7056:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "7056:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nativeSrc": "7049:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "7049:3:34"
                            },
                            "nativeSrc": "7049:13:34",
                            "nodeType": "YulFunctionCall",
                            "src": "7049:13:34"
                          },
                          "variableNames": [
                            {
                              "name": "newValue",
                              "nativeSrc": "7028:8:34",
                              "nodeType": "YulIdentifier",
                              "src": "7028:8:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "shift_right_1_unsigned",
                    "nativeSrc": "6967:102:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "6999:5:34",
                        "nodeType": "YulTypedName",
                        "src": "6999:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "newValue",
                        "nativeSrc": "7009:8:34",
                        "nodeType": "YulTypedName",
                        "src": "7009:8:34",
                        "type": ""
                      }
                    ],
                    "src": "6967:102:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "7148:775:34",
                      "nodeType": "YulBlock",
                      "src": "7148:775:34",
                      "statements": [
                        {
                          "nativeSrc": "7158:15:34",
                          "nodeType": "YulAssignment",
                          "src": "7158:15:34",
                          "value": {
                            "name": "_power",
                            "nativeSrc": "7167:6:34",
                            "nodeType": "YulIdentifier",
                            "src": "7167:6:34"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nativeSrc": "7158:5:34",
                              "nodeType": "YulIdentifier",
                              "src": "7158:5:34"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "7182:14:34",
                          "nodeType": "YulAssignment",
                          "src": "7182:14:34",
                          "value": {
                            "name": "_base",
                            "nativeSrc": "7191:5:34",
                            "nodeType": "YulIdentifier",
                            "src": "7191:5:34"
                          },
                          "variableNames": [
                            {
                              "name": "base",
                              "nativeSrc": "7182:4:34",
                              "nodeType": "YulIdentifier",
                              "src": "7182:4:34"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "7240:677:34",
                            "nodeType": "YulBlock",
                            "src": "7240:677:34",
                            "statements": [
                              {
                                "body": {
                                  "nativeSrc": "7328:22:34",
                                  "nodeType": "YulBlock",
                                  "src": "7328:22:34",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [],
                                        "functionName": {
                                          "name": "panic_error_0x11",
                                          "nativeSrc": "7330:16:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "7330:16:34"
                                        },
                                        "nativeSrc": "7330:18:34",
                                        "nodeType": "YulFunctionCall",
                                        "src": "7330:18:34"
                                      },
                                      "nativeSrc": "7330:18:34",
                                      "nodeType": "YulExpressionStatement",
                                      "src": "7330:18:34"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nativeSrc": "7306:4:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "7306:4:34"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "max",
                                          "nativeSrc": "7316:3:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "7316:3:34"
                                        },
                                        {
                                          "name": "base",
                                          "nativeSrc": "7321:4:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "7321:4:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "div",
                                        "nativeSrc": "7312:3:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "7312:3:34"
                                      },
                                      "nativeSrc": "7312:14:34",
                                      "nodeType": "YulFunctionCall",
                                      "src": "7312:14:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nativeSrc": "7303:2:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "7303:2:34"
                                  },
                                  "nativeSrc": "7303:24:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7303:24:34"
                                },
                                "nativeSrc": "7300:50:34",
                                "nodeType": "YulIf",
                                "src": "7300:50:34"
                              },
                              {
                                "body": {
                                  "nativeSrc": "7395:419:34",
                                  "nodeType": "YulBlock",
                                  "src": "7395:419:34",
                                  "statements": [
                                    {
                                      "nativeSrc": "7775:25:34",
                                      "nodeType": "YulAssignment",
                                      "src": "7775:25:34",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "power",
                                            "nativeSrc": "7788:5:34",
                                            "nodeType": "YulIdentifier",
                                            "src": "7788:5:34"
                                          },
                                          {
                                            "name": "base",
                                            "nativeSrc": "7795:4:34",
                                            "nodeType": "YulIdentifier",
                                            "src": "7795:4:34"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mul",
                                          "nativeSrc": "7784:3:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "7784:3:34"
                                        },
                                        "nativeSrc": "7784:16:34",
                                        "nodeType": "YulFunctionCall",
                                        "src": "7784:16:34"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "power",
                                          "nativeSrc": "7775:5:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "7775:5:34"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nativeSrc": "7370:8:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "7370:8:34"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "7380:1:34",
                                      "nodeType": "YulLiteral",
                                      "src": "7380:1:34",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "7366:3:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "7366:3:34"
                                  },
                                  "nativeSrc": "7366:16:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7366:16:34"
                                },
                                "nativeSrc": "7363:451:34",
                                "nodeType": "YulIf",
                                "src": "7363:451:34"
                              },
                              {
                                "nativeSrc": "7827:23:34",
                                "nodeType": "YulAssignment",
                                "src": "7827:23:34",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nativeSrc": "7839:4:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "7839:4:34"
                                    },
                                    {
                                      "name": "base",
                                      "nativeSrc": "7845:4:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "7845:4:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mul",
                                    "nativeSrc": "7835:3:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "7835:3:34"
                                  },
                                  "nativeSrc": "7835:15:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7835:15:34"
                                },
                                "variableNames": [
                                  {
                                    "name": "base",
                                    "nativeSrc": "7827:4:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "7827:4:34"
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "7863:44:34",
                                "nodeType": "YulAssignment",
                                "src": "7863:44:34",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nativeSrc": "7898:8:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "7898:8:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shift_right_1_unsigned",
                                    "nativeSrc": "7875:22:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "7875:22:34"
                                  },
                                  "nativeSrc": "7875:32:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7875:32:34"
                                },
                                "variableNames": [
                                  {
                                    "name": "exponent",
                                    "nativeSrc": "7863:8:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "7863:8:34"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "exponent",
                                "nativeSrc": "7216:8:34",
                                "nodeType": "YulIdentifier",
                                "src": "7216:8:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "7226:1:34",
                                "nodeType": "YulLiteral",
                                "src": "7226:1:34",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "7213:2:34",
                              "nodeType": "YulIdentifier",
                              "src": "7213:2:34"
                            },
                            "nativeSrc": "7213:15:34",
                            "nodeType": "YulFunctionCall",
                            "src": "7213:15:34"
                          },
                          "nativeSrc": "7205:712:34",
                          "nodeType": "YulForLoop",
                          "post": {
                            "nativeSrc": "7229:2:34",
                            "nodeType": "YulBlock",
                            "src": "7229:2:34",
                            "statements": []
                          },
                          "pre": {
                            "nativeSrc": "7209:3:34",
                            "nodeType": "YulBlock",
                            "src": "7209:3:34",
                            "statements": []
                          },
                          "src": "7205:712:34"
                        }
                      ]
                    },
                    "name": "checked_exp_helper",
                    "nativeSrc": "7075:848:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "_power",
                        "nativeSrc": "7103:6:34",
                        "nodeType": "YulTypedName",
                        "src": "7103:6:34",
                        "type": ""
                      },
                      {
                        "name": "_base",
                        "nativeSrc": "7111:5:34",
                        "nodeType": "YulTypedName",
                        "src": "7111:5:34",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nativeSrc": "7118:8:34",
                        "nodeType": "YulTypedName",
                        "src": "7118:8:34",
                        "type": ""
                      },
                      {
                        "name": "max",
                        "nativeSrc": "7128:3:34",
                        "nodeType": "YulTypedName",
                        "src": "7128:3:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nativeSrc": "7136:5:34",
                        "nodeType": "YulTypedName",
                        "src": "7136:5:34",
                        "type": ""
                      },
                      {
                        "name": "base",
                        "nativeSrc": "7143:4:34",
                        "nodeType": "YulTypedName",
                        "src": "7143:4:34",
                        "type": ""
                      }
                    ],
                    "src": "7075:848:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "7989:1013:34",
                      "nodeType": "YulBlock",
                      "src": "7989:1013:34",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "8184:20:34",
                            "nodeType": "YulBlock",
                            "src": "8184:20:34",
                            "statements": [
                              {
                                "nativeSrc": "8186:10:34",
                                "nodeType": "YulAssignment",
                                "src": "8186:10:34",
                                "value": {
                                  "kind": "number",
                                  "nativeSrc": "8195:1:34",
                                  "nodeType": "YulLiteral",
                                  "src": "8195:1:34",
                                  "type": "",
                                  "value": "1"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nativeSrc": "8186:5:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "8186:5:34"
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "8197:5:34",
                                "nodeType": "YulLeave",
                                "src": "8197:5:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "exponent",
                                "nativeSrc": "8174:8:34",
                                "nodeType": "YulIdentifier",
                                "src": "8174:8:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "8167:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "8167:6:34"
                            },
                            "nativeSrc": "8167:16:34",
                            "nodeType": "YulFunctionCall",
                            "src": "8167:16:34"
                          },
                          "nativeSrc": "8164:40:34",
                          "nodeType": "YulIf",
                          "src": "8164:40:34"
                        },
                        {
                          "body": {
                            "nativeSrc": "8229:20:34",
                            "nodeType": "YulBlock",
                            "src": "8229:20:34",
                            "statements": [
                              {
                                "nativeSrc": "8231:10:34",
                                "nodeType": "YulAssignment",
                                "src": "8231:10:34",
                                "value": {
                                  "kind": "number",
                                  "nativeSrc": "8240:1:34",
                                  "nodeType": "YulLiteral",
                                  "src": "8240:1:34",
                                  "type": "",
                                  "value": "0"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nativeSrc": "8231:5:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "8231:5:34"
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "8242:5:34",
                                "nodeType": "YulLeave",
                                "src": "8242:5:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "base",
                                "nativeSrc": "8223:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "8223:4:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "8216:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "8216:6:34"
                            },
                            "nativeSrc": "8216:12:34",
                            "nodeType": "YulFunctionCall",
                            "src": "8216:12:34"
                          },
                          "nativeSrc": "8213:36:34",
                          "nodeType": "YulIf",
                          "src": "8213:36:34"
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nativeSrc": "8359:20:34",
                                "nodeType": "YulBlock",
                                "src": "8359:20:34",
                                "statements": [
                                  {
                                    "nativeSrc": "8361:10:34",
                                    "nodeType": "YulAssignment",
                                    "src": "8361:10:34",
                                    "value": {
                                      "kind": "number",
                                      "nativeSrc": "8370:1:34",
                                      "nodeType": "YulLiteral",
                                      "src": "8370:1:34",
                                      "type": "",
                                      "value": "1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nativeSrc": "8361:5:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "8361:5:34"
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "8372:5:34",
                                    "nodeType": "YulLeave",
                                    "src": "8372:5:34"
                                  }
                                ]
                              },
                              "nativeSrc": "8352:27:34",
                              "nodeType": "YulCase",
                              "src": "8352:27:34",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "8357:1:34",
                                "nodeType": "YulLiteral",
                                "src": "8357:1:34",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nativeSrc": "8403:176:34",
                                "nodeType": "YulBlock",
                                "src": "8403:176:34",
                                "statements": [
                                  {
                                    "body": {
                                      "nativeSrc": "8438:22:34",
                                      "nodeType": "YulBlock",
                                      "src": "8438:22:34",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [],
                                            "functionName": {
                                              "name": "panic_error_0x11",
                                              "nativeSrc": "8440:16:34",
                                              "nodeType": "YulIdentifier",
                                              "src": "8440:16:34"
                                            },
                                            "nativeSrc": "8440:18:34",
                                            "nodeType": "YulFunctionCall",
                                            "src": "8440:18:34"
                                          },
                                          "nativeSrc": "8440:18:34",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "8440:18:34"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "exponent",
                                          "nativeSrc": "8423:8:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "8423:8:34"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "8433:3:34",
                                          "nodeType": "YulLiteral",
                                          "src": "8433:3:34",
                                          "type": "",
                                          "value": "255"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "gt",
                                        "nativeSrc": "8420:2:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "8420:2:34"
                                      },
                                      "nativeSrc": "8420:17:34",
                                      "nodeType": "YulFunctionCall",
                                      "src": "8420:17:34"
                                    },
                                    "nativeSrc": "8417:43:34",
                                    "nodeType": "YulIf",
                                    "src": "8417:43:34"
                                  },
                                  {
                                    "nativeSrc": "8473:25:34",
                                    "nodeType": "YulAssignment",
                                    "src": "8473:25:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "8486:1:34",
                                          "nodeType": "YulLiteral",
                                          "src": "8486:1:34",
                                          "type": "",
                                          "value": "2"
                                        },
                                        {
                                          "name": "exponent",
                                          "nativeSrc": "8489:8:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "8489:8:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "exp",
                                        "nativeSrc": "8482:3:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "8482:3:34"
                                      },
                                      "nativeSrc": "8482:16:34",
                                      "nodeType": "YulFunctionCall",
                                      "src": "8482:16:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nativeSrc": "8473:5:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "8473:5:34"
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "8529:22:34",
                                      "nodeType": "YulBlock",
                                      "src": "8529:22:34",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [],
                                            "functionName": {
                                              "name": "panic_error_0x11",
                                              "nativeSrc": "8531:16:34",
                                              "nodeType": "YulIdentifier",
                                              "src": "8531:16:34"
                                            },
                                            "nativeSrc": "8531:18:34",
                                            "nodeType": "YulFunctionCall",
                                            "src": "8531:18:34"
                                          },
                                          "nativeSrc": "8531:18:34",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "8531:18:34"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "power",
                                          "nativeSrc": "8517:5:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "8517:5:34"
                                        },
                                        {
                                          "name": "max",
                                          "nativeSrc": "8524:3:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "8524:3:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "gt",
                                        "nativeSrc": "8514:2:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "8514:2:34"
                                      },
                                      "nativeSrc": "8514:14:34",
                                      "nodeType": "YulFunctionCall",
                                      "src": "8514:14:34"
                                    },
                                    "nativeSrc": "8511:40:34",
                                    "nodeType": "YulIf",
                                    "src": "8511:40:34"
                                  },
                                  {
                                    "nativeSrc": "8564:5:34",
                                    "nodeType": "YulLeave",
                                    "src": "8564:5:34"
                                  }
                                ]
                              },
                              "nativeSrc": "8388:191:34",
                              "nodeType": "YulCase",
                              "src": "8388:191:34",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "8393:1:34",
                                "nodeType": "YulLiteral",
                                "src": "8393:1:34",
                                "type": "",
                                "value": "2"
                              }
                            }
                          ],
                          "expression": {
                            "name": "base",
                            "nativeSrc": "8309:4:34",
                            "nodeType": "YulIdentifier",
                            "src": "8309:4:34"
                          },
                          "nativeSrc": "8302:277:34",
                          "nodeType": "YulSwitch",
                          "src": "8302:277:34"
                        },
                        {
                          "body": {
                            "nativeSrc": "8711:123:34",
                            "nodeType": "YulBlock",
                            "src": "8711:123:34",
                            "statements": [
                              {
                                "nativeSrc": "8725:28:34",
                                "nodeType": "YulAssignment",
                                "src": "8725:28:34",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nativeSrc": "8738:4:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "8738:4:34"
                                    },
                                    {
                                      "name": "exponent",
                                      "nativeSrc": "8744:8:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "8744:8:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "exp",
                                    "nativeSrc": "8734:3:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "8734:3:34"
                                  },
                                  "nativeSrc": "8734:19:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "8734:19:34"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nativeSrc": "8725:5:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "8725:5:34"
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nativeSrc": "8784:22:34",
                                  "nodeType": "YulBlock",
                                  "src": "8784:22:34",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [],
                                        "functionName": {
                                          "name": "panic_error_0x11",
                                          "nativeSrc": "8786:16:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "8786:16:34"
                                        },
                                        "nativeSrc": "8786:18:34",
                                        "nodeType": "YulFunctionCall",
                                        "src": "8786:18:34"
                                      },
                                      "nativeSrc": "8786:18:34",
                                      "nodeType": "YulExpressionStatement",
                                      "src": "8786:18:34"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "power",
                                      "nativeSrc": "8772:5:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "8772:5:34"
                                    },
                                    {
                                      "name": "max",
                                      "nativeSrc": "8779:3:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "8779:3:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nativeSrc": "8769:2:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "8769:2:34"
                                  },
                                  "nativeSrc": "8769:14:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "8769:14:34"
                                },
                                "nativeSrc": "8766:40:34",
                                "nodeType": "YulIf",
                                "src": "8766:40:34"
                              },
                              {
                                "nativeSrc": "8819:5:34",
                                "nodeType": "YulLeave",
                                "src": "8819:5:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "base",
                                        "nativeSrc": "8614:4:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "8614:4:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8620:2:34",
                                        "nodeType": "YulLiteral",
                                        "src": "8620:2:34",
                                        "type": "",
                                        "value": "11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nativeSrc": "8611:2:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "8611:2:34"
                                    },
                                    "nativeSrc": "8611:12:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8611:12:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "exponent",
                                        "nativeSrc": "8628:8:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "8628:8:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8638:2:34",
                                        "nodeType": "YulLiteral",
                                        "src": "8638:2:34",
                                        "type": "",
                                        "value": "78"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nativeSrc": "8625:2:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "8625:2:34"
                                    },
                                    "nativeSrc": "8625:16:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8625:16:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "8607:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "8607:3:34"
                                },
                                "nativeSrc": "8607:35:34",
                                "nodeType": "YulFunctionCall",
                                "src": "8607:35:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "base",
                                        "nativeSrc": "8663:4:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "8663:4:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8669:3:34",
                                        "nodeType": "YulLiteral",
                                        "src": "8669:3:34",
                                        "type": "",
                                        "value": "307"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nativeSrc": "8660:2:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "8660:2:34"
                                    },
                                    "nativeSrc": "8660:13:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8660:13:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "exponent",
                                        "nativeSrc": "8678:8:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "8678:8:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8688:2:34",
                                        "nodeType": "YulLiteral",
                                        "src": "8688:2:34",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nativeSrc": "8675:2:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "8675:2:34"
                                    },
                                    "nativeSrc": "8675:16:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8675:16:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "8656:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "8656:3:34"
                                },
                                "nativeSrc": "8656:36:34",
                                "nodeType": "YulFunctionCall",
                                "src": "8656:36:34"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nativeSrc": "8591:2:34",
                              "nodeType": "YulIdentifier",
                              "src": "8591:2:34"
                            },
                            "nativeSrc": "8591:111:34",
                            "nodeType": "YulFunctionCall",
                            "src": "8591:111:34"
                          },
                          "nativeSrc": "8588:246:34",
                          "nodeType": "YulIf",
                          "src": "8588:246:34"
                        },
                        {
                          "nativeSrc": "8844:57:34",
                          "nodeType": "YulAssignment",
                          "src": "8844:57:34",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "8878:1:34",
                                "nodeType": "YulLiteral",
                                "src": "8878:1:34",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "base",
                                "nativeSrc": "8881:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "8881:4:34"
                              },
                              {
                                "name": "exponent",
                                "nativeSrc": "8887:8:34",
                                "nodeType": "YulIdentifier",
                                "src": "8887:8:34"
                              },
                              {
                                "name": "max",
                                "nativeSrc": "8897:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "8897:3:34"
                              }
                            ],
                            "functionName": {
                              "name": "checked_exp_helper",
                              "nativeSrc": "8859:18:34",
                              "nodeType": "YulIdentifier",
                              "src": "8859:18:34"
                            },
                            "nativeSrc": "8859:42:34",
                            "nodeType": "YulFunctionCall",
                            "src": "8859:42:34"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nativeSrc": "8844:5:34",
                              "nodeType": "YulIdentifier",
                              "src": "8844:5:34"
                            },
                            {
                              "name": "base",
                              "nativeSrc": "8851:4:34",
                              "nodeType": "YulIdentifier",
                              "src": "8851:4:34"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "8940:22:34",
                            "nodeType": "YulBlock",
                            "src": "8940:22:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nativeSrc": "8942:16:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "8942:16:34"
                                  },
                                  "nativeSrc": "8942:18:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "8942:18:34"
                                },
                                "nativeSrc": "8942:18:34",
                                "nodeType": "YulExpressionStatement",
                                "src": "8942:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "power",
                                "nativeSrc": "8917:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "8917:5:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "max",
                                    "nativeSrc": "8928:3:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "8928:3:34"
                                  },
                                  {
                                    "name": "base",
                                    "nativeSrc": "8933:4:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "8933:4:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nativeSrc": "8924:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "8924:3:34"
                                },
                                "nativeSrc": "8924:14:34",
                                "nodeType": "YulFunctionCall",
                                "src": "8924:14:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "8914:2:34",
                              "nodeType": "YulIdentifier",
                              "src": "8914:2:34"
                            },
                            "nativeSrc": "8914:25:34",
                            "nodeType": "YulFunctionCall",
                            "src": "8914:25:34"
                          },
                          "nativeSrc": "8911:51:34",
                          "nodeType": "YulIf",
                          "src": "8911:51:34"
                        },
                        {
                          "nativeSrc": "8971:25:34",
                          "nodeType": "YulAssignment",
                          "src": "8971:25:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "power",
                                "nativeSrc": "8984:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "8984:5:34"
                              },
                              {
                                "name": "base",
                                "nativeSrc": "8991:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "8991:4:34"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nativeSrc": "8980:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "8980:3:34"
                            },
                            "nativeSrc": "8980:16:34",
                            "nodeType": "YulFunctionCall",
                            "src": "8980:16:34"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nativeSrc": "8971:5:34",
                              "nodeType": "YulIdentifier",
                              "src": "8971:5:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_exp_unsigned",
                    "nativeSrc": "7929:1073:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base",
                        "nativeSrc": "7959:4:34",
                        "nodeType": "YulTypedName",
                        "src": "7959:4:34",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nativeSrc": "7965:8:34",
                        "nodeType": "YulTypedName",
                        "src": "7965:8:34",
                        "type": ""
                      },
                      {
                        "name": "max",
                        "nativeSrc": "7975:3:34",
                        "nodeType": "YulTypedName",
                        "src": "7975:3:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nativeSrc": "7983:5:34",
                        "nodeType": "YulTypedName",
                        "src": "7983:5:34",
                        "type": ""
                      }
                    ],
                    "src": "7929:1073:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "9051:43:34",
                      "nodeType": "YulBlock",
                      "src": "9051:43:34",
                      "statements": [
                        {
                          "nativeSrc": "9061:27:34",
                          "nodeType": "YulAssignment",
                          "src": "9061:27:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "9076:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "9076:5:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "9083:4:34",
                                "nodeType": "YulLiteral",
                                "src": "9083:4:34",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "9072:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "9072:3:34"
                            },
                            "nativeSrc": "9072:16:34",
                            "nodeType": "YulFunctionCall",
                            "src": "9072:16:34"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "9061:7:34",
                              "nodeType": "YulIdentifier",
                              "src": "9061:7:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint8",
                    "nativeSrc": "9008:86:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "9033:5:34",
                        "nodeType": "YulTypedName",
                        "src": "9033:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "9043:7:34",
                        "nodeType": "YulTypedName",
                        "src": "9043:7:34",
                        "type": ""
                      }
                    ],
                    "src": "9008:86:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "9164:217:34",
                      "nodeType": "YulBlock",
                      "src": "9164:217:34",
                      "statements": [
                        {
                          "nativeSrc": "9174:31:34",
                          "nodeType": "YulAssignment",
                          "src": "9174:31:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "base",
                                "nativeSrc": "9200:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "9200:4:34"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nativeSrc": "9182:17:34",
                              "nodeType": "YulIdentifier",
                              "src": "9182:17:34"
                            },
                            "nativeSrc": "9182:23:34",
                            "nodeType": "YulFunctionCall",
                            "src": "9182:23:34"
                          },
                          "variableNames": [
                            {
                              "name": "base",
                              "nativeSrc": "9174:4:34",
                              "nodeType": "YulIdentifier",
                              "src": "9174:4:34"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "9214:37:34",
                          "nodeType": "YulAssignment",
                          "src": "9214:37:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "exponent",
                                "nativeSrc": "9242:8:34",
                                "nodeType": "YulIdentifier",
                                "src": "9242:8:34"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint8",
                              "nativeSrc": "9226:15:34",
                              "nodeType": "YulIdentifier",
                              "src": "9226:15:34"
                            },
                            "nativeSrc": "9226:25:34",
                            "nodeType": "YulFunctionCall",
                            "src": "9226:25:34"
                          },
                          "variableNames": [
                            {
                              "name": "exponent",
                              "nativeSrc": "9214:8:34",
                              "nodeType": "YulIdentifier",
                              "src": "9214:8:34"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "9261:113:34",
                          "nodeType": "YulAssignment",
                          "src": "9261:113:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "base",
                                "nativeSrc": "9291:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "9291:4:34"
                              },
                              {
                                "name": "exponent",
                                "nativeSrc": "9297:8:34",
                                "nodeType": "YulIdentifier",
                                "src": "9297:8:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "9307:66:34",
                                "nodeType": "YulLiteral",
                                "src": "9307:66:34",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "checked_exp_unsigned",
                              "nativeSrc": "9270:20:34",
                              "nodeType": "YulIdentifier",
                              "src": "9270:20:34"
                            },
                            "nativeSrc": "9270:104:34",
                            "nodeType": "YulFunctionCall",
                            "src": "9270:104:34"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nativeSrc": "9261:5:34",
                              "nodeType": "YulIdentifier",
                              "src": "9261:5:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_exp_t_uint256_t_uint8",
                    "nativeSrc": "9100:281:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base",
                        "nativeSrc": "9139:4:34",
                        "nodeType": "YulTypedName",
                        "src": "9139:4:34",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nativeSrc": "9145:8:34",
                        "nodeType": "YulTypedName",
                        "src": "9145:8:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nativeSrc": "9158:5:34",
                        "nodeType": "YulTypedName",
                        "src": "9158:5:34",
                        "type": ""
                      }
                    ],
                    "src": "9100:281:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "9435:362:34",
                      "nodeType": "YulBlock",
                      "src": "9435:362:34",
                      "statements": [
                        {
                          "nativeSrc": "9445:25:34",
                          "nodeType": "YulAssignment",
                          "src": "9445:25:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nativeSrc": "9468:1:34",
                                "nodeType": "YulIdentifier",
                                "src": "9468:1:34"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nativeSrc": "9450:17:34",
                              "nodeType": "YulIdentifier",
                              "src": "9450:17:34"
                            },
                            "nativeSrc": "9450:20:34",
                            "nodeType": "YulFunctionCall",
                            "src": "9450:20:34"
                          },
                          "variableNames": [
                            {
                              "name": "x",
                              "nativeSrc": "9445:1:34",
                              "nodeType": "YulIdentifier",
                              "src": "9445:1:34"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "9479:25:34",
                          "nodeType": "YulAssignment",
                          "src": "9479:25:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nativeSrc": "9502:1:34",
                                "nodeType": "YulIdentifier",
                                "src": "9502:1:34"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nativeSrc": "9484:17:34",
                              "nodeType": "YulIdentifier",
                              "src": "9484:17:34"
                            },
                            "nativeSrc": "9484:20:34",
                            "nodeType": "YulFunctionCall",
                            "src": "9484:20:34"
                          },
                          "variableNames": [
                            {
                              "name": "y",
                              "nativeSrc": "9479:1:34",
                              "nodeType": "YulIdentifier",
                              "src": "9479:1:34"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "9513:28:34",
                          "nodeType": "YulVariableDeclaration",
                          "src": "9513:28:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nativeSrc": "9536:1:34",
                                "nodeType": "YulIdentifier",
                                "src": "9536:1:34"
                              },
                              {
                                "name": "y",
                                "nativeSrc": "9539:1:34",
                                "nodeType": "YulIdentifier",
                                "src": "9539:1:34"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nativeSrc": "9532:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "9532:3:34"
                            },
                            "nativeSrc": "9532:9:34",
                            "nodeType": "YulFunctionCall",
                            "src": "9532:9:34"
                          },
                          "variables": [
                            {
                              "name": "product_raw",
                              "nativeSrc": "9517:11:34",
                              "nodeType": "YulTypedName",
                              "src": "9517:11:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "9550:41:34",
                          "nodeType": "YulAssignment",
                          "src": "9550:41:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "product_raw",
                                "nativeSrc": "9579:11:34",
                                "nodeType": "YulIdentifier",
                                "src": "9579:11:34"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nativeSrc": "9561:17:34",
                              "nodeType": "YulIdentifier",
                              "src": "9561:17:34"
                            },
                            "nativeSrc": "9561:30:34",
                            "nodeType": "YulFunctionCall",
                            "src": "9561:30:34"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nativeSrc": "9550:7:34",
                              "nodeType": "YulIdentifier",
                              "src": "9550:7:34"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "9768:22:34",
                            "nodeType": "YulBlock",
                            "src": "9768:22:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nativeSrc": "9770:16:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "9770:16:34"
                                  },
                                  "nativeSrc": "9770:18:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "9770:18:34"
                                },
                                "nativeSrc": "9770:18:34",
                                "nodeType": "YulExpressionStatement",
                                "src": "9770:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nativeSrc": "9701:1:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "9701:1:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nativeSrc": "9694:6:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "9694:6:34"
                                    },
                                    "nativeSrc": "9694:9:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9694:9:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nativeSrc": "9724:1:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "9724:1:34"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "product",
                                            "nativeSrc": "9731:7:34",
                                            "nodeType": "YulIdentifier",
                                            "src": "9731:7:34"
                                          },
                                          {
                                            "name": "x",
                                            "nativeSrc": "9740:1:34",
                                            "nodeType": "YulIdentifier",
                                            "src": "9740:1:34"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "div",
                                          "nativeSrc": "9727:3:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "9727:3:34"
                                        },
                                        "nativeSrc": "9727:15:34",
                                        "nodeType": "YulFunctionCall",
                                        "src": "9727:15:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nativeSrc": "9721:2:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "9721:2:34"
                                    },
                                    "nativeSrc": "9721:22:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9721:22:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nativeSrc": "9674:2:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "9674:2:34"
                                },
                                "nativeSrc": "9674:83:34",
                                "nodeType": "YulFunctionCall",
                                "src": "9674:83:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "9654:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "9654:6:34"
                            },
                            "nativeSrc": "9654:113:34",
                            "nodeType": "YulFunctionCall",
                            "src": "9654:113:34"
                          },
                          "nativeSrc": "9651:139:34",
                          "nodeType": "YulIf",
                          "src": "9651:139:34"
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nativeSrc": "9387:410:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nativeSrc": "9418:1:34",
                        "nodeType": "YulTypedName",
                        "src": "9418:1:34",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nativeSrc": "9421:1:34",
                        "nodeType": "YulTypedName",
                        "src": "9421:1:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nativeSrc": "9427:7:34",
                        "nodeType": "YulTypedName",
                        "src": "9427:7:34",
                        "type": ""
                      }
                    ],
                    "src": "9387:410:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "9847:147:34",
                      "nodeType": "YulBlock",
                      "src": "9847:147:34",
                      "statements": [
                        {
                          "nativeSrc": "9857:25:34",
                          "nodeType": "YulAssignment",
                          "src": "9857:25:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nativeSrc": "9880:1:34",
                                "nodeType": "YulIdentifier",
                                "src": "9880:1:34"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nativeSrc": "9862:17:34",
                              "nodeType": "YulIdentifier",
                              "src": "9862:17:34"
                            },
                            "nativeSrc": "9862:20:34",
                            "nodeType": "YulFunctionCall",
                            "src": "9862:20:34"
                          },
                          "variableNames": [
                            {
                              "name": "x",
                              "nativeSrc": "9857:1:34",
                              "nodeType": "YulIdentifier",
                              "src": "9857:1:34"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "9891:25:34",
                          "nodeType": "YulAssignment",
                          "src": "9891:25:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nativeSrc": "9914:1:34",
                                "nodeType": "YulIdentifier",
                                "src": "9914:1:34"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nativeSrc": "9896:17:34",
                              "nodeType": "YulIdentifier",
                              "src": "9896:17:34"
                            },
                            "nativeSrc": "9896:20:34",
                            "nodeType": "YulFunctionCall",
                            "src": "9896:20:34"
                          },
                          "variableNames": [
                            {
                              "name": "y",
                              "nativeSrc": "9891:1:34",
                              "nodeType": "YulIdentifier",
                              "src": "9891:1:34"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "9925:16:34",
                          "nodeType": "YulAssignment",
                          "src": "9925:16:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nativeSrc": "9936:1:34",
                                "nodeType": "YulIdentifier",
                                "src": "9936:1:34"
                              },
                              {
                                "name": "y",
                                "nativeSrc": "9939:1:34",
                                "nodeType": "YulIdentifier",
                                "src": "9939:1:34"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "9932:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "9932:3:34"
                            },
                            "nativeSrc": "9932:9:34",
                            "nodeType": "YulFunctionCall",
                            "src": "9932:9:34"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nativeSrc": "9925:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "9925:3:34"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "9965:22:34",
                            "nodeType": "YulBlock",
                            "src": "9965:22:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nativeSrc": "9967:16:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "9967:16:34"
                                  },
                                  "nativeSrc": "9967:18:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "9967:18:34"
                                },
                                "nativeSrc": "9967:18:34",
                                "nodeType": "YulExpressionStatement",
                                "src": "9967:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nativeSrc": "9957:1:34",
                                "nodeType": "YulIdentifier",
                                "src": "9957:1:34"
                              },
                              {
                                "name": "sum",
                                "nativeSrc": "9960:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "9960:3:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "9954:2:34",
                              "nodeType": "YulIdentifier",
                              "src": "9954:2:34"
                            },
                            "nativeSrc": "9954:10:34",
                            "nodeType": "YulFunctionCall",
                            "src": "9954:10:34"
                          },
                          "nativeSrc": "9951:36:34",
                          "nodeType": "YulIf",
                          "src": "9951:36:34"
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nativeSrc": "9803:191:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nativeSrc": "9834:1:34",
                        "nodeType": "YulTypedName",
                        "src": "9834:1:34",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nativeSrc": "9837:1:34",
                        "nodeType": "YulTypedName",
                        "src": "9837:1:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nativeSrc": "9843:3:34",
                        "nodeType": "YulTypedName",
                        "src": "9843:3:34",
                        "type": ""
                      }
                    ],
                    "src": "9803:191:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "10065:53:34",
                      "nodeType": "YulBlock",
                      "src": "10065:53:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "10082:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "10082:3:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "10105:5:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "10105:5:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint256",
                                  "nativeSrc": "10087:17:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "10087:17:34"
                                },
                                "nativeSrc": "10087:24:34",
                                "nodeType": "YulFunctionCall",
                                "src": "10087:24:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "10075:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "10075:6:34"
                            },
                            "nativeSrc": "10075:37:34",
                            "nodeType": "YulFunctionCall",
                            "src": "10075:37:34"
                          },
                          "nativeSrc": "10075:37:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "10075:37:34"
                        }
                      ]
                    },
                    "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                    "nativeSrc": "10000:118:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "10053:5:34",
                        "nodeType": "YulTypedName",
                        "src": "10053:5:34",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "10060:3:34",
                        "nodeType": "YulTypedName",
                        "src": "10060:3:34",
                        "type": ""
                      }
                    ],
                    "src": "10000:118:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "10278:288:34",
                      "nodeType": "YulBlock",
                      "src": "10278:288:34",
                      "statements": [
                        {
                          "nativeSrc": "10288:26:34",
                          "nodeType": "YulAssignment",
                          "src": "10288:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "10300:9:34",
                                "nodeType": "YulIdentifier",
                                "src": "10300:9:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "10311:2:34",
                                "nodeType": "YulLiteral",
                                "src": "10311:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "10296:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "10296:3:34"
                            },
                            "nativeSrc": "10296:18:34",
                            "nodeType": "YulFunctionCall",
                            "src": "10296:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "10288:4:34",
                              "nodeType": "YulIdentifier",
                              "src": "10288:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "10368:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "10368:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "10381:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "10381:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10392:1:34",
                                    "nodeType": "YulLiteral",
                                    "src": "10392:1:34",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "10377:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "10377:3:34"
                                },
                                "nativeSrc": "10377:17:34",
                                "nodeType": "YulFunctionCall",
                                "src": "10377:17:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "10324:43:34",
                              "nodeType": "YulIdentifier",
                              "src": "10324:43:34"
                            },
                            "nativeSrc": "10324:71:34",
                            "nodeType": "YulFunctionCall",
                            "src": "10324:71:34"
                          },
                          "nativeSrc": "10324:71:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "10324:71:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nativeSrc": "10449:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "10449:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "10462:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "10462:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10473:2:34",
                                    "nodeType": "YulLiteral",
                                    "src": "10473:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "10458:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "10458:3:34"
                                },
                                "nativeSrc": "10458:18:34",
                                "nodeType": "YulFunctionCall",
                                "src": "10458:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nativeSrc": "10405:43:34",
                              "nodeType": "YulIdentifier",
                              "src": "10405:43:34"
                            },
                            "nativeSrc": "10405:72:34",
                            "nodeType": "YulFunctionCall",
                            "src": "10405:72:34"
                          },
                          "nativeSrc": "10405:72:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "10405:72:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nativeSrc": "10531:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "10531:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "10544:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "10544:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10555:2:34",
                                    "nodeType": "YulLiteral",
                                    "src": "10555:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "10540:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "10540:3:34"
                                },
                                "nativeSrc": "10540:18:34",
                                "nodeType": "YulFunctionCall",
                                "src": "10540:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nativeSrc": "10487:43:34",
                              "nodeType": "YulIdentifier",
                              "src": "10487:43:34"
                            },
                            "nativeSrc": "10487:72:34",
                            "nodeType": "YulFunctionCall",
                            "src": "10487:72:34"
                          },
                          "nativeSrc": "10487:72:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "10487:72:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
                    "nativeSrc": "10124:442:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "10234:9:34",
                        "nodeType": "YulTypedName",
                        "src": "10234:9:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "10246:6:34",
                        "nodeType": "YulTypedName",
                        "src": "10246:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "10254:6:34",
                        "nodeType": "YulTypedName",
                        "src": "10254:6:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "10262:6:34",
                        "nodeType": "YulTypedName",
                        "src": "10262:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "10273:4:34",
                        "nodeType": "YulTypedName",
                        "src": "10273:4:34",
                        "type": ""
                      }
                    ],
                    "src": "10124:442:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "10670:124:34",
                      "nodeType": "YulBlock",
                      "src": "10670:124:34",
                      "statements": [
                        {
                          "nativeSrc": "10680:26:34",
                          "nodeType": "YulAssignment",
                          "src": "10680:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "10692:9:34",
                                "nodeType": "YulIdentifier",
                                "src": "10692:9:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "10703:2:34",
                                "nodeType": "YulLiteral",
                                "src": "10703:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "10688:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "10688:3:34"
                            },
                            "nativeSrc": "10688:18:34",
                            "nodeType": "YulFunctionCall",
                            "src": "10688:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "10680:4:34",
                              "nodeType": "YulIdentifier",
                              "src": "10680:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "10760:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "10760:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "10773:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "10773:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10784:1:34",
                                    "nodeType": "YulLiteral",
                                    "src": "10784:1:34",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "10769:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "10769:3:34"
                                },
                                "nativeSrc": "10769:17:34",
                                "nodeType": "YulFunctionCall",
                                "src": "10769:17:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nativeSrc": "10716:43:34",
                              "nodeType": "YulIdentifier",
                              "src": "10716:43:34"
                            },
                            "nativeSrc": "10716:71:34",
                            "nodeType": "YulFunctionCall",
                            "src": "10716:71:34"
                          },
                          "nativeSrc": "10716:71:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "10716:71:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nativeSrc": "10572:222:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "10642:9:34",
                        "nodeType": "YulTypedName",
                        "src": "10642:9:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "10654:6:34",
                        "nodeType": "YulTypedName",
                        "src": "10654:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "10665:4:34",
                        "nodeType": "YulTypedName",
                        "src": "10665:4:34",
                        "type": ""
                      }
                    ],
                    "src": "10572:222:34"
                  }
                ]
              },
              "contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function shift_right_1_unsigned(value) -> newValue {\n        newValue :=\n\n        shr(1, value)\n\n    }\n\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base {\n        power := _power\n        base  := _base\n        for { } gt(exponent, 1) {}\n        {\n            // overflow check for base * base\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1)\n            {\n                // No checks for power := mul(power, base) needed, because the check\n                // for base * base above is sufficient, since:\n                // |power| <= base (proof by induction) and thus:\n                // |power * base| <= base * base <= max <= |min| (for signed)\n                // (this is equally true for signed and unsigned exp)\n                power := mul(power, base)\n            }\n            base := mul(base, base)\n            exponent := shift_right_1_unsigned(exponent)\n        }\n    }\n\n    function checked_exp_unsigned(base, exponent, max) -> power {\n        // This function currently cannot be inlined because of the\n        // \"leave\" statements. We have to improve the optimizer.\n\n        // Note that 0**0 == 1\n        if iszero(exponent) { power := 1 leave }\n        if iszero(base) { power := 0 leave }\n\n        // Specializations for small bases\n        switch base\n        // 0 is handled above\n        case 1 { power := 1 leave }\n        case 2\n        {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := exp(2, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(\n            and(lt(base, 11), lt(exponent, 78)),\n            and(lt(base, 307), lt(exponent, 32))\n        )\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n\n        power, base := checked_exp_helper(1, base, exponent, max)\n\n        if gt(power, div(max, base)) { panic_error_0x11() }\n        power := mul(power, base)\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power {\n        base := cleanup_t_uint256(base)\n        exponent := cleanup_t_uint8(exponent)\n\n        power := checked_exp_unsigned(base, exponent, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n",
              "id": 34,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50604051611d13380380611d138339818101604052810190610032919061055f565b806040518060400160405280600981526020017f42617365546f6b656e00000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f424153450000000000000000000000000000000000000000000000000000000081525081600390816100ae91906107dc565b5080600490816100be91906107dc565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101335760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161012a91906108bd565b60405180910390fd5b6101428161018060201b60201c565b5061017a3361015561024660201b60201c565b600a6101619190610a47565b620f424061016f9190610a92565b61024f60201b60201c565b50610b69565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006012905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036102c15760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016102b891906108bd565b60405180910390fd5b6102d3600083836102d760201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361032957806002600082825461031d9190610ad4565b925050819055506103fc565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156103b5578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016103ac93929190610b17565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036104455780600260008282540392505081905550610492565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516104ef9190610b4e565b60405180910390a3505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061052c82610501565b9050919050565b61053c81610521565b811461054757600080fd5b50565b60008151905061055981610533565b92915050565b600060208284031215610575576105746104fc565b5b60006105838482850161054a565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061060d57607f821691505b6020821081036106205761061f6105c6565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261064b565b610692868361064b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006106d96106d46106cf846106aa565b6106b4565b6106aa565b9050919050565b6000819050919050565b6106f3836106be565b6107076106ff826106e0565b848454610658565b825550505050565b600090565b61071c61070f565b6107278184846106ea565b505050565b5b8181101561074b57610740600082610714565b60018101905061072d565b5050565b601f8211156107905761076181610626565b61076a8461063b565b81016020851015610779578190505b61078d6107858561063b565b83018261072c565b50505b505050565b600082821c905092915050565b60006107b360001984600802610795565b1980831691505092915050565b60006107cc83836107a2565b9150826002028217905092915050565b6107e58261058c565b67ffffffffffffffff8111156107fe576107fd610597565b5b61080882546105f5565b61081382828561074f565b600060209050601f8311600181146108465760008415610834578287015190505b61083e85826107c0565b8655506108a6565b601f19841661085486610626565b60005b8281101561087c57848901518255600182019150602085019450602081019050610857565b868310156108995784890151610895601f8916826107a2565b8355505b6001600288020188555050505b505050505050565b6108b781610521565b82525050565b60006020820190506108d260008301846108ae565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b600185111561095e5780860481111561093a576109396108d8565b5b60018516156109495780820291505b808102905061095785610907565b945061091e565b94509492505050565b6000826109775760019050610a33565b816109855760009050610a33565b816001811461099b57600281146109a5576109d4565b6001915050610a33565b60ff8411156109b7576109b66108d8565b5b8360020a9150848211156109ce576109cd6108d8565b5b50610a33565b5060208310610133831016604e8410600b8410161715610a095782820a905083811115610a0457610a036108d8565b5b610a33565b610a168484846001610914565b92509050818404811115610a2d57610a2c6108d8565b5b81810290505b9392505050565b600060ff82169050919050565b6000610a52826106aa565b9150610a5d83610a3a565b9250610a8a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610967565b905092915050565b6000610a9d826106aa565b9150610aa8836106aa565b9250828202610ab6816106aa565b91508282048414831517610acd57610acc6108d8565b5b5092915050565b6000610adf826106aa565b9150610aea836106aa565b9250828201905080821115610b0257610b016108d8565b5b92915050565b610b11816106aa565b82525050565b6000606082019050610b2c60008301866108ae565b610b396020830185610b08565b610b466040830184610b08565b949350505050565b6000602082019050610b636000830184610b08565b92915050565b61119b80610b786000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806370a082311161008c57806395d89b411161006657806395d89b4114610202578063a9059cbb14610220578063dd62ed3e14610250578063f2fde38b14610280576100cf565b806370a08231146101aa578063715018a6146101da5780638da5cb5b146101e4576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce5671461017057806340c10f191461018e575b600080fd5b6100dc61029c565b6040516100e99190610def565b60405180910390f35b61010c60048036038101906101079190610eaa565b61032e565b6040516101199190610f05565b60405180910390f35b61012a610351565b6040516101379190610f2f565b60405180910390f35b61015a60048036038101906101559190610f4a565b61035b565b6040516101679190610f05565b60405180910390f35b61017861038a565b6040516101859190610fb9565b60405180910390f35b6101a860048036038101906101a39190610eaa565b610393565b005b6101c460048036038101906101bf9190610fd4565b6103a9565b6040516101d19190610f2f565b60405180910390f35b6101e26103f1565b005b6101ec610405565b6040516101f99190611010565b60405180910390f35b61020a61042f565b6040516102179190610def565b60405180910390f35b61023a60048036038101906102359190610eaa565b6104c1565b6040516102479190610f05565b60405180910390f35b61026a6004803603810190610265919061102b565b6104e4565b6040516102779190610f2f565b60405180910390f35b61029a60048036038101906102959190610fd4565b61056b565b005b6060600380546102ab9061109a565b80601f01602080910402602001604051908101604052809291908181526020018280546102d79061109a565b80156103245780601f106102f957610100808354040283529160200191610324565b820191906000526020600020905b81548152906001019060200180831161030757829003601f168201915b5050505050905090565b6000806103396105f1565b90506103468185856105f9565b600191505092915050565b6000600254905090565b6000806103666105f1565b905061037385828561060b565b61037e8585856106a0565b60019150509392505050565b60006012905090565b61039b610794565b6103a5828261081b565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6103f9610794565b610403600061089d565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461043e9061109a565b80601f016020809104026020016040519081016040528092919081815260200182805461046a9061109a565b80156104b75780601f1061048c576101008083540402835291602001916104b7565b820191906000526020600020905b81548152906001019060200180831161049a57829003601f168201915b5050505050905090565b6000806104cc6105f1565b90506104d98185856106a0565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610573610794565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105e55760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016105dc9190611010565b60405180910390fd5b6105ee8161089d565b50565b600033905090565b6106068383836001610963565b505050565b600061061784846104e4565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81101561069a578181101561068a578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610681939291906110cb565b60405180910390fd5b61069984848484036000610963565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107125760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016107099190611010565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107845760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161077b9190611010565b60405180910390fd5b61078f838383610b3a565b505050565b61079c6105f1565b73ffffffffffffffffffffffffffffffffffffffff166107ba610405565b73ffffffffffffffffffffffffffffffffffffffff1614610819576107dd6105f1565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108109190611010565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361088d5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016108849190611010565b60405180910390fd5b61089960008383610b3a565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036109d55760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016109cc9190611010565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a475760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610a3e9190611010565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610b34578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610b2b9190610f2f565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b8c578060026000828254610b809190611131565b92505081905550610c5f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c18578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610c0f939291906110cb565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ca85780600260008282540392505081905550610cf5565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d529190610f2f565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d99578082015181840152602081019050610d7e565b60008484015250505050565b6000601f19601f8301169050919050565b6000610dc182610d5f565b610dcb8185610d6a565b9350610ddb818560208601610d7b565b610de481610da5565b840191505092915050565b60006020820190508181036000830152610e098184610db6565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e4182610e16565b9050919050565b610e5181610e36565b8114610e5c57600080fd5b50565b600081359050610e6e81610e48565b92915050565b6000819050919050565b610e8781610e74565b8114610e9257600080fd5b50565b600081359050610ea481610e7e565b92915050565b60008060408385031215610ec157610ec0610e11565b5b6000610ecf85828601610e5f565b9250506020610ee085828601610e95565b9150509250929050565b60008115159050919050565b610eff81610eea565b82525050565b6000602082019050610f1a6000830184610ef6565b92915050565b610f2981610e74565b82525050565b6000602082019050610f446000830184610f20565b92915050565b600080600060608486031215610f6357610f62610e11565b5b6000610f7186828701610e5f565b9350506020610f8286828701610e5f565b9250506040610f9386828701610e95565b9150509250925092565b600060ff82169050919050565b610fb381610f9d565b82525050565b6000602082019050610fce6000830184610faa565b92915050565b600060208284031215610fea57610fe9610e11565b5b6000610ff884828501610e5f565b91505092915050565b61100a81610e36565b82525050565b60006020820190506110256000830184611001565b92915050565b6000806040838503121561104257611041610e11565b5b600061105085828601610e5f565b925050602061106185828601610e5f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806110b257607f821691505b6020821081036110c5576110c461106b565b5b50919050565b60006060820190506110e06000830186611001565b6110ed6020830185610f20565b6110fa6040830184610f20565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061113c82610e74565b915061114783610e74565b925082820190508082111561115f5761115e611102565b5b9291505056fea2646970667358221220ba6e1025bd3915ea9ad7d7a9d93e541077ba1b0424f0c1c19384a020bcc30d9764736f6c634300081c0033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1D13 CODESIZE SUB DUP1 PUSH2 0x1D13 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x55F JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x42617365546F6B656E0000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4241534500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH2 0xAE SWAP2 SWAP1 PUSH2 0x7DC JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP2 PUSH2 0xBE SWAP2 SWAP1 PUSH2 0x7DC JUMP JUMPDEST POP POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x133 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0x8BD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x142 DUP2 PUSH2 0x180 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH2 0x17A CALLER PUSH2 0x155 PUSH2 0x246 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0xA PUSH2 0x161 SWAP2 SWAP1 PUSH2 0xA47 JUMP JUMPDEST PUSH3 0xF4240 PUSH2 0x16F SWAP2 SWAP1 PUSH2 0xA92 JUMP JUMPDEST PUSH2 0x24F PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH2 0xB69 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2C1 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B8 SWAP2 SWAP1 PUSH2 0x8BD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2D3 PUSH1 0x0 DUP4 DUP4 PUSH2 0x2D7 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x329 JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x31D SWAP2 SWAP1 PUSH2 0xAD4 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x3FC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x3B5 JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3AC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x445 JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x492 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x4EF SWAP2 SWAP1 PUSH2 0xB4E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x52C DUP3 PUSH2 0x501 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x53C DUP2 PUSH2 0x521 JUMP JUMPDEST DUP2 EQ PUSH2 0x547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x559 DUP2 PUSH2 0x533 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x575 JUMPI PUSH2 0x574 PUSH2 0x4FC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x583 DUP5 DUP3 DUP6 ADD PUSH2 0x54A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x60D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x620 JUMPI PUSH2 0x61F PUSH2 0x5C6 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x688 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x64B JUMP JUMPDEST PUSH2 0x692 DUP7 DUP4 PUSH2 0x64B JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6D9 PUSH2 0x6D4 PUSH2 0x6CF DUP5 PUSH2 0x6AA JUMP JUMPDEST PUSH2 0x6B4 JUMP JUMPDEST PUSH2 0x6AA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6F3 DUP4 PUSH2 0x6BE JUMP JUMPDEST PUSH2 0x707 PUSH2 0x6FF DUP3 PUSH2 0x6E0 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x658 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x71C PUSH2 0x70F JUMP JUMPDEST PUSH2 0x727 DUP2 DUP5 DUP5 PUSH2 0x6EA JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x74B JUMPI PUSH2 0x740 PUSH1 0x0 DUP3 PUSH2 0x714 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x72D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x790 JUMPI PUSH2 0x761 DUP2 PUSH2 0x626 JUMP JUMPDEST PUSH2 0x76A DUP5 PUSH2 0x63B JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x779 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x78D PUSH2 0x785 DUP6 PUSH2 0x63B JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x72C JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7B3 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x795 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7CC DUP4 DUP4 PUSH2 0x7A2 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x7E5 DUP3 PUSH2 0x58C JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7FE JUMPI PUSH2 0x7FD PUSH2 0x597 JUMP JUMPDEST JUMPDEST PUSH2 0x808 DUP3 SLOAD PUSH2 0x5F5 JUMP JUMPDEST PUSH2 0x813 DUP3 DUP3 DUP6 PUSH2 0x74F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x846 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x834 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x83E DUP6 DUP3 PUSH2 0x7C0 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x8A6 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x854 DUP7 PUSH2 0x626 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x87C JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x857 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x899 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x895 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x7A2 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x8B7 DUP2 PUSH2 0x521 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8D2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8AE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0x95E JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0x93A JUMPI PUSH2 0x939 PUSH2 0x8D8 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x949 JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0x957 DUP6 PUSH2 0x907 JUMP JUMPDEST SWAP5 POP PUSH2 0x91E JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x977 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0xA33 JUMP JUMPDEST DUP2 PUSH2 0x985 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0xA33 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x99B JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x9A5 JUMPI PUSH2 0x9D4 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xA33 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x9B7 JUMPI PUSH2 0x9B6 PUSH2 0x8D8 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x9CE JUMPI PUSH2 0x9CD PUSH2 0x8D8 JUMP JUMPDEST JUMPDEST POP PUSH2 0xA33 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xA09 JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0xA04 JUMPI PUSH2 0xA03 PUSH2 0x8D8 JUMP JUMPDEST JUMPDEST PUSH2 0xA33 JUMP JUMPDEST PUSH2 0xA16 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x914 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0xA2D JUMPI PUSH2 0xA2C PUSH2 0x8D8 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA52 DUP3 PUSH2 0x6AA JUMP JUMPDEST SWAP2 POP PUSH2 0xA5D DUP4 PUSH2 0xA3A JUMP JUMPDEST SWAP3 POP PUSH2 0xA8A PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0x967 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA9D DUP3 PUSH2 0x6AA JUMP JUMPDEST SWAP2 POP PUSH2 0xAA8 DUP4 PUSH2 0x6AA JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xAB6 DUP2 PUSH2 0x6AA JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xACD JUMPI PUSH2 0xACC PUSH2 0x8D8 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADF DUP3 PUSH2 0x6AA JUMP JUMPDEST SWAP2 POP PUSH2 0xAEA DUP4 PUSH2 0x6AA JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xB02 JUMPI PUSH2 0xB01 PUSH2 0x8D8 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xB11 DUP2 PUSH2 0x6AA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xB2C PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x8AE JUMP JUMPDEST PUSH2 0xB39 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xB08 JUMP JUMPDEST PUSH2 0xB46 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xB08 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB63 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB08 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x119B DUP1 PUSH2 0xB78 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x280 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1DA JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E4 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x18E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x29C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0xDEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x107 SWAP2 SWAP1 PUSH2 0xEAA JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0xF05 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12A PUSH2 0x351 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x137 SWAP2 SWAP1 PUSH2 0xF2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x155 SWAP2 SWAP1 PUSH2 0xF4A JUMP JUMPDEST PUSH2 0x35B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x167 SWAP2 SWAP1 PUSH2 0xF05 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x178 PUSH2 0x38A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x185 SWAP2 SWAP1 PUSH2 0xFB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0xEAA JUMP JUMPDEST PUSH2 0x393 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST PUSH2 0x3A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D1 SWAP2 SWAP1 PUSH2 0xF2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E2 PUSH2 0x3F1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1EC PUSH2 0x405 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F9 SWAP2 SWAP1 PUSH2 0x1010 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20A PUSH2 0x42F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x217 SWAP2 SWAP1 PUSH2 0xDEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x235 SWAP2 SWAP1 PUSH2 0xEAA JUMP JUMPDEST PUSH2 0x4C1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x247 SWAP2 SWAP1 PUSH2 0xF05 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x26A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x102B JUMP JUMPDEST PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x277 SWAP2 SWAP1 PUSH2 0xF2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x29A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x295 SWAP2 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST PUSH2 0x56B JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x2AB SWAP1 PUSH2 0x109A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2D7 SWAP1 PUSH2 0x109A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x324 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2F9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x324 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x307 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x339 PUSH2 0x5F1 JUMP JUMPDEST SWAP1 POP PUSH2 0x346 DUP2 DUP6 DUP6 PUSH2 0x5F9 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x366 PUSH2 0x5F1 JUMP JUMPDEST SWAP1 POP PUSH2 0x373 DUP6 DUP3 DUP6 PUSH2 0x60B JUMP JUMPDEST PUSH2 0x37E DUP6 DUP6 DUP6 PUSH2 0x6A0 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x39B PUSH2 0x794 JUMP JUMPDEST PUSH2 0x3A5 DUP3 DUP3 PUSH2 0x81B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3F9 PUSH2 0x794 JUMP JUMPDEST PUSH2 0x403 PUSH1 0x0 PUSH2 0x89D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x43E SWAP1 PUSH2 0x109A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x46A SWAP1 PUSH2 0x109A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4B7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x48C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4B7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x49A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4CC PUSH2 0x5F1 JUMP JUMPDEST SWAP1 POP PUSH2 0x4D9 DUP2 DUP6 DUP6 PUSH2 0x6A0 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x573 PUSH2 0x794 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x5E5 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DC SWAP2 SWAP1 PUSH2 0x1010 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5EE DUP2 PUSH2 0x89D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x606 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x963 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x617 DUP5 DUP5 PUSH2 0x4E4 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 LT ISZERO PUSH2 0x69A JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x68A JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x681 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x10CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x699 DUP5 DUP5 DUP5 DUP5 SUB PUSH1 0x0 PUSH2 0x963 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x712 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x709 SWAP2 SWAP1 PUSH2 0x1010 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x784 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x77B SWAP2 SWAP1 PUSH2 0x1010 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x78F DUP4 DUP4 DUP4 PUSH2 0xB3A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x79C PUSH2 0x5F1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x7BA PUSH2 0x405 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x819 JUMPI PUSH2 0x7DD PUSH2 0x5F1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x810 SWAP2 SWAP1 PUSH2 0x1010 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x88D JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x884 SWAP2 SWAP1 PUSH2 0x1010 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x899 PUSH1 0x0 DUP4 DUP4 PUSH2 0xB3A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9D5 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9CC SWAP2 SWAP1 PUSH2 0x1010 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA47 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA3E SWAP2 SWAP1 PUSH2 0x1010 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xB34 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0xB2B SWAP2 SWAP1 PUSH2 0xF2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xB8C JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xB80 SWAP2 SWAP1 PUSH2 0x1131 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xC5F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xC18 JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC0F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x10CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xCA8 JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xCF5 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xD52 SWAP2 SWAP1 PUSH2 0xF2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD99 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xD7E JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDC1 DUP3 PUSH2 0xD5F JUMP JUMPDEST PUSH2 0xDCB DUP2 DUP6 PUSH2 0xD6A JUMP JUMPDEST SWAP4 POP PUSH2 0xDDB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xD7B JUMP JUMPDEST PUSH2 0xDE4 DUP2 PUSH2 0xDA5 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE09 DUP2 DUP5 PUSH2 0xDB6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE41 DUP3 PUSH2 0xE16 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE51 DUP2 PUSH2 0xE36 JUMP JUMPDEST DUP2 EQ PUSH2 0xE5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE6E DUP2 PUSH2 0xE48 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE87 DUP2 PUSH2 0xE74 JUMP JUMPDEST DUP2 EQ PUSH2 0xE92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xEA4 DUP2 PUSH2 0xE7E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEC1 JUMPI PUSH2 0xEC0 PUSH2 0xE11 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xECF DUP6 DUP3 DUP7 ADD PUSH2 0xE5F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xEE0 DUP6 DUP3 DUP7 ADD PUSH2 0xE95 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xEFF DUP2 PUSH2 0xEEA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xF1A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xEF6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xF29 DUP2 PUSH2 0xE74 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xF44 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xF20 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xF63 JUMPI PUSH2 0xF62 PUSH2 0xE11 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xF71 DUP7 DUP3 DUP8 ADD PUSH2 0xE5F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xF82 DUP7 DUP3 DUP8 ADD PUSH2 0xE5F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xF93 DUP7 DUP3 DUP8 ADD PUSH2 0xE95 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFB3 DUP2 PUSH2 0xF9D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFCE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xFAA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFEA JUMPI PUSH2 0xFE9 PUSH2 0xE11 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xFF8 DUP5 DUP3 DUP6 ADD PUSH2 0xE5F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x100A DUP2 PUSH2 0xE36 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1025 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1001 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1042 JUMPI PUSH2 0x1041 PUSH2 0xE11 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1050 DUP6 DUP3 DUP7 ADD PUSH2 0xE5F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1061 DUP6 DUP3 DUP7 ADD PUSH2 0xE5F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x10B2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x10C5 JUMPI PUSH2 0x10C4 PUSH2 0x106B JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x10E0 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1001 JUMP JUMPDEST PUSH2 0x10ED PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xF20 JUMP JUMPDEST PUSH2 0x10FA PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xF20 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x113C DUP3 PUSH2 0xE74 JUMP JUMPDEST SWAP2 POP PUSH2 0x1147 DUP4 PUSH2 0xE74 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x115F JUMPI PUSH2 0x115E PUSH2 0x1102 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBA PUSH15 0x1025BD3915EA9AD7D7A9D93E541077 0xBA SHL DIV 0x24 CREATE 0xC1 0xC1 SWAP4 DUP5 LOG0 KECCAK256 0xBC 0xC3 0xD SWAP8 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ",
          "sourceMap": "168:312:32:-:0;;;211:168;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;298:12;1601:113:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1675:5;1667;:13;;;;;;:::i;:::-;;1700:7;1690;:17;;;;;;:::i;:::-;;1601:113;;1297:1:0;1273:26;;:12;:26;;;1269:95;;1350:1;1322:31;;;;;;;;;;;:::i;:::-;;;;;;;;1269:95;1373:32;1392:12;1373:18;;;:32;;:::i;:::-;1225:187;327:45:32::2;333:10;361;:8;;;:10;;:::i;:::-;355:2;:16;;;;:::i;:::-;345:7;:26;;;;:::i;:::-;327:5;;;:45;;:::i;:::-;211:168:::0;168:312;;2912:187:0;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;2707:82:10:-;2756:5;2780:2;2773:9;;2707:82;:::o;7458:208::-;7547:1;7528:21;;:7;:21;;;7524:91;;7601:1;7572:32;;;;;;;;;;;:::i;:::-;;;;;;;;7524:91;7624:35;7640:1;7644:7;7653:5;7624:7;;;:35;;:::i;:::-;7458:208;;:::o;6008:1107::-;6113:1;6097:18;;:4;:18;;;6093:540;;6249:5;6233:12;;:21;;;;;;;:::i;:::-;;;;;;;;6093:540;;;6285:19;6307:9;:15;6317:4;6307:15;;;;;;;;;;;;;;;;6285:37;;6354:5;6340:11;:19;6336:115;;;6411:4;6417:11;6430:5;6386:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;6336:115;6603:5;6589:11;:19;6571:9;:15;6581:4;6571:15;;;;;;;;;;;;;;;:37;;;;6271:362;6093:540;6661:1;6647:16;;:2;:16;;;6643:425;;6826:5;6810:12;;:21;;;;;;;;;;;6643:425;;;7038:5;7021:9;:13;7031:2;7021:13;;;;;;;;;;;;;;;;:22;;;;;;;;;;;6643:425;7098:2;7083:25;;7092:4;7083:25;;;7102:5;7083:25;;;;;;:::i;:::-;;;;;;;;6008:1107;;;:::o;88:117:34:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;1202:99::-;1254:6;1288:5;1282:12;1272:22;;1202:99;;;:::o;1307:180::-;1355:77;1352:1;1345:88;1452:4;1449:1;1442:15;1476:4;1473:1;1466:15;1493:180;1541:77;1538:1;1531:88;1638:4;1635:1;1628:15;1662:4;1659:1;1652:15;1679:320;1723:6;1760:1;1754:4;1750:12;1740:22;;1807:1;1801:4;1797:12;1828:18;1818:81;;1884:4;1876:6;1872:17;1862:27;;1818:81;1946:2;1938:6;1935:14;1915:18;1912:38;1909:84;;1965:18;;:::i;:::-;1909:84;1730:269;1679:320;;;:::o;2005:141::-;2054:4;2077:3;2069:11;;2100:3;2097:1;2090:14;2134:4;2131:1;2121:18;2113:26;;2005:141;;;:::o;2152:93::-;2189:6;2236:2;2231;2224:5;2220:14;2216:23;2206:33;;2152:93;;;:::o;2251:107::-;2295:8;2345:5;2339:4;2335:16;2314:37;;2251:107;;;;:::o;2364:393::-;2433:6;2483:1;2471:10;2467:18;2506:97;2536:66;2525:9;2506:97;:::i;:::-;2624:39;2654:8;2643:9;2624:39;:::i;:::-;2612:51;;2696:4;2692:9;2685:5;2681:21;2672:30;;2745:4;2735:8;2731:19;2724:5;2721:30;2711:40;;2440:317;;2364:393;;;;;:::o;2763:77::-;2800:7;2829:5;2818:16;;2763:77;;;:::o;2846:60::-;2874:3;2895:5;2888:12;;2846:60;;;:::o;2912:142::-;2962:9;2995:53;3013:34;3022:24;3040:5;3022:24;:::i;:::-;3013:34;:::i;:::-;2995:53;:::i;:::-;2982:66;;2912:142;;;:::o;3060:75::-;3103:3;3124:5;3117:12;;3060:75;;;:::o;3141:269::-;3251:39;3282:7;3251:39;:::i;:::-;3312:91;3361:41;3385:16;3361:41;:::i;:::-;3353:6;3346:4;3340:11;3312:91;:::i;:::-;3306:4;3299:105;3217:193;3141:269;;;:::o;3416:73::-;3461:3;3416:73;:::o;3495:189::-;3572:32;;:::i;:::-;3613:65;3671:6;3663;3657:4;3613:65;:::i;:::-;3548:136;3495:189;;:::o;3690:186::-;3750:120;3767:3;3760:5;3757:14;3750:120;;;3821:39;3858:1;3851:5;3821:39;:::i;:::-;3794:1;3787:5;3783:13;3774:22;;3750:120;;;3690:186;;:::o;3882:543::-;3983:2;3978:3;3975:11;3972:446;;;4017:38;4049:5;4017:38;:::i;:::-;4101:29;4119:10;4101:29;:::i;:::-;4091:8;4087:44;4284:2;4272:10;4269:18;4266:49;;;4305:8;4290:23;;4266:49;4328:80;4384:22;4402:3;4384:22;:::i;:::-;4374:8;4370:37;4357:11;4328:80;:::i;:::-;3987:431;;3972:446;3882:543;;;:::o;4431:117::-;4485:8;4535:5;4529:4;4525:16;4504:37;;4431:117;;;;:::o;4554:169::-;4598:6;4631:51;4679:1;4675:6;4667:5;4664:1;4660:13;4631:51;:::i;:::-;4627:56;4712:4;4706;4702:15;4692:25;;4605:118;4554:169;;;;:::o;4728:295::-;4804:4;4950:29;4975:3;4969:4;4950:29;:::i;:::-;4942:37;;5012:3;5009:1;5005:11;4999:4;4996:21;4988:29;;4728:295;;;;:::o;5028:1395::-;5145:37;5178:3;5145:37;:::i;:::-;5247:18;5239:6;5236:30;5233:56;;;5269:18;;:::i;:::-;5233:56;5313:38;5345:4;5339:11;5313:38;:::i;:::-;5398:67;5458:6;5450;5444:4;5398:67;:::i;:::-;5492:1;5516:4;5503:17;;5548:2;5540:6;5537:14;5565:1;5560:618;;;;6222:1;6239:6;6236:77;;;6288:9;6283:3;6279:19;6273:26;6264:35;;6236:77;6339:67;6399:6;6392:5;6339:67;:::i;:::-;6333:4;6326:81;6195:222;5530:887;;5560:618;5612:4;5608:9;5600:6;5596:22;5646:37;5678:4;5646:37;:::i;:::-;5705:1;5719:208;5733:7;5730:1;5727:14;5719:208;;;5812:9;5807:3;5803:19;5797:26;5789:6;5782:42;5863:1;5855:6;5851:14;5841:24;;5910:2;5899:9;5895:18;5882:31;;5756:4;5753:1;5749:12;5744:17;;5719:208;;;5955:6;5946:7;5943:19;5940:179;;;6013:9;6008:3;6004:19;5998:26;6056:48;6098:4;6090:6;6086:17;6075:9;6056:48;:::i;:::-;6048:6;6041:64;5963:156;5940:179;6165:1;6161;6153:6;6149:14;6145:22;6139:4;6132:36;5567:611;;;5530:887;;5120:1303;;;5028:1395;;:::o;6429:118::-;6516:24;6534:5;6516:24;:::i;:::-;6511:3;6504:37;6429:118;;:::o;6553:222::-;6646:4;6684:2;6673:9;6669:18;6661:26;;6697:71;6765:1;6754:9;6750:17;6741:6;6697:71;:::i;:::-;6553:222;;;;:::o;6781:180::-;6829:77;6826:1;6819:88;6926:4;6923:1;6916:15;6950:4;6947:1;6940:15;6967:102;7009:8;7056:5;7053:1;7049:13;7028:34;;6967:102;;;:::o;7075:848::-;7136:5;7143:4;7167:6;7158:15;;7191:5;7182:14;;7205:712;7226:1;7216:8;7213:15;7205:712;;;7321:4;7316:3;7312:14;7306:4;7303:24;7300:50;;;7330:18;;:::i;:::-;7300:50;7380:1;7370:8;7366:16;7363:451;;;7795:4;7788:5;7784:16;7775:25;;7363:451;7845:4;7839;7835:15;7827:23;;7875:32;7898:8;7875:32;:::i;:::-;7863:44;;7205:712;;;7075:848;;;;;;;:::o;7929:1073::-;7983:5;8174:8;8164:40;;8195:1;8186:10;;8197:5;;8164:40;8223:4;8213:36;;8240:1;8231:10;;8242:5;;8213:36;8309:4;8357:1;8352:27;;;;8393:1;8388:191;;;;8302:277;;8352:27;8370:1;8361:10;;8372:5;;;8388:191;8433:3;8423:8;8420:17;8417:43;;;8440:18;;:::i;:::-;8417:43;8489:8;8486:1;8482:16;8473:25;;8524:3;8517:5;8514:14;8511:40;;;8531:18;;:::i;:::-;8511:40;8564:5;;;8302:277;;8688:2;8678:8;8675:16;8669:3;8663:4;8660:13;8656:36;8638:2;8628:8;8625:16;8620:2;8614:4;8611:12;8607:35;8591:111;8588:246;;;8744:8;8738:4;8734:19;8725:28;;8779:3;8772:5;8769:14;8766:40;;;8786:18;;:::i;:::-;8766:40;8819:5;;8588:246;8859:42;8897:3;8887:8;8881:4;8878:1;8859:42;:::i;:::-;8844:57;;;;8933:4;8928:3;8924:14;8917:5;8914:25;8911:51;;;8942:18;;:::i;:::-;8911:51;8991:4;8984:5;8980:16;8971:25;;7929:1073;;;;;;:::o;9008:86::-;9043:7;9083:4;9076:5;9072:16;9061:27;;9008:86;;;:::o;9100:281::-;9158:5;9182:23;9200:4;9182:23;:::i;:::-;9174:31;;9226:25;9242:8;9226:25;:::i;:::-;9214:37;;9270:104;9307:66;9297:8;9291:4;9270:104;:::i;:::-;9261:113;;9100:281;;;;:::o;9387:410::-;9427:7;9450:20;9468:1;9450:20;:::i;:::-;9445:25;;9484:20;9502:1;9484:20;:::i;:::-;9479:25;;9539:1;9536;9532:9;9561:30;9579:11;9561:30;:::i;:::-;9550:41;;9740:1;9731:7;9727:15;9724:1;9721:22;9701:1;9694:9;9674:83;9651:139;;9770:18;;:::i;:::-;9651:139;9435:362;9387:410;;;;:::o;9803:191::-;9843:3;9862:20;9880:1;9862:20;:::i;:::-;9857:25;;9896:20;9914:1;9896:20;:::i;:::-;9891:25;;9939:1;9936;9932:9;9925:16;;9960:3;9957:1;9954:10;9951:36;;;9967:18;;:::i;:::-;9951:36;9803:191;;;;:::o;10000:118::-;10087:24;10105:5;10087:24;:::i;:::-;10082:3;10075:37;10000:118;;:::o;10124:442::-;10273:4;10311:2;10300:9;10296:18;10288:26;;10324:71;10392:1;10381:9;10377:17;10368:6;10324:71;:::i;:::-;10405:72;10473:2;10462:9;10458:18;10449:6;10405:72;:::i;:::-;10487;10555:2;10544:9;10540:18;10531:6;10487:72;:::i;:::-;10124:442;;;;;;:::o;10572:222::-;10665:4;10703:2;10692:9;10688:18;10680:26;;10716:71;10784:1;10773:9;10769:17;10760:6;10716:71;:::i;:::-;10572:222;;;;:::o;168:312:32:-;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@_approve_1974": {
              "entryPoint": 1529,
              "id": 1974,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_approve_2034": {
              "entryPoint": 2403,
              "id": 2034,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@_checkOwner_84": {
              "entryPoint": 1940,
              "id": 84,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_mint_1923": {
              "entryPoint": 2075,
              "id": 1923,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_msgSender_4432": {
              "entryPoint": 1521,
              "id": 4432,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_spendAllowance_2082": {
              "entryPoint": 1547,
              "id": 2082,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_transferOwnership_146": {
              "entryPoint": 2205,
              "id": 146,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_transfer_1813": {
              "entryPoint": 1696,
              "id": 1813,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_update_1890": {
              "entryPoint": 2874,
              "id": 1890,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@allowance_1710": {
              "entryPoint": 1252,
              "id": 1710,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@approve_1734": {
              "entryPoint": 814,
              "id": 1734,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@balanceOf_1669": {
              "entryPoint": 937,
              "id": 1669,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@decimals_1647": {
              "entryPoint": 906,
              "id": 1647,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@mint_9647": {
              "entryPoint": 915,
              "id": 9647,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@name_1629": {
              "entryPoint": 668,
              "id": 1629,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@owner_67": {
              "entryPoint": 1029,
              "id": 67,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@renounceOwnership_98": {
              "entryPoint": 1009,
              "id": 98,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@symbol_1638": {
              "entryPoint": 1071,
              "id": 1638,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@totalSupply_1656": {
              "entryPoint": 849,
              "id": 1656,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@transferFrom_1766": {
              "entryPoint": 859,
              "id": 1766,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@transferOwnership_126": {
              "entryPoint": 1387,
              "id": 126,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@transfer_1693": {
              "entryPoint": 1217,
              "id": 1693,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_address": {
              "entryPoint": 3679,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_uint256": {
              "entryPoint": 3733,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 4052,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_address": {
              "entryPoint": 4139,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_addresst_uint256": {
              "entryPoint": 3914,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 3754,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_encode_t_address_to_t_address_fromStack": {
              "entryPoint": 4097,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_bool_to_t_bool_fromStack": {
              "entryPoint": 3830,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 3510,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_uint256_to_t_uint256_fromStack": {
              "entryPoint": 3872,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_uint8_to_t_uint8_fromStack": {
              "entryPoint": 4010,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": 4112,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": 4299,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": 3845,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 3567,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": 3887,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
              "entryPoint": 4025,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "allocate_unbounded": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "array_length_t_string_memory_ptr": {
              "entryPoint": 3423,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
              "entryPoint": 3434,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 4401,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "cleanup_t_address": {
              "entryPoint": 3638,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_bool": {
              "entryPoint": 3818,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint160": {
              "entryPoint": 3606,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint256": {
              "entryPoint": 3700,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint8": {
              "entryPoint": 3997,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 3451,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 4250,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 4354,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x22": {
              "entryPoint": 4203,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
              "entryPoint": 3601,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "round_up_to_mul_of_32": {
              "entryPoint": 3493,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "validator_revert_t_address": {
              "entryPoint": 3656,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_uint256": {
              "entryPoint": 3710,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nativeSrc": "0:7362:34",
                "nodeType": "YulBlock",
                "src": "0:7362:34",
                "statements": [
                  {
                    "body": {
                      "nativeSrc": "66:40:34",
                      "nodeType": "YulBlock",
                      "src": "66:40:34",
                      "statements": [
                        {
                          "nativeSrc": "77:22:34",
                          "nodeType": "YulAssignment",
                          "src": "77:22:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "93:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "93:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "87:5:34",
                              "nodeType": "YulIdentifier",
                              "src": "87:5:34"
                            },
                            "nativeSrc": "87:12:34",
                            "nodeType": "YulFunctionCall",
                            "src": "87:12:34"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nativeSrc": "77:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "77:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_string_memory_ptr",
                    "nativeSrc": "7:99:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "49:5:34",
                        "nodeType": "YulTypedName",
                        "src": "49:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nativeSrc": "59:6:34",
                        "nodeType": "YulTypedName",
                        "src": "59:6:34",
                        "type": ""
                      }
                    ],
                    "src": "7:99:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "208:73:34",
                      "nodeType": "YulBlock",
                      "src": "208:73:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "225:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "225:3:34"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "230:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "230:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "218:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "218:6:34"
                            },
                            "nativeSrc": "218:19:34",
                            "nodeType": "YulFunctionCall",
                            "src": "218:19:34"
                          },
                          "nativeSrc": "218:19:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "218:19:34"
                        },
                        {
                          "nativeSrc": "246:29:34",
                          "nodeType": "YulAssignment",
                          "src": "246:29:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "265:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "265:3:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "270:4:34",
                                "nodeType": "YulLiteral",
                                "src": "270:4:34",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "261:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "261:3:34"
                            },
                            "nativeSrc": "261:14:34",
                            "nodeType": "YulFunctionCall",
                            "src": "261:14:34"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nativeSrc": "246:11:34",
                              "nodeType": "YulIdentifier",
                              "src": "246:11:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                    "nativeSrc": "112:169:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "180:3:34",
                        "nodeType": "YulTypedName",
                        "src": "180:3:34",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "185:6:34",
                        "nodeType": "YulTypedName",
                        "src": "185:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nativeSrc": "196:11:34",
                        "nodeType": "YulTypedName",
                        "src": "196:11:34",
                        "type": ""
                      }
                    ],
                    "src": "112:169:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "349:186:34",
                      "nodeType": "YulBlock",
                      "src": "349:186:34",
                      "statements": [
                        {
                          "nativeSrc": "360:10:34",
                          "nodeType": "YulVariableDeclaration",
                          "src": "360:10:34",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "369:1:34",
                            "nodeType": "YulLiteral",
                            "src": "369:1:34",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nativeSrc": "364:1:34",
                              "nodeType": "YulTypedName",
                              "src": "364:1:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "429:63:34",
                            "nodeType": "YulBlock",
                            "src": "429:63:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nativeSrc": "454:3:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "454:3:34"
                                        },
                                        {
                                          "name": "i",
                                          "nativeSrc": "459:1:34",
                                          "nodeType": "YulIdentifier",
                                          "src": "459:1:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "450:3:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "450:3:34"
                                      },
                                      "nativeSrc": "450:11:34",
                                      "nodeType": "YulFunctionCall",
                                      "src": "450:11:34"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nativeSrc": "473:3:34",
                                              "nodeType": "YulIdentifier",
                                              "src": "473:3:34"
                                            },
                                            {
                                              "name": "i",
                                              "nativeSrc": "478:1:34",
                                              "nodeType": "YulIdentifier",
                                              "src": "478:1:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "469:3:34",
                                            "nodeType": "YulIdentifier",
                                            "src": "469:3:34"
                                          },
                                          "nativeSrc": "469:11:34",
                                          "nodeType": "YulFunctionCall",
                                          "src": "469:11:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nativeSrc": "463:5:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "463:5:34"
                                      },
                                      "nativeSrc": "463:18:34",
                                      "nodeType": "YulFunctionCall",
                                      "src": "463:18:34"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "443:6:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "443:6:34"
                                  },
                                  "nativeSrc": "443:39:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "443:39:34"
                                },
                                "nativeSrc": "443:39:34",
                                "nodeType": "YulExpressionStatement",
                                "src": "443:39:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nativeSrc": "390:1:34",
                                "nodeType": "YulIdentifier",
                                "src": "390:1:34"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "393:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "393:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nativeSrc": "387:2:34",
                              "nodeType": "YulIdentifier",
                              "src": "387:2:34"
                            },
                            "nativeSrc": "387:13:34",
                            "nodeType": "YulFunctionCall",
                            "src": "387:13:34"
                          },
                          "nativeSrc": "379:113:34",
                          "nodeType": "YulForLoop",
                          "post": {
                            "nativeSrc": "401:19:34",
                            "nodeType": "YulBlock",
                            "src": "401:19:34",
                            "statements": [
                              {
                                "nativeSrc": "403:15:34",
                                "nodeType": "YulAssignment",
                                "src": "403:15:34",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nativeSrc": "412:1:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "412:1:34"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "415:2:34",
                                      "nodeType": "YulLiteral",
                                      "src": "415:2:34",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "408:3:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "408:3:34"
                                  },
                                  "nativeSrc": "408:10:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "408:10:34"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nativeSrc": "403:1:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "403:1:34"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nativeSrc": "383:3:34",
                            "nodeType": "YulBlock",
                            "src": "383:3:34",
                            "statements": []
                          },
                          "src": "379:113:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nativeSrc": "512:3:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "512:3:34"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "517:6:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "517:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "508:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "508:3:34"
                                },
                                "nativeSrc": "508:16:34",
                                "nodeType": "YulFunctionCall",
                                "src": "508:16:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "526:1:34",
                                "nodeType": "YulLiteral",
                                "src": "526:1:34",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "501:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "501:6:34"
                            },
                            "nativeSrc": "501:27:34",
                            "nodeType": "YulFunctionCall",
                            "src": "501:27:34"
                          },
                          "nativeSrc": "501:27:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "501:27:34"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory_with_cleanup",
                    "nativeSrc": "287:248:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nativeSrc": "331:3:34",
                        "nodeType": "YulTypedName",
                        "src": "331:3:34",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nativeSrc": "336:3:34",
                        "nodeType": "YulTypedName",
                        "src": "336:3:34",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "341:6:34",
                        "nodeType": "YulTypedName",
                        "src": "341:6:34",
                        "type": ""
                      }
                    ],
                    "src": "287:248:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "589:54:34",
                      "nodeType": "YulBlock",
                      "src": "589:54:34",
                      "statements": [
                        {
                          "nativeSrc": "599:38:34",
                          "nodeType": "YulAssignment",
                          "src": "599:38:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "617:5:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "617:5:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "624:2:34",
                                    "nodeType": "YulLiteral",
                                    "src": "624:2:34",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "613:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "613:3:34"
                                },
                                "nativeSrc": "613:14:34",
                                "nodeType": "YulFunctionCall",
                                "src": "613:14:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "633:2:34",
                                    "nodeType": "YulLiteral",
                                    "src": "633:2:34",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nativeSrc": "629:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "629:3:34"
                                },
                                "nativeSrc": "629:7:34",
                                "nodeType": "YulFunctionCall",
                                "src": "629:7:34"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "609:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "609:3:34"
                            },
                            "nativeSrc": "609:28:34",
                            "nodeType": "YulFunctionCall",
                            "src": "609:28:34"
                          },
                          "variableNames": [
                            {
                              "name": "result",
                              "nativeSrc": "599:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "599:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "round_up_to_mul_of_32",
                    "nativeSrc": "541:102:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "572:5:34",
                        "nodeType": "YulTypedName",
                        "src": "572:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "result",
                        "nativeSrc": "582:6:34",
                        "nodeType": "YulTypedName",
                        "src": "582:6:34",
                        "type": ""
                      }
                    ],
                    "src": "541:102:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "741:285:34",
                      "nodeType": "YulBlock",
                      "src": "741:285:34",
                      "statements": [
                        {
                          "nativeSrc": "751:53:34",
                          "nodeType": "YulVariableDeclaration",
                          "src": "751:53:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "798:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "798:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_string_memory_ptr",
                              "nativeSrc": "765:32:34",
                              "nodeType": "YulIdentifier",
                              "src": "765:32:34"
                            },
                            "nativeSrc": "765:39:34",
                            "nodeType": "YulFunctionCall",
                            "src": "765:39:34"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "755:6:34",
                              "nodeType": "YulTypedName",
                              "src": "755:6:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "813:78:34",
                          "nodeType": "YulAssignment",
                          "src": "813:78:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "879:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "879:3:34"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "884:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "884:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nativeSrc": "820:58:34",
                              "nodeType": "YulIdentifier",
                              "src": "820:58:34"
                            },
                            "nativeSrc": "820:71:34",
                            "nodeType": "YulFunctionCall",
                            "src": "820:71:34"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "813:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "813:3:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "939:5:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "939:5:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "946:4:34",
                                    "nodeType": "YulLiteral",
                                    "src": "946:4:34",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "935:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "935:3:34"
                                },
                                "nativeSrc": "935:16:34",
                                "nodeType": "YulFunctionCall",
                                "src": "935:16:34"
                              },
                              {
                                "name": "pos",
                                "nativeSrc": "953:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "953:3:34"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "958:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "958:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nativeSrc": "900:34:34",
                              "nodeType": "YulIdentifier",
                              "src": "900:34:34"
                            },
                            "nativeSrc": "900:65:34",
                            "nodeType": "YulFunctionCall",
                            "src": "900:65:34"
                          },
                          "nativeSrc": "900:65:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "900:65:34"
                        },
                        {
                          "nativeSrc": "974:46:34",
                          "nodeType": "YulAssignment",
                          "src": "974:46:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "985:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "985:3:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "1012:6:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "1012:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nativeSrc": "990:21:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "990:21:34"
                                },
                                "nativeSrc": "990:29:34",
                                "nodeType": "YulFunctionCall",
                                "src": "990:29:34"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "981:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "981:3:34"
                            },
                            "nativeSrc": "981:39:34",
                            "nodeType": "YulFunctionCall",
                            "src": "981:39:34"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "974:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "974:3:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                    "nativeSrc": "649:377:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "722:5:34",
                        "nodeType": "YulTypedName",
                        "src": "722:5:34",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "729:3:34",
                        "nodeType": "YulTypedName",
                        "src": "729:3:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "737:3:34",
                        "nodeType": "YulTypedName",
                        "src": "737:3:34",
                        "type": ""
                      }
                    ],
                    "src": "649:377:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "1150:195:34",
                      "nodeType": "YulBlock",
                      "src": "1150:195:34",
                      "statements": [
                        {
                          "nativeSrc": "1160:26:34",
                          "nodeType": "YulAssignment",
                          "src": "1160:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1172:9:34",
                                "nodeType": "YulIdentifier",
                                "src": "1172:9:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1183:2:34",
                                "nodeType": "YulLiteral",
                                "src": "1183:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1168:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "1168:3:34"
                            },
                            "nativeSrc": "1168:18:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1168:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "1160:4:34",
                              "nodeType": "YulIdentifier",
                              "src": "1160:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1207:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "1207:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1218:1:34",
                                    "nodeType": "YulLiteral",
                                    "src": "1218:1:34",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1203:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "1203:3:34"
                                },
                                "nativeSrc": "1203:17:34",
                                "nodeType": "YulFunctionCall",
                                "src": "1203:17:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nativeSrc": "1226:4:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "1226:4:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1232:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "1232:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "1222:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "1222:3:34"
                                },
                                "nativeSrc": "1222:20:34",
                                "nodeType": "YulFunctionCall",
                                "src": "1222:20:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1196:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "1196:6:34"
                            },
                            "nativeSrc": "1196:47:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1196:47:34"
                          },
                          "nativeSrc": "1196:47:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "1196:47:34"
                        },
                        {
                          "nativeSrc": "1252:86:34",
                          "nodeType": "YulAssignment",
                          "src": "1252:86:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "1324:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "1324:6:34"
                              },
                              {
                                "name": "tail",
                                "nativeSrc": "1333:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "1333:4:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                              "nativeSrc": "1260:63:34",
                              "nodeType": "YulIdentifier",
                              "src": "1260:63:34"
                            },
                            "nativeSrc": "1260:78:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1260:78:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "1252:4:34",
                              "nodeType": "YulIdentifier",
                              "src": "1252:4:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nativeSrc": "1032:313:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1122:9:34",
                        "nodeType": "YulTypedName",
                        "src": "1122:9:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "1134:6:34",
                        "nodeType": "YulTypedName",
                        "src": "1134:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "1145:4:34",
                        "nodeType": "YulTypedName",
                        "src": "1145:4:34",
                        "type": ""
                      }
                    ],
                    "src": "1032:313:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "1391:35:34",
                      "nodeType": "YulBlock",
                      "src": "1391:35:34",
                      "statements": [
                        {
                          "nativeSrc": "1401:19:34",
                          "nodeType": "YulAssignment",
                          "src": "1401:19:34",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "1417:2:34",
                                "nodeType": "YulLiteral",
                                "src": "1417:2:34",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "1411:5:34",
                              "nodeType": "YulIdentifier",
                              "src": "1411:5:34"
                            },
                            "nativeSrc": "1411:9:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1411:9:34"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nativeSrc": "1401:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "1401:6:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "allocate_unbounded",
                    "nativeSrc": "1351:75:34",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "1384:6:34",
                        "nodeType": "YulTypedName",
                        "src": "1384:6:34",
                        "type": ""
                      }
                    ],
                    "src": "1351:75:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "1521:28:34",
                      "nodeType": "YulBlock",
                      "src": "1521:28:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "1538:1:34",
                                "nodeType": "YulLiteral",
                                "src": "1538:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1541:1:34",
                                "nodeType": "YulLiteral",
                                "src": "1541:1:34",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "1531:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "1531:6:34"
                            },
                            "nativeSrc": "1531:12:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1531:12:34"
                          },
                          "nativeSrc": "1531:12:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "1531:12:34"
                        }
                      ]
                    },
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nativeSrc": "1432:117:34",
                    "nodeType": "YulFunctionDefinition",
                    "src": "1432:117:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "1644:28:34",
                      "nodeType": "YulBlock",
                      "src": "1644:28:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "1661:1:34",
                                "nodeType": "YulLiteral",
                                "src": "1661:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1664:1:34",
                                "nodeType": "YulLiteral",
                                "src": "1664:1:34",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "1654:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "1654:6:34"
                            },
                            "nativeSrc": "1654:12:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1654:12:34"
                          },
                          "nativeSrc": "1654:12:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "1654:12:34"
                        }
                      ]
                    },
                    "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                    "nativeSrc": "1555:117:34",
                    "nodeType": "YulFunctionDefinition",
                    "src": "1555:117:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "1723:81:34",
                      "nodeType": "YulBlock",
                      "src": "1723:81:34",
                      "statements": [
                        {
                          "nativeSrc": "1733:65:34",
                          "nodeType": "YulAssignment",
                          "src": "1733:65:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "1748:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "1748:5:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1755:42:34",
                                "nodeType": "YulLiteral",
                                "src": "1755:42:34",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "1744:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "1744:3:34"
                            },
                            "nativeSrc": "1744:54:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1744:54:34"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "1733:7:34",
                              "nodeType": "YulIdentifier",
                              "src": "1733:7:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint160",
                    "nativeSrc": "1678:126:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "1705:5:34",
                        "nodeType": "YulTypedName",
                        "src": "1705:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "1715:7:34",
                        "nodeType": "YulTypedName",
                        "src": "1715:7:34",
                        "type": ""
                      }
                    ],
                    "src": "1678:126:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "1855:51:34",
                      "nodeType": "YulBlock",
                      "src": "1855:51:34",
                      "statements": [
                        {
                          "nativeSrc": "1865:35:34",
                          "nodeType": "YulAssignment",
                          "src": "1865:35:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "1894:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "1894:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint160",
                              "nativeSrc": "1876:17:34",
                              "nodeType": "YulIdentifier",
                              "src": "1876:17:34"
                            },
                            "nativeSrc": "1876:24:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1876:24:34"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "1865:7:34",
                              "nodeType": "YulIdentifier",
                              "src": "1865:7:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_address",
                    "nativeSrc": "1810:96:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "1837:5:34",
                        "nodeType": "YulTypedName",
                        "src": "1837:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "1847:7:34",
                        "nodeType": "YulTypedName",
                        "src": "1847:7:34",
                        "type": ""
                      }
                    ],
                    "src": "1810:96:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "1955:79:34",
                      "nodeType": "YulBlock",
                      "src": "1955:79:34",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "2012:16:34",
                            "nodeType": "YulBlock",
                            "src": "2012:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2021:1:34",
                                      "nodeType": "YulLiteral",
                                      "src": "2021:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2024:1:34",
                                      "nodeType": "YulLiteral",
                                      "src": "2024:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "2014:6:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "2014:6:34"
                                  },
                                  "nativeSrc": "2014:12:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2014:12:34"
                                },
                                "nativeSrc": "2014:12:34",
                                "nodeType": "YulExpressionStatement",
                                "src": "2014:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "1978:5:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "1978:5:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "2003:5:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "2003:5:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_address",
                                      "nativeSrc": "1985:17:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "1985:17:34"
                                    },
                                    "nativeSrc": "1985:24:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1985:24:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "1975:2:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "1975:2:34"
                                },
                                "nativeSrc": "1975:35:34",
                                "nodeType": "YulFunctionCall",
                                "src": "1975:35:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "1968:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "1968:6:34"
                            },
                            "nativeSrc": "1968:43:34",
                            "nodeType": "YulFunctionCall",
                            "src": "1968:43:34"
                          },
                          "nativeSrc": "1965:63:34",
                          "nodeType": "YulIf",
                          "src": "1965:63:34"
                        }
                      ]
                    },
                    "name": "validator_revert_t_address",
                    "nativeSrc": "1912:122:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "1948:5:34",
                        "nodeType": "YulTypedName",
                        "src": "1948:5:34",
                        "type": ""
                      }
                    ],
                    "src": "1912:122:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "2092:87:34",
                      "nodeType": "YulBlock",
                      "src": "2092:87:34",
                      "statements": [
                        {
                          "nativeSrc": "2102:29:34",
                          "nodeType": "YulAssignment",
                          "src": "2102:29:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "2124:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "2124:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "2111:12:34",
                              "nodeType": "YulIdentifier",
                              "src": "2111:12:34"
                            },
                            "nativeSrc": "2111:20:34",
                            "nodeType": "YulFunctionCall",
                            "src": "2111:20:34"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "2102:5:34",
                              "nodeType": "YulIdentifier",
                              "src": "2102:5:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "2167:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "2167:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nativeSrc": "2140:26:34",
                              "nodeType": "YulIdentifier",
                              "src": "2140:26:34"
                            },
                            "nativeSrc": "2140:33:34",
                            "nodeType": "YulFunctionCall",
                            "src": "2140:33:34"
                          },
                          "nativeSrc": "2140:33:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "2140:33:34"
                        }
                      ]
                    },
                    "name": "abi_decode_t_address",
                    "nativeSrc": "2040:139:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "2070:6:34",
                        "nodeType": "YulTypedName",
                        "src": "2070:6:34",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "2078:3:34",
                        "nodeType": "YulTypedName",
                        "src": "2078:3:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "2086:5:34",
                        "nodeType": "YulTypedName",
                        "src": "2086:5:34",
                        "type": ""
                      }
                    ],
                    "src": "2040:139:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "2230:32:34",
                      "nodeType": "YulBlock",
                      "src": "2230:32:34",
                      "statements": [
                        {
                          "nativeSrc": "2240:16:34",
                          "nodeType": "YulAssignment",
                          "src": "2240:16:34",
                          "value": {
                            "name": "value",
                            "nativeSrc": "2251:5:34",
                            "nodeType": "YulIdentifier",
                            "src": "2251:5:34"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "2240:7:34",
                              "nodeType": "YulIdentifier",
                              "src": "2240:7:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint256",
                    "nativeSrc": "2185:77:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "2212:5:34",
                        "nodeType": "YulTypedName",
                        "src": "2212:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "2222:7:34",
                        "nodeType": "YulTypedName",
                        "src": "2222:7:34",
                        "type": ""
                      }
                    ],
                    "src": "2185:77:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "2311:79:34",
                      "nodeType": "YulBlock",
                      "src": "2311:79:34",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "2368:16:34",
                            "nodeType": "YulBlock",
                            "src": "2368:16:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2377:1:34",
                                      "nodeType": "YulLiteral",
                                      "src": "2377:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2380:1:34",
                                      "nodeType": "YulLiteral",
                                      "src": "2380:1:34",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "2370:6:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "2370:6:34"
                                  },
                                  "nativeSrc": "2370:12:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2370:12:34"
                                },
                                "nativeSrc": "2370:12:34",
                                "nodeType": "YulExpressionStatement",
                                "src": "2370:12:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "2334:5:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "2334:5:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "2359:5:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "2359:5:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint256",
                                      "nativeSrc": "2341:17:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "2341:17:34"
                                    },
                                    "nativeSrc": "2341:24:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2341:24:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "2331:2:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "2331:2:34"
                                },
                                "nativeSrc": "2331:35:34",
                                "nodeType": "YulFunctionCall",
                                "src": "2331:35:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "2324:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "2324:6:34"
                            },
                            "nativeSrc": "2324:43:34",
                            "nodeType": "YulFunctionCall",
                            "src": "2324:43:34"
                          },
                          "nativeSrc": "2321:63:34",
                          "nodeType": "YulIf",
                          "src": "2321:63:34"
                        }
                      ]
                    },
                    "name": "validator_revert_t_uint256",
                    "nativeSrc": "2268:122:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "2304:5:34",
                        "nodeType": "YulTypedName",
                        "src": "2304:5:34",
                        "type": ""
                      }
                    ],
                    "src": "2268:122:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "2448:87:34",
                      "nodeType": "YulBlock",
                      "src": "2448:87:34",
                      "statements": [
                        {
                          "nativeSrc": "2458:29:34",
                          "nodeType": "YulAssignment",
                          "src": "2458:29:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "2480:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "2480:6:34"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "2467:12:34",
                              "nodeType": "YulIdentifier",
                              "src": "2467:12:34"
                            },
                            "nativeSrc": "2467:20:34",
                            "nodeType": "YulFunctionCall",
                            "src": "2467:20:34"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "2458:5:34",
                              "nodeType": "YulIdentifier",
                              "src": "2458:5:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "2523:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "2523:5:34"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_uint256",
                              "nativeSrc": "2496:26:34",
                              "nodeType": "YulIdentifier",
                              "src": "2496:26:34"
                            },
                            "nativeSrc": "2496:33:34",
                            "nodeType": "YulFunctionCall",
                            "src": "2496:33:34"
                          },
                          "nativeSrc": "2496:33:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "2496:33:34"
                        }
                      ]
                    },
                    "name": "abi_decode_t_uint256",
                    "nativeSrc": "2396:139:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "2426:6:34",
                        "nodeType": "YulTypedName",
                        "src": "2426:6:34",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "2434:3:34",
                        "nodeType": "YulTypedName",
                        "src": "2434:3:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "2442:5:34",
                        "nodeType": "YulTypedName",
                        "src": "2442:5:34",
                        "type": ""
                      }
                    ],
                    "src": "2396:139:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "2624:391:34",
                      "nodeType": "YulBlock",
                      "src": "2624:391:34",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "2670:83:34",
                            "nodeType": "YulBlock",
                            "src": "2670:83:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "2672:77:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "2672:77:34"
                                  },
                                  "nativeSrc": "2672:79:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2672:79:34"
                                },
                                "nativeSrc": "2672:79:34",
                                "nodeType": "YulExpressionStatement",
                                "src": "2672:79:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "2645:7:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "2645:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2654:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "2654:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "2641:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "2641:3:34"
                                },
                                "nativeSrc": "2641:23:34",
                                "nodeType": "YulFunctionCall",
                                "src": "2641:23:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2666:2:34",
                                "nodeType": "YulLiteral",
                                "src": "2666:2:34",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "2637:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "2637:3:34"
                            },
                            "nativeSrc": "2637:32:34",
                            "nodeType": "YulFunctionCall",
                            "src": "2637:32:34"
                          },
                          "nativeSrc": "2634:119:34",
                          "nodeType": "YulIf",
                          "src": "2634:119:34"
                        },
                        {
                          "nativeSrc": "2763:117:34",
                          "nodeType": "YulBlock",
                          "src": "2763:117:34",
                          "statements": [
                            {
                              "nativeSrc": "2778:15:34",
                              "nodeType": "YulVariableDeclaration",
                              "src": "2778:15:34",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "2792:1:34",
                                "nodeType": "YulLiteral",
                                "src": "2792:1:34",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "2782:6:34",
                                  "nodeType": "YulTypedName",
                                  "src": "2782:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "2807:63:34",
                              "nodeType": "YulAssignment",
                              "src": "2807:63:34",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "2842:9:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "2842:9:34"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "2853:6:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "2853:6:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2838:3:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "2838:3:34"
                                    },
                                    "nativeSrc": "2838:22:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2838:22:34"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "2862:7:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "2862:7:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "2817:20:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "2817:20:34"
                                },
                                "nativeSrc": "2817:53:34",
                                "nodeType": "YulFunctionCall",
                                "src": "2817:53:34"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "2807:6:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "2807:6:34"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "2890:118:34",
                          "nodeType": "YulBlock",
                          "src": "2890:118:34",
                          "statements": [
                            {
                              "nativeSrc": "2905:16:34",
                              "nodeType": "YulVariableDeclaration",
                              "src": "2905:16:34",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "2919:2:34",
                                "nodeType": "YulLiteral",
                                "src": "2919:2:34",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "2909:6:34",
                                  "nodeType": "YulTypedName",
                                  "src": "2909:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "2935:63:34",
                              "nodeType": "YulAssignment",
                              "src": "2935:63:34",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "2970:9:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "2970:9:34"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "2981:6:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "2981:6:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2966:3:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "2966:3:34"
                                    },
                                    "nativeSrc": "2966:22:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2966:22:34"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "2990:7:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "2990:7:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nativeSrc": "2945:20:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "2945:20:34"
                                },
                                "nativeSrc": "2945:53:34",
                                "nodeType": "YulFunctionCall",
                                "src": "2945:53:34"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nativeSrc": "2935:6:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "2935:6:34"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nativeSrc": "2541:474:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "2586:9:34",
                        "nodeType": "YulTypedName",
                        "src": "2586:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "2597:7:34",
                        "nodeType": "YulTypedName",
                        "src": "2597:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "2609:6:34",
                        "nodeType": "YulTypedName",
                        "src": "2609:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "2617:6:34",
                        "nodeType": "YulTypedName",
                        "src": "2617:6:34",
                        "type": ""
                      }
                    ],
                    "src": "2541:474:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "3063:48:34",
                      "nodeType": "YulBlock",
                      "src": "3063:48:34",
                      "statements": [
                        {
                          "nativeSrc": "3073:32:34",
                          "nodeType": "YulAssignment",
                          "src": "3073:32:34",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "3098:5:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "3098:5:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "3091:6:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "3091:6:34"
                                },
                                "nativeSrc": "3091:13:34",
                                "nodeType": "YulFunctionCall",
                                "src": "3091:13:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "3084:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "3084:6:34"
                            },
                            "nativeSrc": "3084:21:34",
                            "nodeType": "YulFunctionCall",
                            "src": "3084:21:34"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "3073:7:34",
                              "nodeType": "YulIdentifier",
                              "src": "3073:7:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_bool",
                    "nativeSrc": "3021:90:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "3045:5:34",
                        "nodeType": "YulTypedName",
                        "src": "3045:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "3055:7:34",
                        "nodeType": "YulTypedName",
                        "src": "3055:7:34",
                        "type": ""
                      }
                    ],
                    "src": "3021:90:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "3176:50:34",
                      "nodeType": "YulBlock",
                      "src": "3176:50:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "3193:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "3193:3:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "3213:5:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "3213:5:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_bool",
                                  "nativeSrc": "3198:14:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "3198:14:34"
                                },
                                "nativeSrc": "3198:21:34",
                                "nodeType": "YulFunctionCall",
                                "src": "3198:21:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3186:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "3186:6:34"
                            },
                            "nativeSrc": "3186:34:34",
                            "nodeType": "YulFunctionCall",
                            "src": "3186:34:34"
                          },
                          "nativeSrc": "3186:34:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "3186:34:34"
                        }
                      ]
                    },
                    "name": "abi_encode_t_bool_to_t_bool_fromStack",
                    "nativeSrc": "3117:109:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "3164:5:34",
                        "nodeType": "YulTypedName",
                        "src": "3164:5:34",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "3171:3:34",
                        "nodeType": "YulTypedName",
                        "src": "3171:3:34",
                        "type": ""
                      }
                    ],
                    "src": "3117:109:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "3324:118:34",
                      "nodeType": "YulBlock",
                      "src": "3324:118:34",
                      "statements": [
                        {
                          "nativeSrc": "3334:26:34",
                          "nodeType": "YulAssignment",
                          "src": "3334:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "3346:9:34",
                                "nodeType": "YulIdentifier",
                                "src": "3346:9:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3357:2:34",
                                "nodeType": "YulLiteral",
                                "src": "3357:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "3342:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "3342:3:34"
                            },
                            "nativeSrc": "3342:18:34",
                            "nodeType": "YulFunctionCall",
                            "src": "3342:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "3334:4:34",
                              "nodeType": "YulIdentifier",
                              "src": "3334:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "3408:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "3408:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3421:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "3421:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3432:1:34",
                                    "nodeType": "YulLiteral",
                                    "src": "3432:1:34",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3417:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "3417:3:34"
                                },
                                "nativeSrc": "3417:17:34",
                                "nodeType": "YulFunctionCall",
                                "src": "3417:17:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bool_to_t_bool_fromStack",
                              "nativeSrc": "3370:37:34",
                              "nodeType": "YulIdentifier",
                              "src": "3370:37:34"
                            },
                            "nativeSrc": "3370:65:34",
                            "nodeType": "YulFunctionCall",
                            "src": "3370:65:34"
                          },
                          "nativeSrc": "3370:65:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "3370:65:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nativeSrc": "3232:210:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "3296:9:34",
                        "nodeType": "YulTypedName",
                        "src": "3296:9:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "3308:6:34",
                        "nodeType": "YulTypedName",
                        "src": "3308:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "3319:4:34",
                        "nodeType": "YulTypedName",
                        "src": "3319:4:34",
                        "type": ""
                      }
                    ],
                    "src": "3232:210:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "3513:53:34",
                      "nodeType": "YulBlock",
                      "src": "3513:53:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "3530:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "3530:3:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "3553:5:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "3553:5:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint256",
                                  "nativeSrc": "3535:17:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "3535:17:34"
                                },
                                "nativeSrc": "3535:24:34",
                                "nodeType": "YulFunctionCall",
                                "src": "3535:24:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3523:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "3523:6:34"
                            },
                            "nativeSrc": "3523:37:34",
                            "nodeType": "YulFunctionCall",
                            "src": "3523:37:34"
                          },
                          "nativeSrc": "3523:37:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "3523:37:34"
                        }
                      ]
                    },
                    "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                    "nativeSrc": "3448:118:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "3501:5:34",
                        "nodeType": "YulTypedName",
                        "src": "3501:5:34",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "3508:3:34",
                        "nodeType": "YulTypedName",
                        "src": "3508:3:34",
                        "type": ""
                      }
                    ],
                    "src": "3448:118:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "3670:124:34",
                      "nodeType": "YulBlock",
                      "src": "3670:124:34",
                      "statements": [
                        {
                          "nativeSrc": "3680:26:34",
                          "nodeType": "YulAssignment",
                          "src": "3680:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "3692:9:34",
                                "nodeType": "YulIdentifier",
                                "src": "3692:9:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3703:2:34",
                                "nodeType": "YulLiteral",
                                "src": "3703:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "3688:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "3688:3:34"
                            },
                            "nativeSrc": "3688:18:34",
                            "nodeType": "YulFunctionCall",
                            "src": "3688:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "3680:4:34",
                              "nodeType": "YulIdentifier",
                              "src": "3680:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "3760:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "3760:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3773:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "3773:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3784:1:34",
                                    "nodeType": "YulLiteral",
                                    "src": "3784:1:34",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3769:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "3769:3:34"
                                },
                                "nativeSrc": "3769:17:34",
                                "nodeType": "YulFunctionCall",
                                "src": "3769:17:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nativeSrc": "3716:43:34",
                              "nodeType": "YulIdentifier",
                              "src": "3716:43:34"
                            },
                            "nativeSrc": "3716:71:34",
                            "nodeType": "YulFunctionCall",
                            "src": "3716:71:34"
                          },
                          "nativeSrc": "3716:71:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "3716:71:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nativeSrc": "3572:222:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "3642:9:34",
                        "nodeType": "YulTypedName",
                        "src": "3642:9:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "3654:6:34",
                        "nodeType": "YulTypedName",
                        "src": "3654:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "3665:4:34",
                        "nodeType": "YulTypedName",
                        "src": "3665:4:34",
                        "type": ""
                      }
                    ],
                    "src": "3572:222:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "3900:519:34",
                      "nodeType": "YulBlock",
                      "src": "3900:519:34",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "3946:83:34",
                            "nodeType": "YulBlock",
                            "src": "3946:83:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "3948:77:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "3948:77:34"
                                  },
                                  "nativeSrc": "3948:79:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3948:79:34"
                                },
                                "nativeSrc": "3948:79:34",
                                "nodeType": "YulExpressionStatement",
                                "src": "3948:79:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "3921:7:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "3921:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3930:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "3930:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "3917:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "3917:3:34"
                                },
                                "nativeSrc": "3917:23:34",
                                "nodeType": "YulFunctionCall",
                                "src": "3917:23:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3942:2:34",
                                "nodeType": "YulLiteral",
                                "src": "3942:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "3913:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "3913:3:34"
                            },
                            "nativeSrc": "3913:32:34",
                            "nodeType": "YulFunctionCall",
                            "src": "3913:32:34"
                          },
                          "nativeSrc": "3910:119:34",
                          "nodeType": "YulIf",
                          "src": "3910:119:34"
                        },
                        {
                          "nativeSrc": "4039:117:34",
                          "nodeType": "YulBlock",
                          "src": "4039:117:34",
                          "statements": [
                            {
                              "nativeSrc": "4054:15:34",
                              "nodeType": "YulVariableDeclaration",
                              "src": "4054:15:34",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "4068:1:34",
                                "nodeType": "YulLiteral",
                                "src": "4068:1:34",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "4058:6:34",
                                  "nodeType": "YulTypedName",
                                  "src": "4058:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "4083:63:34",
                              "nodeType": "YulAssignment",
                              "src": "4083:63:34",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "4118:9:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "4118:9:34"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "4129:6:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "4129:6:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "4114:3:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "4114:3:34"
                                    },
                                    "nativeSrc": "4114:22:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4114:22:34"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "4138:7:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "4138:7:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "4093:20:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "4093:20:34"
                                },
                                "nativeSrc": "4093:53:34",
                                "nodeType": "YulFunctionCall",
                                "src": "4093:53:34"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "4083:6:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "4083:6:34"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "4166:118:34",
                          "nodeType": "YulBlock",
                          "src": "4166:118:34",
                          "statements": [
                            {
                              "nativeSrc": "4181:16:34",
                              "nodeType": "YulVariableDeclaration",
                              "src": "4181:16:34",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "4195:2:34",
                                "nodeType": "YulLiteral",
                                "src": "4195:2:34",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "4185:6:34",
                                  "nodeType": "YulTypedName",
                                  "src": "4185:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "4211:63:34",
                              "nodeType": "YulAssignment",
                              "src": "4211:63:34",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "4246:9:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "4246:9:34"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "4257:6:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "4257:6:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "4242:3:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "4242:3:34"
                                    },
                                    "nativeSrc": "4242:22:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4242:22:34"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "4266:7:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "4266:7:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "4221:20:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "4221:20:34"
                                },
                                "nativeSrc": "4221:53:34",
                                "nodeType": "YulFunctionCall",
                                "src": "4221:53:34"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nativeSrc": "4211:6:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "4211:6:34"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "4294:118:34",
                          "nodeType": "YulBlock",
                          "src": "4294:118:34",
                          "statements": [
                            {
                              "nativeSrc": "4309:16:34",
                              "nodeType": "YulVariableDeclaration",
                              "src": "4309:16:34",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "4323:2:34",
                                "nodeType": "YulLiteral",
                                "src": "4323:2:34",
                                "type": "",
                                "value": "64"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "4313:6:34",
                                  "nodeType": "YulTypedName",
                                  "src": "4313:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "4339:63:34",
                              "nodeType": "YulAssignment",
                              "src": "4339:63:34",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "4374:9:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "4374:9:34"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "4385:6:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "4385:6:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "4370:3:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "4370:3:34"
                                    },
                                    "nativeSrc": "4370:22:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4370:22:34"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "4394:7:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "4394:7:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nativeSrc": "4349:20:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "4349:20:34"
                                },
                                "nativeSrc": "4349:53:34",
                                "nodeType": "YulFunctionCall",
                                "src": "4349:53:34"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nativeSrc": "4339:6:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "4339:6:34"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                    "nativeSrc": "3800:619:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "3854:9:34",
                        "nodeType": "YulTypedName",
                        "src": "3854:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "3865:7:34",
                        "nodeType": "YulTypedName",
                        "src": "3865:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "3877:6:34",
                        "nodeType": "YulTypedName",
                        "src": "3877:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "3885:6:34",
                        "nodeType": "YulTypedName",
                        "src": "3885:6:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "3893:6:34",
                        "nodeType": "YulTypedName",
                        "src": "3893:6:34",
                        "type": ""
                      }
                    ],
                    "src": "3800:619:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "4468:43:34",
                      "nodeType": "YulBlock",
                      "src": "4468:43:34",
                      "statements": [
                        {
                          "nativeSrc": "4478:27:34",
                          "nodeType": "YulAssignment",
                          "src": "4478:27:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "4493:5:34",
                                "nodeType": "YulIdentifier",
                                "src": "4493:5:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "4500:4:34",
                                "nodeType": "YulLiteral",
                                "src": "4500:4:34",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "4489:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "4489:3:34"
                            },
                            "nativeSrc": "4489:16:34",
                            "nodeType": "YulFunctionCall",
                            "src": "4489:16:34"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "4478:7:34",
                              "nodeType": "YulIdentifier",
                              "src": "4478:7:34"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint8",
                    "nativeSrc": "4425:86:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "4450:5:34",
                        "nodeType": "YulTypedName",
                        "src": "4450:5:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "4460:7:34",
                        "nodeType": "YulTypedName",
                        "src": "4460:7:34",
                        "type": ""
                      }
                    ],
                    "src": "4425:86:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "4578:51:34",
                      "nodeType": "YulBlock",
                      "src": "4578:51:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "4595:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "4595:3:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "4616:5:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "4616:5:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint8",
                                  "nativeSrc": "4600:15:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "4600:15:34"
                                },
                                "nativeSrc": "4600:22:34",
                                "nodeType": "YulFunctionCall",
                                "src": "4600:22:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "4588:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "4588:6:34"
                            },
                            "nativeSrc": "4588:35:34",
                            "nodeType": "YulFunctionCall",
                            "src": "4588:35:34"
                          },
                          "nativeSrc": "4588:35:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "4588:35:34"
                        }
                      ]
                    },
                    "name": "abi_encode_t_uint8_to_t_uint8_fromStack",
                    "nativeSrc": "4517:112:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "4566:5:34",
                        "nodeType": "YulTypedName",
                        "src": "4566:5:34",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "4573:3:34",
                        "nodeType": "YulTypedName",
                        "src": "4573:3:34",
                        "type": ""
                      }
                    ],
                    "src": "4517:112:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "4729:120:34",
                      "nodeType": "YulBlock",
                      "src": "4729:120:34",
                      "statements": [
                        {
                          "nativeSrc": "4739:26:34",
                          "nodeType": "YulAssignment",
                          "src": "4739:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "4751:9:34",
                                "nodeType": "YulIdentifier",
                                "src": "4751:9:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "4762:2:34",
                                "nodeType": "YulLiteral",
                                "src": "4762:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "4747:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "4747:3:34"
                            },
                            "nativeSrc": "4747:18:34",
                            "nodeType": "YulFunctionCall",
                            "src": "4747:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "4739:4:34",
                              "nodeType": "YulIdentifier",
                              "src": "4739:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "4815:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "4815:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "4828:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "4828:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "4839:1:34",
                                    "nodeType": "YulLiteral",
                                    "src": "4839:1:34",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "4824:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "4824:3:34"
                                },
                                "nativeSrc": "4824:17:34",
                                "nodeType": "YulFunctionCall",
                                "src": "4824:17:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint8_to_t_uint8_fromStack",
                              "nativeSrc": "4775:39:34",
                              "nodeType": "YulIdentifier",
                              "src": "4775:39:34"
                            },
                            "nativeSrc": "4775:67:34",
                            "nodeType": "YulFunctionCall",
                            "src": "4775:67:34"
                          },
                          "nativeSrc": "4775:67:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "4775:67:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
                    "nativeSrc": "4635:214:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "4701:9:34",
                        "nodeType": "YulTypedName",
                        "src": "4701:9:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "4713:6:34",
                        "nodeType": "YulTypedName",
                        "src": "4713:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "4724:4:34",
                        "nodeType": "YulTypedName",
                        "src": "4724:4:34",
                        "type": ""
                      }
                    ],
                    "src": "4635:214:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "4921:263:34",
                      "nodeType": "YulBlock",
                      "src": "4921:263:34",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "4967:83:34",
                            "nodeType": "YulBlock",
                            "src": "4967:83:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "4969:77:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "4969:77:34"
                                  },
                                  "nativeSrc": "4969:79:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4969:79:34"
                                },
                                "nativeSrc": "4969:79:34",
                                "nodeType": "YulExpressionStatement",
                                "src": "4969:79:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "4942:7:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "4942:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "4951:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "4951:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "4938:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "4938:3:34"
                                },
                                "nativeSrc": "4938:23:34",
                                "nodeType": "YulFunctionCall",
                                "src": "4938:23:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "4963:2:34",
                                "nodeType": "YulLiteral",
                                "src": "4963:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "4934:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "4934:3:34"
                            },
                            "nativeSrc": "4934:32:34",
                            "nodeType": "YulFunctionCall",
                            "src": "4934:32:34"
                          },
                          "nativeSrc": "4931:119:34",
                          "nodeType": "YulIf",
                          "src": "4931:119:34"
                        },
                        {
                          "nativeSrc": "5060:117:34",
                          "nodeType": "YulBlock",
                          "src": "5060:117:34",
                          "statements": [
                            {
                              "nativeSrc": "5075:15:34",
                              "nodeType": "YulVariableDeclaration",
                              "src": "5075:15:34",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "5089:1:34",
                                "nodeType": "YulLiteral",
                                "src": "5089:1:34",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "5079:6:34",
                                  "nodeType": "YulTypedName",
                                  "src": "5079:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "5104:63:34",
                              "nodeType": "YulAssignment",
                              "src": "5104:63:34",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "5139:9:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "5139:9:34"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "5150:6:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "5150:6:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "5135:3:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "5135:3:34"
                                    },
                                    "nativeSrc": "5135:22:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5135:22:34"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "5159:7:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "5159:7:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "5114:20:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "5114:20:34"
                                },
                                "nativeSrc": "5114:53:34",
                                "nodeType": "YulFunctionCall",
                                "src": "5114:53:34"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "5104:6:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "5104:6:34"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nativeSrc": "4855:329:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "4891:9:34",
                        "nodeType": "YulTypedName",
                        "src": "4891:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "4902:7:34",
                        "nodeType": "YulTypedName",
                        "src": "4902:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "4914:6:34",
                        "nodeType": "YulTypedName",
                        "src": "4914:6:34",
                        "type": ""
                      }
                    ],
                    "src": "4855:329:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "5255:53:34",
                      "nodeType": "YulBlock",
                      "src": "5255:53:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "5272:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "5272:3:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "5295:5:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "5295:5:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_address",
                                  "nativeSrc": "5277:17:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "5277:17:34"
                                },
                                "nativeSrc": "5277:24:34",
                                "nodeType": "YulFunctionCall",
                                "src": "5277:24:34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "5265:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "5265:6:34"
                            },
                            "nativeSrc": "5265:37:34",
                            "nodeType": "YulFunctionCall",
                            "src": "5265:37:34"
                          },
                          "nativeSrc": "5265:37:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "5265:37:34"
                        }
                      ]
                    },
                    "name": "abi_encode_t_address_to_t_address_fromStack",
                    "nativeSrc": "5190:118:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "5243:5:34",
                        "nodeType": "YulTypedName",
                        "src": "5243:5:34",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "5250:3:34",
                        "nodeType": "YulTypedName",
                        "src": "5250:3:34",
                        "type": ""
                      }
                    ],
                    "src": "5190:118:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "5412:124:34",
                      "nodeType": "YulBlock",
                      "src": "5412:124:34",
                      "statements": [
                        {
                          "nativeSrc": "5422:26:34",
                          "nodeType": "YulAssignment",
                          "src": "5422:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "5434:9:34",
                                "nodeType": "YulIdentifier",
                                "src": "5434:9:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "5445:2:34",
                                "nodeType": "YulLiteral",
                                "src": "5445:2:34",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "5430:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "5430:3:34"
                            },
                            "nativeSrc": "5430:18:34",
                            "nodeType": "YulFunctionCall",
                            "src": "5430:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "5422:4:34",
                              "nodeType": "YulIdentifier",
                              "src": "5422:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "5502:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "5502:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "5515:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "5515:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5526:1:34",
                                    "nodeType": "YulLiteral",
                                    "src": "5526:1:34",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "5511:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "5511:3:34"
                                },
                                "nativeSrc": "5511:17:34",
                                "nodeType": "YulFunctionCall",
                                "src": "5511:17:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "5458:43:34",
                              "nodeType": "YulIdentifier",
                              "src": "5458:43:34"
                            },
                            "nativeSrc": "5458:71:34",
                            "nodeType": "YulFunctionCall",
                            "src": "5458:71:34"
                          },
                          "nativeSrc": "5458:71:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "5458:71:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nativeSrc": "5314:222:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "5384:9:34",
                        "nodeType": "YulTypedName",
                        "src": "5384:9:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "5396:6:34",
                        "nodeType": "YulTypedName",
                        "src": "5396:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "5407:4:34",
                        "nodeType": "YulTypedName",
                        "src": "5407:4:34",
                        "type": ""
                      }
                    ],
                    "src": "5314:222:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "5625:391:34",
                      "nodeType": "YulBlock",
                      "src": "5625:391:34",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "5671:83:34",
                            "nodeType": "YulBlock",
                            "src": "5671:83:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "5673:77:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "5673:77:34"
                                  },
                                  "nativeSrc": "5673:79:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5673:79:34"
                                },
                                "nativeSrc": "5673:79:34",
                                "nodeType": "YulExpressionStatement",
                                "src": "5673:79:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "5646:7:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "5646:7:34"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "5655:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "5655:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "5642:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "5642:3:34"
                                },
                                "nativeSrc": "5642:23:34",
                                "nodeType": "YulFunctionCall",
                                "src": "5642:23:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "5667:2:34",
                                "nodeType": "YulLiteral",
                                "src": "5667:2:34",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "5638:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "5638:3:34"
                            },
                            "nativeSrc": "5638:32:34",
                            "nodeType": "YulFunctionCall",
                            "src": "5638:32:34"
                          },
                          "nativeSrc": "5635:119:34",
                          "nodeType": "YulIf",
                          "src": "5635:119:34"
                        },
                        {
                          "nativeSrc": "5764:117:34",
                          "nodeType": "YulBlock",
                          "src": "5764:117:34",
                          "statements": [
                            {
                              "nativeSrc": "5779:15:34",
                              "nodeType": "YulVariableDeclaration",
                              "src": "5779:15:34",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "5793:1:34",
                                "nodeType": "YulLiteral",
                                "src": "5793:1:34",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "5783:6:34",
                                  "nodeType": "YulTypedName",
                                  "src": "5783:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "5808:63:34",
                              "nodeType": "YulAssignment",
                              "src": "5808:63:34",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "5843:9:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "5843:9:34"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "5854:6:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "5854:6:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "5839:3:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "5839:3:34"
                                    },
                                    "nativeSrc": "5839:22:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5839:22:34"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "5863:7:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "5863:7:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "5818:20:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "5818:20:34"
                                },
                                "nativeSrc": "5818:53:34",
                                "nodeType": "YulFunctionCall",
                                "src": "5818:53:34"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "5808:6:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "5808:6:34"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "5891:118:34",
                          "nodeType": "YulBlock",
                          "src": "5891:118:34",
                          "statements": [
                            {
                              "nativeSrc": "5906:16:34",
                              "nodeType": "YulVariableDeclaration",
                              "src": "5906:16:34",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "5920:2:34",
                                "nodeType": "YulLiteral",
                                "src": "5920:2:34",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "5910:6:34",
                                  "nodeType": "YulTypedName",
                                  "src": "5910:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "5936:63:34",
                              "nodeType": "YulAssignment",
                              "src": "5936:63:34",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "5971:9:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "5971:9:34"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "5982:6:34",
                                        "nodeType": "YulIdentifier",
                                        "src": "5982:6:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "5967:3:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "5967:3:34"
                                    },
                                    "nativeSrc": "5967:22:34",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5967:22:34"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "5991:7:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "5991:7:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "5946:20:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "5946:20:34"
                                },
                                "nativeSrc": "5946:53:34",
                                "nodeType": "YulFunctionCall",
                                "src": "5946:53:34"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nativeSrc": "5936:6:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "5936:6:34"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_address",
                    "nativeSrc": "5542:474:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "5587:9:34",
                        "nodeType": "YulTypedName",
                        "src": "5587:9:34",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "5598:7:34",
                        "nodeType": "YulTypedName",
                        "src": "5598:7:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "5610:6:34",
                        "nodeType": "YulTypedName",
                        "src": "5610:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "5618:6:34",
                        "nodeType": "YulTypedName",
                        "src": "5618:6:34",
                        "type": ""
                      }
                    ],
                    "src": "5542:474:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "6050:152:34",
                      "nodeType": "YulBlock",
                      "src": "6050:152:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "6067:1:34",
                                "nodeType": "YulLiteral",
                                "src": "6067:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6070:77:34",
                                "nodeType": "YulLiteral",
                                "src": "6070:77:34",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "6060:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "6060:6:34"
                            },
                            "nativeSrc": "6060:88:34",
                            "nodeType": "YulFunctionCall",
                            "src": "6060:88:34"
                          },
                          "nativeSrc": "6060:88:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "6060:88:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "6164:1:34",
                                "nodeType": "YulLiteral",
                                "src": "6164:1:34",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6167:4:34",
                                "nodeType": "YulLiteral",
                                "src": "6167:4:34",
                                "type": "",
                                "value": "0x22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "6157:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "6157:6:34"
                            },
                            "nativeSrc": "6157:15:34",
                            "nodeType": "YulFunctionCall",
                            "src": "6157:15:34"
                          },
                          "nativeSrc": "6157:15:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "6157:15:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "6188:1:34",
                                "nodeType": "YulLiteral",
                                "src": "6188:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6191:4:34",
                                "nodeType": "YulLiteral",
                                "src": "6191:4:34",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "6181:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "6181:6:34"
                            },
                            "nativeSrc": "6181:15:34",
                            "nodeType": "YulFunctionCall",
                            "src": "6181:15:34"
                          },
                          "nativeSrc": "6181:15:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "6181:15:34"
                        }
                      ]
                    },
                    "name": "panic_error_0x22",
                    "nativeSrc": "6022:180:34",
                    "nodeType": "YulFunctionDefinition",
                    "src": "6022:180:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "6259:269:34",
                      "nodeType": "YulBlock",
                      "src": "6259:269:34",
                      "statements": [
                        {
                          "nativeSrc": "6269:22:34",
                          "nodeType": "YulAssignment",
                          "src": "6269:22:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "6283:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "6283:4:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6289:1:34",
                                "nodeType": "YulLiteral",
                                "src": "6289:1:34",
                                "type": "",
                                "value": "2"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nativeSrc": "6279:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "6279:3:34"
                            },
                            "nativeSrc": "6279:12:34",
                            "nodeType": "YulFunctionCall",
                            "src": "6279:12:34"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nativeSrc": "6269:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "6269:6:34"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "6300:38:34",
                          "nodeType": "YulVariableDeclaration",
                          "src": "6300:38:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "6330:4:34",
                                "nodeType": "YulIdentifier",
                                "src": "6330:4:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6336:1:34",
                                "nodeType": "YulLiteral",
                                "src": "6336:1:34",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "6326:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "6326:3:34"
                            },
                            "nativeSrc": "6326:12:34",
                            "nodeType": "YulFunctionCall",
                            "src": "6326:12:34"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nativeSrc": "6304:18:34",
                              "nodeType": "YulTypedName",
                              "src": "6304:18:34",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "6377:51:34",
                            "nodeType": "YulBlock",
                            "src": "6377:51:34",
                            "statements": [
                              {
                                "nativeSrc": "6391:27:34",
                                "nodeType": "YulAssignment",
                                "src": "6391:27:34",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nativeSrc": "6405:6:34",
                                      "nodeType": "YulIdentifier",
                                      "src": "6405:6:34"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "6413:4:34",
                                      "nodeType": "YulLiteral",
                                      "src": "6413:4:34",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "6401:3:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "6401:3:34"
                                  },
                                  "nativeSrc": "6401:17:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6401:17:34"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "6391:6:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "6391:6:34"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "6357:18:34",
                                "nodeType": "YulIdentifier",
                                "src": "6357:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "6350:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "6350:6:34"
                            },
                            "nativeSrc": "6350:26:34",
                            "nodeType": "YulFunctionCall",
                            "src": "6350:26:34"
                          },
                          "nativeSrc": "6347:81:34",
                          "nodeType": "YulIf",
                          "src": "6347:81:34"
                        },
                        {
                          "body": {
                            "nativeSrc": "6480:42:34",
                            "nodeType": "YulBlock",
                            "src": "6480:42:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x22",
                                    "nativeSrc": "6494:16:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "6494:16:34"
                                  },
                                  "nativeSrc": "6494:18:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6494:18:34"
                                },
                                "nativeSrc": "6494:18:34",
                                "nodeType": "YulExpressionStatement",
                                "src": "6494:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "6444:18:34",
                                "nodeType": "YulIdentifier",
                                "src": "6444:18:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "6467:6:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "6467:6:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "6475:2:34",
                                    "nodeType": "YulLiteral",
                                    "src": "6475:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "6464:2:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "6464:2:34"
                                },
                                "nativeSrc": "6464:14:34",
                                "nodeType": "YulFunctionCall",
                                "src": "6464:14:34"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nativeSrc": "6441:2:34",
                              "nodeType": "YulIdentifier",
                              "src": "6441:2:34"
                            },
                            "nativeSrc": "6441:38:34",
                            "nodeType": "YulFunctionCall",
                            "src": "6441:38:34"
                          },
                          "nativeSrc": "6438:84:34",
                          "nodeType": "YulIf",
                          "src": "6438:84:34"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nativeSrc": "6208:320:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nativeSrc": "6243:4:34",
                        "nodeType": "YulTypedName",
                        "src": "6243:4:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nativeSrc": "6252:6:34",
                        "nodeType": "YulTypedName",
                        "src": "6252:6:34",
                        "type": ""
                      }
                    ],
                    "src": "6208:320:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "6688:288:34",
                      "nodeType": "YulBlock",
                      "src": "6688:288:34",
                      "statements": [
                        {
                          "nativeSrc": "6698:26:34",
                          "nodeType": "YulAssignment",
                          "src": "6698:26:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "6710:9:34",
                                "nodeType": "YulIdentifier",
                                "src": "6710:9:34"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6721:2:34",
                                "nodeType": "YulLiteral",
                                "src": "6721:2:34",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "6706:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "6706:3:34"
                            },
                            "nativeSrc": "6706:18:34",
                            "nodeType": "YulFunctionCall",
                            "src": "6706:18:34"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "6698:4:34",
                              "nodeType": "YulIdentifier",
                              "src": "6698:4:34"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "6778:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "6778:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "6791:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "6791:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "6802:1:34",
                                    "nodeType": "YulLiteral",
                                    "src": "6802:1:34",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "6787:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "6787:3:34"
                                },
                                "nativeSrc": "6787:17:34",
                                "nodeType": "YulFunctionCall",
                                "src": "6787:17:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "6734:43:34",
                              "nodeType": "YulIdentifier",
                              "src": "6734:43:34"
                            },
                            "nativeSrc": "6734:71:34",
                            "nodeType": "YulFunctionCall",
                            "src": "6734:71:34"
                          },
                          "nativeSrc": "6734:71:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "6734:71:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nativeSrc": "6859:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "6859:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "6872:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "6872:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "6883:2:34",
                                    "nodeType": "YulLiteral",
                                    "src": "6883:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "6868:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "6868:3:34"
                                },
                                "nativeSrc": "6868:18:34",
                                "nodeType": "YulFunctionCall",
                                "src": "6868:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nativeSrc": "6815:43:34",
                              "nodeType": "YulIdentifier",
                              "src": "6815:43:34"
                            },
                            "nativeSrc": "6815:72:34",
                            "nodeType": "YulFunctionCall",
                            "src": "6815:72:34"
                          },
                          "nativeSrc": "6815:72:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "6815:72:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nativeSrc": "6941:6:34",
                                "nodeType": "YulIdentifier",
                                "src": "6941:6:34"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "6954:9:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "6954:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "6965:2:34",
                                    "nodeType": "YulLiteral",
                                    "src": "6965:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "6950:3:34",
                                  "nodeType": "YulIdentifier",
                                  "src": "6950:3:34"
                                },
                                "nativeSrc": "6950:18:34",
                                "nodeType": "YulFunctionCall",
                                "src": "6950:18:34"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nativeSrc": "6897:43:34",
                              "nodeType": "YulIdentifier",
                              "src": "6897:43:34"
                            },
                            "nativeSrc": "6897:72:34",
                            "nodeType": "YulFunctionCall",
                            "src": "6897:72:34"
                          },
                          "nativeSrc": "6897:72:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "6897:72:34"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
                    "nativeSrc": "6534:442:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "6644:9:34",
                        "nodeType": "YulTypedName",
                        "src": "6644:9:34",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "6656:6:34",
                        "nodeType": "YulTypedName",
                        "src": "6656:6:34",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "6664:6:34",
                        "nodeType": "YulTypedName",
                        "src": "6664:6:34",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "6672:6:34",
                        "nodeType": "YulTypedName",
                        "src": "6672:6:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "6683:4:34",
                        "nodeType": "YulTypedName",
                        "src": "6683:4:34",
                        "type": ""
                      }
                    ],
                    "src": "6534:442:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "7010:152:34",
                      "nodeType": "YulBlock",
                      "src": "7010:152:34",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "7027:1:34",
                                "nodeType": "YulLiteral",
                                "src": "7027:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "7030:77:34",
                                "nodeType": "YulLiteral",
                                "src": "7030:77:34",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "7020:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "7020:6:34"
                            },
                            "nativeSrc": "7020:88:34",
                            "nodeType": "YulFunctionCall",
                            "src": "7020:88:34"
                          },
                          "nativeSrc": "7020:88:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "7020:88:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "7124:1:34",
                                "nodeType": "YulLiteral",
                                "src": "7124:1:34",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "7127:4:34",
                                "nodeType": "YulLiteral",
                                "src": "7127:4:34",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "7117:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "7117:6:34"
                            },
                            "nativeSrc": "7117:15:34",
                            "nodeType": "YulFunctionCall",
                            "src": "7117:15:34"
                          },
                          "nativeSrc": "7117:15:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "7117:15:34"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "7148:1:34",
                                "nodeType": "YulLiteral",
                                "src": "7148:1:34",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "7151:4:34",
                                "nodeType": "YulLiteral",
                                "src": "7151:4:34",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "7141:6:34",
                              "nodeType": "YulIdentifier",
                              "src": "7141:6:34"
                            },
                            "nativeSrc": "7141:15:34",
                            "nodeType": "YulFunctionCall",
                            "src": "7141:15:34"
                          },
                          "nativeSrc": "7141:15:34",
                          "nodeType": "YulExpressionStatement",
                          "src": "7141:15:34"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nativeSrc": "6982:180:34",
                    "nodeType": "YulFunctionDefinition",
                    "src": "6982:180:34"
                  },
                  {
                    "body": {
                      "nativeSrc": "7212:147:34",
                      "nodeType": "YulBlock",
                      "src": "7212:147:34",
                      "statements": [
                        {
                          "nativeSrc": "7222:25:34",
                          "nodeType": "YulAssignment",
                          "src": "7222:25:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nativeSrc": "7245:1:34",
                                "nodeType": "YulIdentifier",
                                "src": "7245:1:34"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nativeSrc": "7227:17:34",
                              "nodeType": "YulIdentifier",
                              "src": "7227:17:34"
                            },
                            "nativeSrc": "7227:20:34",
                            "nodeType": "YulFunctionCall",
                            "src": "7227:20:34"
                          },
                          "variableNames": [
                            {
                              "name": "x",
                              "nativeSrc": "7222:1:34",
                              "nodeType": "YulIdentifier",
                              "src": "7222:1:34"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "7256:25:34",
                          "nodeType": "YulAssignment",
                          "src": "7256:25:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nativeSrc": "7279:1:34",
                                "nodeType": "YulIdentifier",
                                "src": "7279:1:34"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nativeSrc": "7261:17:34",
                              "nodeType": "YulIdentifier",
                              "src": "7261:17:34"
                            },
                            "nativeSrc": "7261:20:34",
                            "nodeType": "YulFunctionCall",
                            "src": "7261:20:34"
                          },
                          "variableNames": [
                            {
                              "name": "y",
                              "nativeSrc": "7256:1:34",
                              "nodeType": "YulIdentifier",
                              "src": "7256:1:34"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "7290:16:34",
                          "nodeType": "YulAssignment",
                          "src": "7290:16:34",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nativeSrc": "7301:1:34",
                                "nodeType": "YulIdentifier",
                                "src": "7301:1:34"
                              },
                              {
                                "name": "y",
                                "nativeSrc": "7304:1:34",
                                "nodeType": "YulIdentifier",
                                "src": "7304:1:34"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "7297:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "7297:3:34"
                            },
                            "nativeSrc": "7297:9:34",
                            "nodeType": "YulFunctionCall",
                            "src": "7297:9:34"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nativeSrc": "7290:3:34",
                              "nodeType": "YulIdentifier",
                              "src": "7290:3:34"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "7330:22:34",
                            "nodeType": "YulBlock",
                            "src": "7330:22:34",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nativeSrc": "7332:16:34",
                                    "nodeType": "YulIdentifier",
                                    "src": "7332:16:34"
                                  },
                                  "nativeSrc": "7332:18:34",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7332:18:34"
                                },
                                "nativeSrc": "7332:18:34",
                                "nodeType": "YulExpressionStatement",
                                "src": "7332:18:34"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nativeSrc": "7322:1:34",
                                "nodeType": "YulIdentifier",
                                "src": "7322:1:34"
                              },
                              {
                                "name": "sum",
                                "nativeSrc": "7325:3:34",
                                "nodeType": "YulIdentifier",
                                "src": "7325:3:34"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "7319:2:34",
                              "nodeType": "YulIdentifier",
                              "src": "7319:2:34"
                            },
                            "nativeSrc": "7319:10:34",
                            "nodeType": "YulFunctionCall",
                            "src": "7319:10:34"
                          },
                          "nativeSrc": "7316:36:34",
                          "nodeType": "YulIf",
                          "src": "7316:36:34"
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nativeSrc": "7168:191:34",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nativeSrc": "7199:1:34",
                        "nodeType": "YulTypedName",
                        "src": "7199:1:34",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nativeSrc": "7202:1:34",
                        "nodeType": "YulTypedName",
                        "src": "7202:1:34",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nativeSrc": "7208:3:34",
                        "nodeType": "YulTypedName",
                        "src": "7208:3:34",
                        "type": ""
                      }
                    ],
                    "src": "7168:191:34"
                  }
                ]
              },
              "contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n}\n",
              "id": 34,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106100cf5760003560e01c806370a082311161008c57806395d89b411161006657806395d89b4114610202578063a9059cbb14610220578063dd62ed3e14610250578063f2fde38b14610280576100cf565b806370a08231146101aa578063715018a6146101da5780638da5cb5b146101e4576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce5671461017057806340c10f191461018e575b600080fd5b6100dc61029c565b6040516100e99190610def565b60405180910390f35b61010c60048036038101906101079190610eaa565b61032e565b6040516101199190610f05565b60405180910390f35b61012a610351565b6040516101379190610f2f565b60405180910390f35b61015a60048036038101906101559190610f4a565b61035b565b6040516101679190610f05565b60405180910390f35b61017861038a565b6040516101859190610fb9565b60405180910390f35b6101a860048036038101906101a39190610eaa565b610393565b005b6101c460048036038101906101bf9190610fd4565b6103a9565b6040516101d19190610f2f565b60405180910390f35b6101e26103f1565b005b6101ec610405565b6040516101f99190611010565b60405180910390f35b61020a61042f565b6040516102179190610def565b60405180910390f35b61023a60048036038101906102359190610eaa565b6104c1565b6040516102479190610f05565b60405180910390f35b61026a6004803603810190610265919061102b565b6104e4565b6040516102779190610f2f565b60405180910390f35b61029a60048036038101906102959190610fd4565b61056b565b005b6060600380546102ab9061109a565b80601f01602080910402602001604051908101604052809291908181526020018280546102d79061109a565b80156103245780601f106102f957610100808354040283529160200191610324565b820191906000526020600020905b81548152906001019060200180831161030757829003601f168201915b5050505050905090565b6000806103396105f1565b90506103468185856105f9565b600191505092915050565b6000600254905090565b6000806103666105f1565b905061037385828561060b565b61037e8585856106a0565b60019150509392505050565b60006012905090565b61039b610794565b6103a5828261081b565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6103f9610794565b610403600061089d565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461043e9061109a565b80601f016020809104026020016040519081016040528092919081815260200182805461046a9061109a565b80156104b75780601f1061048c576101008083540402835291602001916104b7565b820191906000526020600020905b81548152906001019060200180831161049a57829003601f168201915b5050505050905090565b6000806104cc6105f1565b90506104d98185856106a0565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610573610794565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105e55760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016105dc9190611010565b60405180910390fd5b6105ee8161089d565b50565b600033905090565b6106068383836001610963565b505050565b600061061784846104e4565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81101561069a578181101561068a578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610681939291906110cb565b60405180910390fd5b61069984848484036000610963565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107125760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016107099190611010565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107845760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161077b9190611010565b60405180910390fd5b61078f838383610b3a565b505050565b61079c6105f1565b73ffffffffffffffffffffffffffffffffffffffff166107ba610405565b73ffffffffffffffffffffffffffffffffffffffff1614610819576107dd6105f1565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108109190611010565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361088d5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016108849190611010565b60405180910390fd5b61089960008383610b3a565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036109d55760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016109cc9190611010565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a475760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610a3e9190611010565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610b34578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610b2b9190610f2f565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b8c578060026000828254610b809190611131565b92505081905550610c5f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c18578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610c0f939291906110cb565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ca85780600260008282540392505081905550610cf5565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d529190610f2f565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d99578082015181840152602081019050610d7e565b60008484015250505050565b6000601f19601f8301169050919050565b6000610dc182610d5f565b610dcb8185610d6a565b9350610ddb818560208601610d7b565b610de481610da5565b840191505092915050565b60006020820190508181036000830152610e098184610db6565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e4182610e16565b9050919050565b610e5181610e36565b8114610e5c57600080fd5b50565b600081359050610e6e81610e48565b92915050565b6000819050919050565b610e8781610e74565b8114610e9257600080fd5b50565b600081359050610ea481610e7e565b92915050565b60008060408385031215610ec157610ec0610e11565b5b6000610ecf85828601610e5f565b9250506020610ee085828601610e95565b9150509250929050565b60008115159050919050565b610eff81610eea565b82525050565b6000602082019050610f1a6000830184610ef6565b92915050565b610f2981610e74565b82525050565b6000602082019050610f446000830184610f20565b92915050565b600080600060608486031215610f6357610f62610e11565b5b6000610f7186828701610e5f565b9350506020610f8286828701610e5f565b9250506040610f9386828701610e95565b9150509250925092565b600060ff82169050919050565b610fb381610f9d565b82525050565b6000602082019050610fce6000830184610faa565b92915050565b600060208284031215610fea57610fe9610e11565b5b6000610ff884828501610e5f565b91505092915050565b61100a81610e36565b82525050565b60006020820190506110256000830184611001565b92915050565b6000806040838503121561104257611041610e11565b5b600061105085828601610e5f565b925050602061106185828601610e5f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806110b257607f821691505b6020821081036110c5576110c461106b565b5b50919050565b60006060820190506110e06000830186611001565b6110ed6020830185610f20565b6110fa6040830184610f20565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061113c82610e74565b915061114783610e74565b925082820190508082111561115f5761115e611102565b5b9291505056fea2646970667358221220ba6e1025bd3915ea9ad7d7a9d93e541077ba1b0424f0c1c19384a020bcc30d9764736f6c634300081c0033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x280 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1DA JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E4 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x18E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x29C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0xDEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x107 SWAP2 SWAP1 PUSH2 0xEAA JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0xF05 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12A PUSH2 0x351 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x137 SWAP2 SWAP1 PUSH2 0xF2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x155 SWAP2 SWAP1 PUSH2 0xF4A JUMP JUMPDEST PUSH2 0x35B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x167 SWAP2 SWAP1 PUSH2 0xF05 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x178 PUSH2 0x38A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x185 SWAP2 SWAP1 PUSH2 0xFB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0xEAA JUMP JUMPDEST PUSH2 0x393 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST PUSH2 0x3A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D1 SWAP2 SWAP1 PUSH2 0xF2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E2 PUSH2 0x3F1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1EC PUSH2 0x405 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F9 SWAP2 SWAP1 PUSH2 0x1010 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20A PUSH2 0x42F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x217 SWAP2 SWAP1 PUSH2 0xDEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x235 SWAP2 SWAP1 PUSH2 0xEAA JUMP JUMPDEST PUSH2 0x4C1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x247 SWAP2 SWAP1 PUSH2 0xF05 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x26A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x102B JUMP JUMPDEST PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x277 SWAP2 SWAP1 PUSH2 0xF2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x29A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x295 SWAP2 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST PUSH2 0x56B JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x2AB SWAP1 PUSH2 0x109A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2D7 SWAP1 PUSH2 0x109A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x324 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2F9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x324 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x307 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x339 PUSH2 0x5F1 JUMP JUMPDEST SWAP1 POP PUSH2 0x346 DUP2 DUP6 DUP6 PUSH2 0x5F9 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x366 PUSH2 0x5F1 JUMP JUMPDEST SWAP1 POP PUSH2 0x373 DUP6 DUP3 DUP6 PUSH2 0x60B JUMP JUMPDEST PUSH2 0x37E DUP6 DUP6 DUP6 PUSH2 0x6A0 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x39B PUSH2 0x794 JUMP JUMPDEST PUSH2 0x3A5 DUP3 DUP3 PUSH2 0x81B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3F9 PUSH2 0x794 JUMP JUMPDEST PUSH2 0x403 PUSH1 0x0 PUSH2 0x89D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x43E SWAP1 PUSH2 0x109A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x46A SWAP1 PUSH2 0x109A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4B7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x48C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4B7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x49A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4CC PUSH2 0x5F1 JUMP JUMPDEST SWAP1 POP PUSH2 0x4D9 DUP2 DUP6 DUP6 PUSH2 0x6A0 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x573 PUSH2 0x794 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x5E5 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DC SWAP2 SWAP1 PUSH2 0x1010 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5EE DUP2 PUSH2 0x89D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x606 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x963 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x617 DUP5 DUP5 PUSH2 0x4E4 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 LT ISZERO PUSH2 0x69A JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x68A JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x681 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x10CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x699 DUP5 DUP5 DUP5 DUP5 SUB PUSH1 0x0 PUSH2 0x963 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x712 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x709 SWAP2 SWAP1 PUSH2 0x1010 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x784 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x77B SWAP2 SWAP1 PUSH2 0x1010 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x78F DUP4 DUP4 DUP4 PUSH2 0xB3A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x79C PUSH2 0x5F1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x7BA PUSH2 0x405 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x819 JUMPI PUSH2 0x7DD PUSH2 0x5F1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x810 SWAP2 SWAP1 PUSH2 0x1010 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x88D JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x884 SWAP2 SWAP1 PUSH2 0x1010 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x899 PUSH1 0x0 DUP4 DUP4 PUSH2 0xB3A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9D5 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9CC SWAP2 SWAP1 PUSH2 0x1010 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA47 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA3E SWAP2 SWAP1 PUSH2 0x1010 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xB34 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0xB2B SWAP2 SWAP1 PUSH2 0xF2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xB8C JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xB80 SWAP2 SWAP1 PUSH2 0x1131 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xC5F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xC18 JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC0F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x10CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xCA8 JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xCF5 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xD52 SWAP2 SWAP1 PUSH2 0xF2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD99 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xD7E JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDC1 DUP3 PUSH2 0xD5F JUMP JUMPDEST PUSH2 0xDCB DUP2 DUP6 PUSH2 0xD6A JUMP JUMPDEST SWAP4 POP PUSH2 0xDDB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xD7B JUMP JUMPDEST PUSH2 0xDE4 DUP2 PUSH2 0xDA5 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE09 DUP2 DUP5 PUSH2 0xDB6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE41 DUP3 PUSH2 0xE16 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE51 DUP2 PUSH2 0xE36 JUMP JUMPDEST DUP2 EQ PUSH2 0xE5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE6E DUP2 PUSH2 0xE48 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE87 DUP2 PUSH2 0xE74 JUMP JUMPDEST DUP2 EQ PUSH2 0xE92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xEA4 DUP2 PUSH2 0xE7E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEC1 JUMPI PUSH2 0xEC0 PUSH2 0xE11 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xECF DUP6 DUP3 DUP7 ADD PUSH2 0xE5F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xEE0 DUP6 DUP3 DUP7 ADD PUSH2 0xE95 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xEFF DUP2 PUSH2 0xEEA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xF1A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xEF6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xF29 DUP2 PUSH2 0xE74 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xF44 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xF20 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xF63 JUMPI PUSH2 0xF62 PUSH2 0xE11 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xF71 DUP7 DUP3 DUP8 ADD PUSH2 0xE5F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xF82 DUP7 DUP3 DUP8 ADD PUSH2 0xE5F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xF93 DUP7 DUP3 DUP8 ADD PUSH2 0xE95 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFB3 DUP2 PUSH2 0xF9D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFCE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xFAA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFEA JUMPI PUSH2 0xFE9 PUSH2 0xE11 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xFF8 DUP5 DUP3 DUP6 ADD PUSH2 0xE5F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x100A DUP2 PUSH2 0xE36 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1025 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1001 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1042 JUMPI PUSH2 0x1041 PUSH2 0xE11 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1050 DUP6 DUP3 DUP7 ADD PUSH2 0xE5F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1061 DUP6 DUP3 DUP7 ADD PUSH2 0xE5F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x10B2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x10C5 JUMPI PUSH2 0x10C4 PUSH2 0x106B JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x10E0 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1001 JUMP JUMPDEST PUSH2 0x10ED PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xF20 JUMP JUMPDEST PUSH2 0x10FA PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xF20 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x113C DUP3 PUSH2 0xE74 JUMP JUMPDEST SWAP2 POP PUSH2 0x1147 DUP4 PUSH2 0xE74 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x115F JUMPI PUSH2 0x115E PUSH2 0x1102 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBA PUSH15 0x1025BD3915EA9AD7D7A9D93E541077 0xBA SHL DIV 0x24 CREATE 0xC1 0xC1 SWAP4 DUP5 LOG0 KECCAK256 0xBC 0xC3 0xD SWAP8 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ",
          "sourceMap": "168:312:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1779:89:10;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3998:186;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2849:97;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4776:244;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2707:82;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;385:93:32;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3004:116:10;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2293:101:0;;;:::i;:::-;;1638:85;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1981:93:10;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3315:178;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3551:140;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2543:215:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1779:89:10;1824:13;1856:5;1849:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1779:89;:::o;3998:186::-;4071:4;4087:13;4103:12;:10;:12::i;:::-;4087:28;;4125:31;4134:5;4141:7;4150:5;4125:8;:31::i;:::-;4173:4;4166:11;;;3998:186;;;;:::o;2849:97::-;2901:7;2927:12;;2920:19;;2849:97;:::o;4776:244::-;4863:4;4879:15;4897:12;:10;:12::i;:::-;4879:30;;4919:37;4935:4;4941:7;4950:5;4919:15;:37::i;:::-;4966:26;4976:4;4982:2;4986:5;4966:9;:26::i;:::-;5009:4;5002:11;;;4776:244;;;;;:::o;2707:82::-;2756:5;2780:2;2773:9;;2707:82;:::o;385:93:32:-;1531:13:0;:11;:13::i;:::-;454:17:32::1;460:2;464:6;454:5;:17::i;:::-;385:93:::0;;:::o;3004:116:10:-;3069:7;3095:9;:18;3105:7;3095:18;;;;;;;;;;;;;;;;3088:25;;3004:116;;;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1638:85::-;1684:7;1710:6;;;;;;;;;;;1703:13;;1638:85;:::o;1981:93:10:-;2028:13;2060:7;2053:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1981:93;:::o;3315:178::-;3384:4;3400:13;3416:12;:10;:12::i;:::-;3400:28;;3438:27;3448:5;3455:2;3459:5;3438:9;:27::i;:::-;3482:4;3475:11;;;3315:178;;;;:::o;3551:140::-;3631:7;3657:11;:18;3669:5;3657:18;;;;;;;;;;;;;;;:27;3676:7;3657:27;;;;;;;;;;;;;;;;3650:34;;3551:140;;;;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;2647:1:::1;2627:22;;:8;:22;;::::0;2623:91:::1;;2700:1;2672:31;;;;;;;;;;;:::i;:::-;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;656:96:21:-;709:7;735:10;728:17;;656:96;:::o;8726:128:10:-;8810:37;8819:5;8826:7;8835:5;8842:4;8810:8;:37::i;:::-;8726:128;;;:::o;10415:476::-;10514:24;10541:25;10551:5;10558:7;10541:9;:25::i;:::-;10514:52;;10599:17;10580:16;:36;10576:309;;;10655:5;10636:16;:24;10632:130;;;10714:7;10723:16;10741:5;10687:60;;;;;;;;;;;;;:::i;:::-;;;;;;;;10632:130;10803:57;10812:5;10819:7;10847:5;10828:16;:24;10854:5;10803:8;:57::i;:::-;10576:309;10504:387;10415:476;;;:::o;5393:300::-;5492:1;5476:18;;:4;:18;;;5472:86;;5544:1;5517:30;;;;;;;;;;;:::i;:::-;;;;;;;;5472:86;5585:1;5571:16;;:2;:16;;;5567:86;;5639:1;5610:32;;;;;;;;;;;:::i;:::-;;;;;;;;5567:86;5662:24;5670:4;5676:2;5680:5;5662:7;:24::i;:::-;5393:300;;;:::o;1796:162:0:-;1866:12;:10;:12::i;:::-;1855:23;;:7;:5;:7::i;:::-;:23;;;1851:101;;1928:12;:10;:12::i;:::-;1901:40;;;;;;;;;;;:::i;:::-;;;;;;;;1851:101;1796:162::o;7458:208:10:-;7547:1;7528:21;;:7;:21;;;7524:91;;7601:1;7572:32;;;;;;;;;;;:::i;:::-;;;;;;;;7524:91;7624:35;7640:1;7644:7;7653:5;7624:7;:35::i;:::-;7458:208;;:::o;2912:187:0:-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;9701:432:10:-;9830:1;9813:19;;:5;:19;;;9809:89;;9884:1;9855:32;;;;;;;;;;;:::i;:::-;;;;;;;;9809:89;9930:1;9911:21;;:7;:21;;;9907:90;;9983:1;9955:31;;;;;;;;;;;:::i;:::-;;;;;;;;9907:90;10036:5;10006:11;:18;10018:5;10006:18;;;;;;;;;;;;;;;:27;10025:7;10006:27;;;;;;;;;;;;;;;:35;;;;10055:9;10051:76;;;10101:7;10085:31;;10094:5;10085:31;;;10110:5;10085:31;;;;;;:::i;:::-;;;;;;;;10051:76;9701:432;;;;:::o;6008:1107::-;6113:1;6097:18;;:4;:18;;;6093:540;;6249:5;6233:12;;:21;;;;;;;:::i;:::-;;;;;;;;6093:540;;;6285:19;6307:9;:15;6317:4;6307:15;;;;;;;;;;;;;;;;6285:37;;6354:5;6340:11;:19;6336:115;;;6411:4;6417:11;6430:5;6386:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;6336:115;6603:5;6589:11;:19;6571:9;:15;6581:4;6571:15;;;;;;;;;;;;;;;:37;;;;6271:362;6093:540;6661:1;6647:16;;:2;:16;;;6643:425;;6826:5;6810:12;;:21;;;;;;;;;;;6643:425;;;7038:5;7021:9;:13;7031:2;7021:13;;;;;;;;;;;;;;;;:22;;;;;;;;;;;6643:425;7098:2;7083:25;;7092:4;7083:25;;;7102:5;7083:25;;;;;;:::i;:::-;;;;;;;;6008:1107;;;:::o;7:99:34:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:248::-;369:1;379:113;393:6;390:1;387:13;379:113;;;478:1;473:3;469:11;463:18;459:1;454:3;450:11;443:39;415:2;412:1;408:10;403:15;;379:113;;;526:1;517:6;512:3;508:16;501:27;349:186;287:248;;;:::o;541:102::-;582:6;633:2;629:7;624:2;617:5;613:14;609:28;599:38;;541:102;;;:::o;649:377::-;737:3;765:39;798:5;765:39;:::i;:::-;820:71;884:6;879:3;820:71;:::i;:::-;813:78;;900:65;958:6;953:3;946:4;939:5;935:16;900:65;:::i;:::-;990:29;1012:6;990:29;:::i;:::-;985:3;981:39;974:46;;741:285;649:377;;;;:::o;1032:313::-;1145:4;1183:2;1172:9;1168:18;1160:26;;1232:9;1226:4;1222:20;1218:1;1207:9;1203:17;1196:47;1260:78;1333:4;1324:6;1260:78;:::i;:::-;1252:86;;1032:313;;;;:::o;1432:117::-;1541:1;1538;1531:12;1678:126;1715:7;1755:42;1748:5;1744:54;1733:65;;1678:126;;;:::o;1810:96::-;1847:7;1876:24;1894:5;1876:24;:::i;:::-;1865:35;;1810:96;;;:::o;1912:122::-;1985:24;2003:5;1985:24;:::i;:::-;1978:5;1975:35;1965:63;;2024:1;2021;2014:12;1965:63;1912:122;:::o;2040:139::-;2086:5;2124:6;2111:20;2102:29;;2140:33;2167:5;2140:33;:::i;:::-;2040:139;;;;:::o;2185:77::-;2222:7;2251:5;2240:16;;2185:77;;;:::o;2268:122::-;2341:24;2359:5;2341:24;:::i;:::-;2334:5;2331:35;2321:63;;2380:1;2377;2370:12;2321:63;2268:122;:::o;2396:139::-;2442:5;2480:6;2467:20;2458:29;;2496:33;2523:5;2496:33;:::i;:::-;2396:139;;;;:::o;2541:474::-;2609:6;2617;2666:2;2654:9;2645:7;2641:23;2637:32;2634:119;;;2672:79;;:::i;:::-;2634:119;2792:1;2817:53;2862:7;2853:6;2842:9;2838:22;2817:53;:::i;:::-;2807:63;;2763:117;2919:2;2945:53;2990:7;2981:6;2970:9;2966:22;2945:53;:::i;:::-;2935:63;;2890:118;2541:474;;;;;:::o;3021:90::-;3055:7;3098:5;3091:13;3084:21;3073:32;;3021:90;;;:::o;3117:109::-;3198:21;3213:5;3198:21;:::i;:::-;3193:3;3186:34;3117:109;;:::o;3232:210::-;3319:4;3357:2;3346:9;3342:18;3334:26;;3370:65;3432:1;3421:9;3417:17;3408:6;3370:65;:::i;:::-;3232:210;;;;:::o;3448:118::-;3535:24;3553:5;3535:24;:::i;:::-;3530:3;3523:37;3448:118;;:::o;3572:222::-;3665:4;3703:2;3692:9;3688:18;3680:26;;3716:71;3784:1;3773:9;3769:17;3760:6;3716:71;:::i;:::-;3572:222;;;;:::o;3800:619::-;3877:6;3885;3893;3942:2;3930:9;3921:7;3917:23;3913:32;3910:119;;;3948:79;;:::i;:::-;3910:119;4068:1;4093:53;4138:7;4129:6;4118:9;4114:22;4093:53;:::i;:::-;4083:63;;4039:117;4195:2;4221:53;4266:7;4257:6;4246:9;4242:22;4221:53;:::i;:::-;4211:63;;4166:118;4323:2;4349:53;4394:7;4385:6;4374:9;4370:22;4349:53;:::i;:::-;4339:63;;4294:118;3800:619;;;;;:::o;4425:86::-;4460:7;4500:4;4493:5;4489:16;4478:27;;4425:86;;;:::o;4517:112::-;4600:22;4616:5;4600:22;:::i;:::-;4595:3;4588:35;4517:112;;:::o;4635:214::-;4724:4;4762:2;4751:9;4747:18;4739:26;;4775:67;4839:1;4828:9;4824:17;4815:6;4775:67;:::i;:::-;4635:214;;;;:::o;4855:329::-;4914:6;4963:2;4951:9;4942:7;4938:23;4934:32;4931:119;;;4969:79;;:::i;:::-;4931:119;5089:1;5114:53;5159:7;5150:6;5139:9;5135:22;5114:53;:::i;:::-;5104:63;;5060:117;4855:329;;;;:::o;5190:118::-;5277:24;5295:5;5277:24;:::i;:::-;5272:3;5265:37;5190:118;;:::o;5314:222::-;5407:4;5445:2;5434:9;5430:18;5422:26;;5458:71;5526:1;5515:9;5511:17;5502:6;5458:71;:::i;:::-;5314:222;;;;:::o;5542:474::-;5610:6;5618;5667:2;5655:9;5646:7;5642:23;5638:32;5635:119;;;5673:79;;:::i;:::-;5635:119;5793:1;5818:53;5863:7;5854:6;5843:9;5839:22;5818:53;:::i;:::-;5808:63;;5764:117;5920:2;5946:53;5991:7;5982:6;5971:9;5967:22;5946:53;:::i;:::-;5936:63;;5891:118;5542:474;;;;;:::o;6022:180::-;6070:77;6067:1;6060:88;6167:4;6164:1;6157:15;6191:4;6188:1;6181:15;6208:320;6252:6;6289:1;6283:4;6279:12;6269:22;;6336:1;6330:4;6326:12;6357:18;6347:81;;6413:4;6405:6;6401:17;6391:27;;6347:81;6475:2;6467:6;6464:14;6444:18;6441:38;6438:84;;6494:18;;:::i;:::-;6438:84;6259:269;6208:320;;;:::o;6534:442::-;6683:4;6721:2;6710:9;6706:18;6698:26;;6734:71;6802:1;6791:9;6787:17;6778:6;6734:71;:::i;:::-;6815:72;6883:2;6872:9;6868:18;6859:6;6815:72;:::i;:::-;6897;6965:2;6954:9;6950:18;6941:6;6897:72;:::i;:::-;6534:442;;;;;;:::o;6982:180::-;7030:77;7027:1;7020:88;7127:4;7124:1;7117:15;7151:4;7148:1;7141:15;7168:191;7208:3;7227:20;7245:1;7227:20;:::i;:::-;7222:25;;7261:20;7279:1;7261:20;:::i;:::-;7256:25;;7304:1;7301;7297:9;7290:16;;7325:3;7322:1;7319:10;7316:36;;;7332:18;;:::i;:::-;7316:36;7168:191;;;;:::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "901400",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "allowance(address,address)": "infinite",
            "approve(address,uint256)": "infinite",
            "balanceOf(address)": "2864",
            "decimals()": "432",
            "mint(address,uint256)": "infinite",
            "name()": "infinite",
            "owner()": "2589",
            "renounceOwnership()": "infinite",
            "symbol()": "infinite",
            "totalSupply()": "2482",
            "transfer(address,uint256)": "infinite",
            "transferFrom(address,address,uint256)": "infinite",
            "transferOwnership(address)": "infinite"
          }
        },
        "methodIdentifiers": {
          "allowance(address,address)": "dd62ed3e",
          "approve(address,uint256)": "095ea7b3",
          "balanceOf(address)": "70a08231",
          "decimals()": "313ce567",
          "mint(address,uint256)": "40c10f19",
          "name()": "06fdde03",
          "owner()": "8da5cb5b",
          "renounceOwnership()": "715018a6",
          "symbol()": "95d89b41",
          "totalSupply()": "18160ddd",
          "transfer(address,uint256)": "a9059cbb",
          "transferFrom(address,address,uint256)": "23b872dd",
          "transferOwnership(address)": "f2fde38b"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/BaseERC20.sol\":\"BaseERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ef9389a2c07bc40d8a7ba48914724ab2c108fac391ce12314f01321813e6368\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/tokens/BaseERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BaseERC20 is ERC20, Ownable {\\n    constructor(address initialOwner) \\n        ERC20(\\\"BaseToken\\\", \\\"BASE\\\") \\n        Ownable(initialOwner) \\n    {\\n        _mint(msg.sender, 1000000 * 10 ** decimals());\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n    }\\n} \",\"keccak256\":\"0x89f93245028768c8c15c86ad803ba2f6487b8f0b0fab8ab2cf51db54898ecc85\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 1591,
            "contract": "contracts/tokens/BaseERC20.sol:BaseERC20",
            "label": "_balances",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 1597,
            "contract": "contracts/tokens/BaseERC20.sol:BaseERC20",
            "label": "_allowances",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 1599,
            "contract": "contracts/tokens/BaseERC20.sol:BaseERC20",
            "label": "_totalSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1601,
            "contract": "contracts/tokens/BaseERC20.sol:BaseERC20",
            "label": "_name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1603,
            "contract": "contracts/tokens/BaseERC20.sol:BaseERC20",
            "label": "_symbol",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 8,
            "contract": "contracts/tokens/BaseERC20.sol:BaseERC20",
            "label": "_owner",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC4906.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title ERC-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"./IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport {ERC1155Utils} from \\\"./utils/ERC1155Utils.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {Arrays} from \\\"../../utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\\n\\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the ERC].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = _balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    _balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                _balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                ERC1155Utils.checkOnERC1155Received(operator, from, to, id, value, data);\\n            } else {\\n                ERC1155Utils.checkOnERC1155BatchReceived(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the ERC].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        assembly (\\\"memory-safe\\\") {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[ERC].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[ERC].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC-1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC-1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Utils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/utils/ERC1155Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\nimport {IERC1155Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-1155 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-1155[ERC-1155].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC1155Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC1155-onERC1155Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC1155Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC1155Receiver implementer\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check for the provided `operator` by calling {IERC1155-onERC1155BatchReceived}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC1155Receiver implementer\\n                    revert IERC1155Errors.ERC1155InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {ERC721Utils} from \\\"./utils/ERC721Utils.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if:\\n     * - `spender` does not have approval from `owner` for `tokenId`.\\n     * - `spender` does not have approval to manage all of `owner`'s assets.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC-721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Arrays.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Arrays.sol)\\n// This file was procedurally generated from scripts/generate/templates/Arrays.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Comparators} from \\\"./Comparators.sol\\\";\\nimport {SlotDerivation} from \\\"./SlotDerivation.sol\\\";\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using SlotDerivation for bytes32;\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Sort an array of uint256 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n · log(n))` in average and `O(n²)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        uint256[] memory array,\\n        function(uint256, uint256) pure returns (bool) comp\\n    ) internal pure returns (uint256[] memory) {\\n        _quickSort(_begin(array), _end(array), comp);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of uint256 in increasing order.\\n     */\\n    function sort(uint256[] memory array) internal pure returns (uint256[] memory) {\\n        sort(array, Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of address (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n · log(n))` in average and `O(n²)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        address[] memory array,\\n        function(address, address) pure returns (bool) comp\\n    ) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of address in increasing order.\\n     */\\n    function sort(address[] memory array) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of bytes32 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n · log(n))` in average and `O(n²)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        bytes32[] memory array,\\n        function(bytes32, bytes32) pure returns (bool) comp\\n    ) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of bytes32 in increasing order.\\n     */\\n    function sort(bytes32[] memory array) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Performs a quick sort of a segment of memory. The segment sorted starts at `begin` (inclusive), and stops\\n     * at end (exclusive). Sorting follows the `comp` comparator.\\n     *\\n     * Invariant: `begin <= end`. This is the case when initially called by {sort} and is preserved in subcalls.\\n     *\\n     * IMPORTANT: Memory locations between `begin` and `end` are not validated/zeroed. This function should\\n     * be used only if the limits are within a memory array.\\n     */\\n    function _quickSort(uint256 begin, uint256 end, function(uint256, uint256) pure returns (bool) comp) private pure {\\n        unchecked {\\n            if (end - begin < 0x40) return;\\n\\n            // Use first element as pivot\\n            uint256 pivot = _mload(begin);\\n            // Position where the pivot should be at the end of the loop\\n            uint256 pos = begin;\\n\\n            for (uint256 it = begin + 0x20; it < end; it += 0x20) {\\n                if (comp(_mload(it), pivot)) {\\n                    // If the value stored at the iterator's position comes before the pivot, we increment the\\n                    // position of the pivot and move the value there.\\n                    pos += 0x20;\\n                    _swap(pos, it);\\n                }\\n            }\\n\\n            _swap(begin, pos); // Swap pivot into place\\n            _quickSort(begin, pos, comp); // Sort the left side of the pivot\\n            _quickSort(pos + 0x20, end, comp); // Sort the right side of the pivot\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first element of `array`.\\n     */\\n    function _begin(uint256[] memory array) private pure returns (uint256 ptr) {\\n        assembly (\\\"memory-safe\\\") {\\n            ptr := add(array, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first memory word (32bytes) after `array`. This is the memory word\\n     * that comes just after the last element of the array.\\n     */\\n    function _end(uint256[] memory array) private pure returns (uint256 ptr) {\\n        unchecked {\\n            return _begin(array) + array.length * 0x20;\\n        }\\n    }\\n\\n    /**\\n     * @dev Load memory word (as a uint256) at location `ptr`.\\n     */\\n    function _mload(uint256 ptr) private pure returns (uint256 value) {\\n        assembly {\\n            value := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @dev Swaps the elements memory location `ptr1` and `ptr2`.\\n     */\\n    function _swap(uint256 ptr1, uint256 ptr2) private pure {\\n        assembly {\\n            let value1 := mload(ptr1)\\n            let value2 := mload(ptr2)\\n            mstore(ptr1, value2)\\n            mstore(ptr2, value1)\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address memory array to uint256 memory array\\n    function _castToUint256Array(address[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 memory array to uint256 memory array\\n    function _castToUint256Array(bytes32[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(address, address) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(bytes32, bytes32) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * NOTE: The `array` is expected to be sorted in ascending order, and to\\n     * contain no repeated elements.\\n     *\\n     * IMPORTANT: Deprecated. This implementation behaves as {lowerBound} but lacks\\n     * support for repeated elements in the array. The {lowerBound} function should\\n     * be used instead.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value greater or equal than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/lower_bound[lower_bound].\\n     */\\n    function lowerBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value strictly greater than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/upper_bound[upper_bound].\\n     */\\n    function upperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {lowerBound}, but with an array in memory.\\n     */\\n    function lowerBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {upperBound}, but with an array in memory.\\n     */\\n    function upperBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(bytes32[] memory arr, uint256 pos) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of an dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(address[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of an dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(bytes32[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of an dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(uint256[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Comparators.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Comparators.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to compare values.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Comparators {\\n    function lt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a < b;\\n    }\\n\\n    function gt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a > b;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2²⁵⁶ + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\\n            // This is going to be our x_0 (and ε_0)\\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\\n            //              = ((x_n² + a) / (2 * x_n))² - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\\n            //              = (x_n² - a)² / (2 * x_n)²\\n            //              = ((x_n² - a) / (2 * x_n))²\\n            //              ≥ 0\\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\\n            //         = | ε_n² / (2 * x_n) |\\n            //         = ε_n² / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // ε_1 = ε_0² / | (2 * x_0) |\\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\\n            //     ≤ 2**(e-3) / 3\\n            //     ≤ 2**(e-3-log2(3))\\n            //     ≤ 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\\n            //         ≤ 2**(2*e-2*k) / 2**e\\n            //         ≤ 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\\n\\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Panic.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/SlotDerivation.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/SlotDerivation.sol)\\n// This file was procedurally generated from scripts/generate/templates/SlotDerivation.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for computing storage (and transient storage) locations from namespaces and deriving slots\\n * corresponding to standard patterns. The derivation method for array and mapping matches the storage layout used by\\n * the solidity language / compiler.\\n *\\n * See https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays[Solidity docs for mappings and dynamic arrays.].\\n *\\n * Example usage:\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using StorageSlot for bytes32;\\n *     using SlotDerivation for bytes32;\\n *\\n *     // Declare a namespace\\n *     string private constant _NAMESPACE = \\\"<namespace>\\\" // eg. OpenZeppelin.Slot\\n *\\n *     function setValueInNamespace(uint256 key, address newValue) internal {\\n *         _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value = newValue;\\n *     }\\n *\\n *     function getValueInNamespace(uint256 key) internal view returns (address) {\\n *         return _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {StorageSlot}.\\n *\\n * NOTE: This library provides a way to manipulate storage locations in a non-standard way. Tooling for checking\\n * upgrade safety will ignore the slots accessed through this library.\\n *\\n * _Available since v5.1._\\n */\\nlibrary SlotDerivation {\\n    /**\\n     * @dev Derive an ERC-7201 slot from a string (namespace).\\n     */\\n    function erc7201Slot(string memory namespace) internal pure returns (bytes32 slot) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, sub(keccak256(add(namespace, 0x20), mload(namespace)), 1))\\n            slot := and(keccak256(0x00, 0x20), not(0xff))\\n        }\\n    }\\n\\n    /**\\n     * @dev Add an offset to a slot to get the n-th element of a structure or an array.\\n     */\\n    function offset(bytes32 slot, uint256 pos) internal pure returns (bytes32 result) {\\n        unchecked {\\n            return bytes32(uint256(slot) + pos);\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of the first element in an array from the slot where the length is stored.\\n     */\\n    function deriveArray(bytes32 slot) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, slot)\\n            result := keccak256(0x00, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, address key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, and(key, shr(96, not(0))))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bool key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, iszero(iszero(key)))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes32 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, uint256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, int256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, string memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/tokens/BaseERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BaseERC1155 is ERC1155, Ownable {\\n    constructor(address initialOwner)\\n        ERC1155(\\\"https://game.example/api/item/{id}.json\\\")\\n        Ownable(initialOwner)\\n    {\\n        _mint(msg.sender, 0, 1000, \\\"\\\"); // 创建1000个id为0的代币\\n        _mint(msg.sender, 1, 1, \\\"\\\");    // 创建1个id为1的代币\\n    }\\n\\n    function setURI(string memory newuri) public onlyOwner {\\n        _setURI(newuri);\\n    }\\n\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public onlyOwner {\\n        _mint(account, id, amount, data);\\n    }\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public onlyOwner {\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n} \"\n    },\n    \"contracts/tokens/BaseERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BaseERC20 is ERC20, Ownable {\\n    constructor(address initialOwner) \\n        ERC20(\\\"BaseToken\\\", \\\"BASE\\\") \\n        Ownable(initialOwner) \\n    {\\n        _mint(msg.sender, 1000000 * 10 ** decimals());\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n    }\\n} \"\n    },\n    \"contracts/tokens/BaseERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BaseERC721 is ERC721, ERC721URIStorage, Ownable {\\n    uint256 private _nextTokenId;\\n\\n    constructor(address initialOwner)\\n        ERC721(\\\"BaseNFT\\\", \\\"BNFT\\\")\\n        Ownable(initialOwner)\\n    {}\\n\\n    function safeMint(address to, string memory uri) public onlyOwner {\\n        uint256 tokenId = _nextTokenId++;\\n        _safeMint(to, tokenId);\\n        _setTokenURI(tokenId, uri);\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n} \"\n    }\n  },\n  \"settings\": {\n    \"evmVersion\": \"paris\",\n    \"optimizer\": {\n      \"enabled\": false,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "ddf830c0bf20a538526d2e7b21f6d594",
      "transactionHash": "0x5aa9a76f1019a659a853601efa8c9b20217f1cc1c63cd17ce8305a493cfe0261",
      "args": [
        "0x4844c339e748fD44825856E5B877a7A9B5BcE559"
      ]
    },
    "decoded": {
      "from": "0x4844c339e748fD44825856E5B877a7A9B5BcE559",
      "gasPrice": "7866010",
      "maxFeePerGas": "7866010",
      "maxPriorityFeePerGas": "7865155",
      "gasLimit": "1194427",
      "to": null,
      "value": "0",
      "nonce": 532,
      "data": "0x608060405234801561001057600080fd5b50604051611d13380380611d138339818101604052810190610032919061055f565b806040518060400160405280600981526020017f42617365546f6b656e00000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f424153450000000000000000000000000000000000000000000000000000000081525081600390816100ae91906107dc565b5080600490816100be91906107dc565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101335760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161012a91906108bd565b60405180910390fd5b6101428161018060201b60201c565b5061017a3361015561024660201b60201c565b600a6101619190610a47565b620f424061016f9190610a92565b61024f60201b60201c565b50610b69565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006012905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036102c15760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016102b891906108bd565b60405180910390fd5b6102d3600083836102d760201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361032957806002600082825461031d9190610ad4565b925050819055506103fc565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156103b5578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016103ac93929190610b17565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036104455780600260008282540392505081905550610492565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516104ef9190610b4e565b60405180910390a3505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061052c82610501565b9050919050565b61053c81610521565b811461054757600080fd5b50565b60008151905061055981610533565b92915050565b600060208284031215610575576105746104fc565b5b60006105838482850161054a565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061060d57607f821691505b6020821081036106205761061f6105c6565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261064b565b610692868361064b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006106d96106d46106cf846106aa565b6106b4565b6106aa565b9050919050565b6000819050919050565b6106f3836106be565b6107076106ff826106e0565b848454610658565b825550505050565b600090565b61071c61070f565b6107278184846106ea565b505050565b5b8181101561074b57610740600082610714565b60018101905061072d565b5050565b601f8211156107905761076181610626565b61076a8461063b565b81016020851015610779578190505b61078d6107858561063b565b83018261072c565b50505b505050565b600082821c905092915050565b60006107b360001984600802610795565b1980831691505092915050565b60006107cc83836107a2565b9150826002028217905092915050565b6107e58261058c565b67ffffffffffffffff8111156107fe576107fd610597565b5b61080882546105f5565b61081382828561074f565b600060209050601f8311600181146108465760008415610834578287015190505b61083e85826107c0565b8655506108a6565b601f19841661085486610626565b60005b8281101561087c57848901518255600182019150602085019450602081019050610857565b868310156108995784890151610895601f8916826107a2565b8355505b6001600288020188555050505b505050505050565b6108b781610521565b82525050565b60006020820190506108d260008301846108ae565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b600185111561095e5780860481111561093a576109396108d8565b5b60018516156109495780820291505b808102905061095785610907565b945061091e565b94509492505050565b6000826109775760019050610a33565b816109855760009050610a33565b816001811461099b57600281146109a5576109d4565b6001915050610a33565b60ff8411156109b7576109b66108d8565b5b8360020a9150848211156109ce576109cd6108d8565b5b50610a33565b5060208310610133831016604e8410600b8410161715610a095782820a905083811115610a0457610a036108d8565b5b610a33565b610a168484846001610914565b92509050818404811115610a2d57610a2c6108d8565b5b81810290505b9392505050565b600060ff82169050919050565b6000610a52826106aa565b9150610a5d83610a3a565b9250610a8a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610967565b905092915050565b6000610a9d826106aa565b9150610aa8836106aa565b9250828202610ab6816106aa565b91508282048414831517610acd57610acc6108d8565b5b5092915050565b6000610adf826106aa565b9150610aea836106aa565b9250828201905080821115610b0257610b016108d8565b5b92915050565b610b11816106aa565b82525050565b6000606082019050610b2c60008301866108ae565b610b396020830185610b08565b610b466040830184610b08565b949350505050565b6000602082019050610b636000830184610b08565b92915050565b61119b80610b786000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806370a082311161008c57806395d89b411161006657806395d89b4114610202578063a9059cbb14610220578063dd62ed3e14610250578063f2fde38b14610280576100cf565b806370a08231146101aa578063715018a6146101da5780638da5cb5b146101e4576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce5671461017057806340c10f191461018e575b600080fd5b6100dc61029c565b6040516100e99190610def565b60405180910390f35b61010c60048036038101906101079190610eaa565b61032e565b6040516101199190610f05565b60405180910390f35b61012a610351565b6040516101379190610f2f565b60405180910390f35b61015a60048036038101906101559190610f4a565b61035b565b6040516101679190610f05565b60405180910390f35b61017861038a565b6040516101859190610fb9565b60405180910390f35b6101a860048036038101906101a39190610eaa565b610393565b005b6101c460048036038101906101bf9190610fd4565b6103a9565b6040516101d19190610f2f565b60405180910390f35b6101e26103f1565b005b6101ec610405565b6040516101f99190611010565b60405180910390f35b61020a61042f565b6040516102179190610def565b60405180910390f35b61023a60048036038101906102359190610eaa565b6104c1565b6040516102479190610f05565b60405180910390f35b61026a6004803603810190610265919061102b565b6104e4565b6040516102779190610f2f565b60405180910390f35b61029a60048036038101906102959190610fd4565b61056b565b005b6060600380546102ab9061109a565b80601f01602080910402602001604051908101604052809291908181526020018280546102d79061109a565b80156103245780601f106102f957610100808354040283529160200191610324565b820191906000526020600020905b81548152906001019060200180831161030757829003601f168201915b5050505050905090565b6000806103396105f1565b90506103468185856105f9565b600191505092915050565b6000600254905090565b6000806103666105f1565b905061037385828561060b565b61037e8585856106a0565b60019150509392505050565b60006012905090565b61039b610794565b6103a5828261081b565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6103f9610794565b610403600061089d565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461043e9061109a565b80601f016020809104026020016040519081016040528092919081815260200182805461046a9061109a565b80156104b75780601f1061048c576101008083540402835291602001916104b7565b820191906000526020600020905b81548152906001019060200180831161049a57829003601f168201915b5050505050905090565b6000806104cc6105f1565b90506104d98185856106a0565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610573610794565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105e55760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016105dc9190611010565b60405180910390fd5b6105ee8161089d565b50565b600033905090565b6106068383836001610963565b505050565b600061061784846104e4565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81101561069a578181101561068a578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610681939291906110cb565b60405180910390fd5b61069984848484036000610963565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107125760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016107099190611010565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107845760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161077b9190611010565b60405180910390fd5b61078f838383610b3a565b505050565b61079c6105f1565b73ffffffffffffffffffffffffffffffffffffffff166107ba610405565b73ffffffffffffffffffffffffffffffffffffffff1614610819576107dd6105f1565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108109190611010565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361088d5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016108849190611010565b60405180910390fd5b61089960008383610b3a565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036109d55760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016109cc9190611010565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a475760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610a3e9190611010565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610b34578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610b2b9190610f2f565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b8c578060026000828254610b809190611131565b92505081905550610c5f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c18578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610c0f939291906110cb565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ca85780600260008282540392505081905550610cf5565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d529190610f2f565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d99578082015181840152602081019050610d7e565b60008484015250505050565b6000601f19601f8301169050919050565b6000610dc182610d5f565b610dcb8185610d6a565b9350610ddb818560208601610d7b565b610de481610da5565b840191505092915050565b60006020820190508181036000830152610e098184610db6565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e4182610e16565b9050919050565b610e5181610e36565b8114610e5c57600080fd5b50565b600081359050610e6e81610e48565b92915050565b6000819050919050565b610e8781610e74565b8114610e9257600080fd5b50565b600081359050610ea481610e7e565b92915050565b60008060408385031215610ec157610ec0610e11565b5b6000610ecf85828601610e5f565b9250506020610ee085828601610e95565b9150509250929050565b60008115159050919050565b610eff81610eea565b82525050565b6000602082019050610f1a6000830184610ef6565b92915050565b610f2981610e74565b82525050565b6000602082019050610f446000830184610f20565b92915050565b600080600060608486031215610f6357610f62610e11565b5b6000610f7186828701610e5f565b9350506020610f8286828701610e5f565b9250506040610f9386828701610e95565b9150509250925092565b600060ff82169050919050565b610fb381610f9d565b82525050565b6000602082019050610fce6000830184610faa565b92915050565b600060208284031215610fea57610fe9610e11565b5b6000610ff884828501610e5f565b91505092915050565b61100a81610e36565b82525050565b60006020820190506110256000830184611001565b92915050565b6000806040838503121561104257611041610e11565b5b600061105085828601610e5f565b925050602061106185828601610e5f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806110b257607f821691505b6020821081036110c5576110c461106b565b5b50919050565b60006060820190506110e06000830186611001565b6110ed6020830185610f20565b6110fa6040830184610f20565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061113c82610e74565b915061114783610e74565b925082820190508082111561115f5761115e611102565b5b9291505056fea2646970667358221220ba6e1025bd3915ea9ad7d7a9d93e541077ba1b0424f0c1c19384a020bcc30d9764736f6c634300081c00330000000000000000000000004844c339e748fd44825856e5b877a7a9b5bce559",
      "r": "0xc1f903a3485692f650d4267a3c57d9d9527232e7db67c65bcf816be7cbd49cf2",
      "s": "0x441989b15c96c00b4ff38edbcd57e34a88f49ef2bc775578b5915bbcafc519e0",
      "v": 1,
      "chainId": 17000
    }
  }
}